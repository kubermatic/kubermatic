dev:
  box: golang:1.7
  steps:
    - setup-go-workspace:
        package-dir: github.com/kubermatic/api
    - internal/watch:
        code: |
          set -e
          make build GOBUILD="go install"
          echo "Build finished."
        reload: true

build:
  box: golang:1.7
  steps:
    - setup-go-workspace:
        package-dir: github.com/kubermatic/api
    - script:
        name: install go tools
        code: |
          go version
          go get -u github.com/alecthomas/gometalinter
          go get github.com/axw/gocov/gocov # https://github.com/golang/go/issues/6909
          # go get github.com/mattn/goveralls
          git describe --tags |tee VERSION
          gometalinter --install
          go get -u github.com/Masterminds/glide
    - script:
        name: install dependencies
        code: |
          GLIDE_HOME="$WERCKER_CACHE_DIR/glide/"
          echo "GLIDE_HOME = $GLIDE_HOME"
          mkdir -p $GLIDE_HOME
          glide --home $GLIDE_HOME install --strip-vendor
    - script:
        name: build and test
        code: |
          CGO_ENABLED=0 GOBUILD="go install" make
    - script:
        name: copy to deployment directory
        code: |
          mkdir -p "$WERCKER_OUTPUT_DIR/opt"
          cp -av alpine-3.1.tar.bz2 kubermatic-api kubermatic-cluster-controller "$WERCKER_OUTPUT_DIR"
          cp -r addon-charts "$WERCKER_OUTPUT_DIR/opt/"
          cp -avx template "$WERCKER_OUTPUT_DIR/opt/"
  after-steps:
    - install-packages:
        packages: ruby
    - wantedly/pretty-slack-notify:
        webhook_url: $SLACK_WEBHOOK_URL
        notify_on: "failed"

push-hash-image:
    box: ubuntu:14.04
    steps:
    - script:
        code: |
          tar -xvjf alpine-3.1.tar.bz2
          rm -f alpine-3.1.tar.bz2
    - internal/docker-scratch-push:
        name: push to docker hub as $WERCKER_GIT_COMMIT
        author: Dr. Stefan Schimanski <stefan.schimanski@gmail.com>
        cmd: /kubermatic-api
        username: $USERNAME
        password: $PASSWORD
        email: stefan.schimanski@gmail.com
        tag: $WERCKER_GIT_COMMIT
        working-dir: /opt
        repository: kubermatic/api
        registry: https://registry.hub.docker.com

deployment-update:
    box: ubuntu:14.04
    steps:
    - create-file:
        name: Create ca.pem
        filename: ca.pem
        overwrite: true
        content: $CERTIFICATE_AUTHORITY
    - kubectl:
        server: $KUBERNETES_MASTER
        username: $KUBERNETES_USERNAME
        password: $KUBERNETES_PASSWORD
        certificate-authority: ca.pem
        command: set image deployment/kubermatic-api-v1 api=kubermatic/api:$WERCKER_GIT_COMMIT --namespace=kubermatic
    - kubectl:
        server: $KUBERNETES_MASTER
        username: $KUBERNETES_USERNAME
        password: $KUBERNETES_PASSWORD
        certificate-authority: ca.pem
        command: set image deployment/cluster-controller-v1 cluster-controller=kubermatic/api:$WERCKER_GIT_COMMIT --namespace=kubermatic

push-image:
    box: ubuntu:14.04
    steps:
    - script:
        code: |
          tar -xvjf alpine-3.1.tar.bz2
          rm -f alpine-3.1.tar.bz2
    - internal/docker-scratch-push:
        name: push to docker hub as $PUSH_TAG
        author: Dr. Stefan Schimanski <stefan.schimanski@gmail.com>
        cmd: /kubermatic-api
        username: $USERNAME
        password: $PASSWORD
        email: stefan.schimanski@gmail.com
        tag: $PUSH_TAG
        working-dir: /opt
        repository: kubermatic/api
        registry: https://registry.hub.docker.com

rollback-api:
    box: ubuntu:14.04
    steps:
    - create-file:
        name: Create ca.pem
        filename: ca.pem
        content: $CERTIFICATE_AUTHORITY
    - kubectl:
        server: $KUBERNETES_MASTER
        username: $KUBERNETES_USERNAME
        password: $KUBERNETES_PASSWORD
        certificate-authority: ca.pem
        command: rollout undo deployment/kubermatic-api-v1 --namespace=api

rollback-cluster-controller:
    box: ubuntu:14.04
    steps:
    - script:
        code: |
          apt-get update
          apt-get install -y ca-certificates
    - create-file:
        name: Create ca.pem
        filename: ca.pem
        content: $CERTIFICATE_AUTHORITY
    - kubectl:
        server: $KUBERNETES_MASTER
        username: $KUBERNETES_USERNAME
        password: $KUBERNETES_PASSWORD
        certificate-authority: ca.pem
        command: rollout undo deployment/kubermatic-api-v1 --namespace=control
