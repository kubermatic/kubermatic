pipeline:
  0-dep:
    commands:
    - cd api
    - dep status -v
    image: metalmatze/dep:0.4.1
    pull: true
  1-gofmt:
    commands:
    - cd api
    - make gofmt
    image: golang:1.9
    pull: true
  2-verify-codegen:
    commands:
    - cd api
    - ./hack/verify-codegen.sh
    image: golang:1.9
    pull: true
  3-license-validation:
    commands:
    - cd api
    - wwhrd check -f ../allowed_licensed.yaml
    group: lint
    image: metalmatze/wwhrd:1.9
    pull: true
  3-lint:
    commands:
    - cd api
    - make lint
    group: lint
    image: metalmatze/gometalinter:1.9
    pull: true
  3-verify-swagger-spec:
    commands:
    - cd api
    - ./hack/verify-swagger.sh
    group: lint
    image: golang:1.9
    pull: true
  4-build:
    commands:
    - cd api
    - CGO_ENABLED=0 make build
    group: build
    image: golang:1.9
    pull: true
  4-test:
    commands:
    - cd api
    - make test
    group: build
    image: golang:1.9
    pull: true
  4-write-version:
    commands:
    - cd config
    - sed -i "s/{API_IMAGE_TAG}/${DRONE_TAG=$DRONE_COMMIT}/g" versions-values.yaml
    - sed -i "s/{CONTROLLER_IMAGE_TAG}/${DRONE_TAG=$DRONE_COMMIT}/g" versions-values.yaml
    - sed -i "s/{BARE_METAL_PROVIDER_IMAGE_TAG}/${DRONE_TAG=$DRONE_COMMIT}/g" versions-values.yaml
    - cat versions-values.yaml
    group: build
    image: ubuntu
    pull: true
  5-kubermatic-docker-always:
    context: api
    dockerfile: api/Dockerfile
    group: push-always
    image: plugins/docker
    pull: true
    repo: kubermatic/api
    secrets:
    - docker_username
    - docker_password
    tags:
    - ${DRONE_COMMIT}
  5-kubermatic-installer-docker-always:
    context: config
    dockerfile: config/Dockerfile
    group: push-always
    image: plugins/docker
    pull: true
    repo: kubermatic/installer
    secrets:
    - docker_username
    - docker_password
    tags:
    - ${DRONE_COMMIT}
  6-kubermatic-docker-master:
    context: api
    dockerfile: api/Dockerfile
    group: push-master
    image: plugins/docker
    pull: true
    repo: kubermatic/api
    secrets:
    - docker_username
    - docker_password
    tags:
    - master
    when:
      branch: master
  6-kubermatic-installer-docker-master:
    context: config
    dockerfile: config/Dockerfile
    group: push-master
    image: plugins/docker
    pull: true
    repo: kubermatic/installer
    secrets:
    - docker_username
    - docker_password
    tags:
    - master
    when:
      branch: master
  7-kubermatic-docker-release:
    context: api
    dockerfile: api/Dockerfile
    group: push-master
    image: plugins/docker
    pull: true
    repo: kubermatic/api
    secrets:
    - docker_username
    - docker_password
    tags:
    - ${DRONE_TAG}
    - latest
    when:
      event:
      - tag
  7-kubermatic-installer-docker-release:
    context: config
    dockerfile: config/Dockerfile
    group: push-release
    image: plugins/docker
    pull: true
    repo: kubermatic/installer
    secrets:
    - docker_username
    - docker_password
    tags:
    - ${DRONE_TAG}
    - latest
    when:
      event:
      - tag
  8-sync-charts:
    commands:
    - apk add --no-cache -U git
    - git config --global user.email "dev@loodse.com"
    - git config --global user.name "drone"
    - export INSTALLER_DIR="/go/src/github.com/kubermatic/kubermatic-installer"
    - git clone https://github.com/kubermatic/kubermatic-installer.git $INSTALLER_DIR
      && mkdir -p $INSTALLER_DIR/charts
    - cp -r config/cert-manager config/certs config/kubermatic config/monitoring config/nginx-ingress-controller
      config/nodeport-proxy config/oauth $INSTALLER_DIR/charts
    - cd $INSTALLER_DIR
    - git add . && git commit -m "Synchronising helm charts from commit ${DRONE_COMMIT}"
    - git tag ${DRONE_TAG}
    - git push origin master --tags
    image: alpine:3.7
    pull: true
    when:
      branch:
        exclude:
        - release/v1.*
        include:
        - master
        - release/*
      event:
      - tag
  9-deploy-dev:
    charts:
    - name: kubermatic
      namespace: kubermatic
      path: config/kubermatic/
    - name: nodeport-proxy
      namespace: nodeport-proxy
      path: config/nodeport-proxy/
    - name: nginx
      namespace: ingress-nginx
      path: config/nginx-ingress-controller/
    - name: oauth
      namespace: oauth
      path: config/oauth/
    - name: cert-manager
      namespace: cert-manager
      path: config/cert-manager/
    - name: certs
      namespace: default
      path: config/certs/
    - name: prometheus-operator
      namespace: monitoring
      path: config/monitoring/prometheus-operator/
    - name: node-exporter
      namespace: monitoring
      path: config/monitoring/node-exporter/
    - name: kube-state-metrics
      namespace: monitoring
      path: config/monitoring/kube-state-metrics/
    - name: grafana
      namespace: monitoring
      path: config/monitoring/grafana/
    - name: alertmanager
      namespace: monitoring
      path: config/monitoring/alertmanager/
    - name: prometheus
      namespace: monitoring
      path: config/monitoring/prometheus/
    helm: upgrade --install --tiller-namespace=kubermatic-installer --values config/versions-values.yaml
    image: kubeciio/helm
    pull: true
    secrets:
    - source: kubeconfig_dev
      target: kubeconfig
    - source: values_dev
      target: values
    values:
    - values
    when:
      branch: master
  10-deploy-cloud-asia:
    charts:
    - name: kubermatic
      namespace: kubermatic
      path: config/kubermatic/
    - name: nodeport-proxy
      namespace: nodeport-proxy
      path: config/nodeport-proxy/
    group: deploy-cloud
    helm: upgrade --install --kube-context=asia-east1-a-1 --tiller-namespace=kubermatic-installer
      --values config/versions-values.yaml
    image: kubeciio/helm
    pull: true
    secrets:
    - source: kubeconfig_cloud
      target: kubeconfig
    - source: values_cloud_as
      target: values
    values:
    - values
    when:
      branch: master
  10-deploy-cloud-europe:
    charts:
    - name: kubermatic
      namespace: kubermatic
      path: config/kubermatic/
    - name: nodeport-proxy
      namespace: nodeport-proxy
      path: config/nodeport-proxy/
    - name: nginx
      namespace: ingress-nginx
      path: config/nginx-ingress-controller/
    - name: oauth
      namespace: oauth
      path: config/oauth/
    - name: cert-manager
      namespace: cert-manager
      path: config/cert-manager/
    - name: certs
      namespace: default
      path: config/certs/
    - name: prometheus-operator
      namespace: monitoring
      path: config/monitoring/prometheus-operator/
    - name: node-exporter
      namespace: monitoring
      path: config/monitoring/node-exporter/
    - name: kube-state-metrics
      namespace: monitoring
      path: config/monitoring/kube-state-metrics/
    - name: grafana
      namespace: monitoring
      path: config/monitoring/grafana/
    - name: alertmanager
      namespace: monitoring
      path: config/monitoring/alertmanager/
    - name: prometheus
      namespace: monitoring
      path: config/monitoring/prometheus/
    group: deploy-cloud
    helm: upgrade --install --kube-context=europe-west3-c-1 --tiller-namespace=kubermatic-installer
      --values config/versions-values.yaml
    image: kubeciio/helm
    pull: true
    secrets:
    - source: kubeconfig_cloud
      target: kubeconfig
    - source: values_cloud_eu
      target: values
    values:
    - values
    when:
      branch: master
  10-deploy-cloud-us:
    charts:
    - name: kubermatic
      namespace: kubermatic
      path: config/kubermatic/
    - name: nodeport-proxy
      namespace: nodeport-proxy
      path: config/nodeport-proxy/
    group: deploy-cloud
    helm: upgrade --install --kube-context=us-central1-c-1 --tiller-namespace=kubermatic-installer
      --values config/versions-values.yaml
    image: kubeciio/helm
    pull: true
    secrets:
    - source: kubeconfig_cloud
      target: kubeconfig
    - source: values_cloud_us
      target: values
    values:
    - values
    when:
      branch: master
  11-slack:
    channel: dev
    group: slack
    icon_url: https://avatars2.githubusercontent.com/u/2181346?v=4&s=200
    image: kubermaticbot/drone-slack
    pull: true
    template: '${DRONE_COMMIT_AUTHOR} deployed a new API & Controller to dev & cloud.
      :heart:'
    username: drone
    webhook: https://hooks.slack.com/services/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
    when:
      branch: master
      status:
      - success
  11-slack-failure:
    author_recipient_mapping:
    - alvaroaleman=alvaro
    - guusvw=guus
    - j3ank=eugenia
    - kgroschoff=kristin
    - metalmatze=matthias
    - mrIncompetent=henrik
    - p0lyn0mial=lukasz
    - scheeles=sebastian
    - kdomanski=kamil
    - kron4eg=artiom.diomin
    - thz=thz
    - cbrgm=Chris
    - toschneck=Tobi
    group: slack
    icon_url: https://avatars2.githubusercontent.com/u/2181346?v=4&s=200
    image: kubermaticbot/drone-slack
    image_url: https://media.giphy.com/media/m6tmCnGCNvTby/giphy-downsized.gif
    pull: true
    recipient: ${DRONE_COMMIT_AUTHOR}
    template: |-
      Your build failed! Shame. Shame. Shame.
            ${DRONE_BUILD_LINK}
    username: drone
    webhook: https://hooks.slack.com/services/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
    when:
      status:
      - failure
workspace:
  base: /go
  path: src/github.com/kubermatic/kubermatic
