workspace:
  base: /go
  path: src/github.com/kubermatic/kubermatic

pipeline:
  dep-status:
    image: metalmatze/dep:1.9
    commands:
      - cd api
      - dep status

  dep:
    image: metalmatze/dep:1.9
    commands:
      - cd api
      - dep ensure -v -vendor-only

  gofmt:
    group: lint
    image: golang:1.9
    commands:
      - cd api
      - make gofmt

  license-validation:
    group: lint
    image: metalmatze/wwhrd:1.9
    commands:
      - cd api
      - wwhrd check -f ../allowed_licensed.yaml

  lint:
    group: lint
    image: metalmatze/gometalinter:1.9
    commands:
      - cd api
      - make lint

  verify-codegen:
    group: codegen
    image: golang:1.9
    commands:
      - cd api
      - ./hack/verify-codegen.sh

  test:
    group: build
    image: golang:1.9
    commands:
      - cd api
      - make test

  build:
    group: build
    image: golang:1.9
    commands:
      - cd api
      - CGO_ENABLED=0 make build

  kubermatic-docker-always:
    group: push
    image: plugins/docker
    repo: kubermatic/api
    password: ${DOCKER_PASSWORD}
    username: ${DOCKER_USERNAME}
    tags:
      - ${DRONE_COMMIT}
    dockerfile: api/Dockerfile
    context: api
    secrets: [ docker_username, docker_password ]

  kubermatic-installer-docker-always:
    group: push
    image: plugins/docker
    repo: kubermatic/installer
    password: ${DOCKER_PASSWORD}
    username: ${DOCKER_USERNAME}
    tags:
      - ${DRONE_COMMIT}
    dockerfile: config/Dockerfile
    context: config
    secrets: [ docker_username, docker_password ]

  addons-docker-always:
    group: push
    image: plugins/docker
    repo: kubermatic/addon-manager
    password: ${DOCKER_PASSWORD}
    username: ${DOCKER_USERNAME}
    tags:
      - ${DRONE_COMMIT}
    dockerfile: addon-manager/Dockerfile
    context: addon-manager
    secrets: [ docker_username, docker_password ]

  kubermatic-docker-master:
    group: push
    image: plugins/docker
    repo: kubermatic/api
    password: ${DOCKER_PASSWORD}
    username: ${DOCKER_USERNAME}
    tags:
      - master
    dockerfile: api/Dockerfile
    context: api
    secrets: [ docker_username, docker_password ]
    when:
      branch: master

  kubermatic-installer-docker-master:
    group: push
    image: plugins/docker
    repo: kubermatic/installer
    password: ${DOCKER_PASSWORD}
    username: ${DOCKER_USERNAME}
    tags:
      - master
    dockerfile: config/Dockerfile
    context: config
    secrets: [ docker_username, docker_password ]
    when:
      branch: master

  addons-docker-master:
    group: push
    image: plugins/docker
    repo: kubermatic/addon-manager
    password: ${DOCKER_PASSWORD}
    username: ${DOCKER_USERNAME}
    tags:
      - master
    dockerfile: addon-manager/Dockerfile
    context: addon-manager
    secrets: [ docker_username, docker_password ]
    when:
      branch: master

  kubermatic-docker-release:
    group: push
    image: plugins/docker
    repo: kubermatic/api
    password: ${DOCKER_PASSWORD}
    username: ${DOCKER_USERNAME}
    tags:
      - ${DRONE_TAG}
      - latest
    dockerfile: api/Dockerfile
    context: api
    secrets: [ docker_username, docker_password ]
    when:
      event: [tag]
      branch: release/*

  kubermatic-installer-docker-release:
    group: push
    image: plugins/docker
    repo: kubermatic/installer
    password: ${DOCKER_PASSWORD}
    username: ${DOCKER_USERNAME}
    tags:
      - ${DRONE_TAG}
      - latest
    dockerfile: config/Dockerfile
    context: config
    secrets: [ docker_username, docker_password ]
    when:
      event: [tag]
      branch: release/*

  addons-docker-release:
    group: push
    image: plugins/docker
    repo: kubermatic/addon-manager
    password: ${DOCKER_PASSWORD}
    username: ${DOCKER_USERNAME}
    tags:
      - ${DRONE_TAG}
      - latest
    dockerfile: addon-manager/Dockerfile
    context: addon-manager
    secrets: [ docker_username, docker_password ]
    when:
      event: [tag]
      branch: release/*

  deploy-dev:
    group: deploy
    image: gcr.io/google_containers/hyperkube-amd64:v1.6.10
    commands:
      - echo $KUBECONFIG | base64 -d > kubeconfig
      - /hyperkube kubectl --kubeconfig kubeconfig -n kubermatic set image deployment/kubermatic-api-v1 api=kubermatic/api:$DRONE_COMMIT
      - /hyperkube kubectl --kubeconfig kubeconfig -n kubermatic set image deployment/cluster-controller-v1 cluster-controller=kubermatic/api:$DRONE_COMMIT
    secrets: [ kubeconfig ]
    when:
      branch: master

  slack-failure:
    group: notify
    image: kubermaticbot/drone-slack
    webhook: https://hooks.slack.com/services/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
    username: drone
    icon_url: https://avatars2.githubusercontent.com/u/2181346?v=4&s=200
    recipient: ${DRONE_COMMIT_AUTHOR}
    image_url: https://media.giphy.com/media/m6tmCnGCNvTby/giphy-downsized.gif
    template: >
        Your build failed! Shame. Shame. Shame.
    author_recipient_mapping:
      - mrIncompetent=henrik
      - metalmatze=matthias
      - guusvw=guus
      - realfake=luk
      - scheeles=sebastian
      - chaosaffe=jason
    when:
      status: [ failure ]

  slack-deploy:
    group: notify
    image: kubermaticbot/drone-slack
    webhook: https://hooks.slack.com/services/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
    username: drone
    icon_url: https://avatars2.githubusercontent.com/u/2181346?v=4&s=200
    channel: dev
    image_url: http://thecatapi.com/api/images/get?api_key=MjQyOTIx&size=small&format=src&type=gif&random-param=${DRONE_COMMIT}
    template: >
        We just deployed the API&Controller to dev!
        This commit has been brought to you by ${DRONE_COMMIT_AUTHOR} <3
        What has been done:
        ${DRONE_COMMIT_MESSAGE}
    author_recipient_mapping:
      - mrIncompetent=henrik
      - metalmatze=matthias
      - guusvw=guus
      - realfake=luk
      - scheeles=sebastian
      - chaosaffe=jason
    when:
      status: [ success ]
      branch: master
