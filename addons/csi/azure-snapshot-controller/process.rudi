; returns true if the given object is an application
(func! isApp? [obj]
  (and (eq? $obj.apiVersion "apps/v1")
       (or (eq? $obj.kind "Deployment")
           (eq? $obj.kind "DaemonSet")
           (eq? $obj.kind "StatefulSet"))))

; adds seccompProfile=RuntimeDefault to a document if the document is an app
(func! addSecurityContext [doc]
  (set $doc.spec.template.spec.securityContext.seccompProfile.type "RuntimeDefault"))

; wraps a container image in a Go template
(func! wrapContainerImage [container]
  (set $container.image (append "{{ Image \"" $container.image "\" }}")))

; wraps a container image in a Go template and injects a template runtime variable
; turning "foo/bar:latest" into {{ Image "foo/bar:" $varName }}
(func! versionContainerImage [container varName]
  (set $container.image (append "{{ Image (print \"" (split ":" $container.image)[0] ":\" $" $varName ") }}")))

; either just wraps or versions a container image, depending on the container name
(func! mutateContainerImage [objName container]
  (if (eq? $container.name "azurefile")
    (versionContainerImage $container "version")
    (wrapContainerImage $container)))

; templatifies all containers in a spec
(func! templatifySpec [spec objName]
  (try (map! $spec.containers [c] (mutateContainerImage $objName $c)))
  (try (map! $spec.initContainers [c] (mutateContainerImage $objName $c)))
  $spec)

; templatifies the obj if it's an application
(func! templatify [obj]
  (templatifySpec! $obj.spec.template.spec $obj.metadata.name)
  $obj)

; some of the upstream YAML files contain empty documents, remove those
(filter! . [obj] (not (empty? $obj)))

(map! . [obj]
  (if (isApp? $obj)
    (do
      ; image source includes registry templating
      (templatify! $obj)

      ; patch in the security context
      (addSecurityContext! $obj)

      ; set spec.replicas=1 since leader elections are configured
      (set! $obj.spec.replicas 1)

      ; set a sane CPU limit
      (set! $obj.spec.template.spec.containers[0].resources.limits.cpu 1)

      ; remove scheduling hints
      (delete! $obj.spec.template.spec.tolerations)
      (delete! $obj.spec.template.spec.affinity))
    $obj))
