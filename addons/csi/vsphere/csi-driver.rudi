; remove empty objects
(filter! . [obj] (not (empty? $obj)))

; remove Windows components
(filter! . [obj] (not (eq? $obj.metadata.name "vsphere-csi-node-windows")))

(map! . [obj]
  (do
    ; move everything into kube-system
    (if (has? $obj.metadata.namespace)
      (set! $obj.metadata.namespace "kube-system"))

    (if (has? $obj.subjects)
      (map! $obj.subjects [subj]
        (if (has? $subj.namespace)
          (set! $subj.namespace "kube-system")
          $subj)))

    ; patch apps
    (if (isApp? $obj)
      (do
        ; image source includes registry templating
        (templatify! $obj (new-set "csi-cinder-controllerplugin/cinder-csi-plugin"
                                   "csi-cinder-nodeplugin/cinder-csi-plugin"))

        ; patch in the security context
        (addSecurityContext! $obj)

        ; KKP does not label nodes this way
        (delete! $obj.spec.template.spec.nodeSelector)

        ; set spec.replicas=1 since leader elections are configured
        (if (has? $obj.spec.replicas) (set! $obj.spec.replicas 1))

        ; KKP-managed cloud config secret uses a different key, so update the env
        (changeEnv! $obj "VSPHERE_CSI_CONFIG" {value "/etc/config/config"})

        ; use KKP-provided CA bundle
        (if (set-has? (new-set "vsphere-csi-controller" "vsphere-csi-node") $obj.metadata.name)
          (do
            (addVolume! $obj {name "ca-bundle" configMap {name "ca-bundle"}})
            (map! $obj.spec.template.spec.containers [c]
              (if (set-has? (new-set "vsphere-csi-controller" "vsphere-syncer" "vsphere-csi-node") $c.name)
                (do
                  (addContainerVolumeMount! $c {mountPath "/etc/kubermatic/certs" name "ca-bundle" readOnly true})
                  (addContainerEnv! $c {name "SSL_CERT_FILE" value "/etc/kubermatic/certs/ca-bundle.pem"})
                  $c)
                $c))
            $obj))

        $obj))

    ; make config dynamic
    (if (eq? $obj.metadata.name "internal-feature-states.csi.vsphere.vmware.com")
      (do
        (set! $obj.data["csi-migration"] "{{ .Cluster.CSIMigration }}")
        (set! $obj.data["improved-volume-topology"] "false")
        (set! $obj.data["improved-csi-idempotency"] "false")))

    $obj
))
