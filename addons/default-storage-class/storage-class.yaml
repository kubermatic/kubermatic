# Copyright 2020 The Kubermatic Kubernetes Platform contributors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

{{/* Template must only emit data in case its valid for a given provider. That way we can ensure we don't install it when not needed */}}
{{ if eq .Cluster.CloudProviderName "azure" }}
{{ if .Cluster.Features.Has "externalCloudProvider" }}
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  annotations:
    storageclass.beta.kubernetes.io/is-default-class: "true"
  labels:
    kubernetes.io/cluster-service: "true"
  name: azure-disk-csi
provisioner: disk.csi.azure.com
parameters:
  kind: managed
  storageaccounttype: Standard_LRS
reclaimPolicy: Delete
volumeBindingMode: WaitForFirstConsumer
allowVolumeExpansion: true
{{ else }}
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  annotations:
    storageclass.beta.kubernetes.io/is-default-class: "true"
  labels:
    kubernetes.io/cluster-service: "true"
  name: standard
provisioner: kubernetes.io/azure-disk
parameters:
  kind: Managed
  storageaccounttype: Standard_LRS
{{ end }}
{{ end }}

{{ if eq .Cluster.CloudProviderName "aws" }}
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  annotations:
    storageclass.beta.kubernetes.io/is-default-class: "true"
  labels:
    kubernetes.io/cluster-service: "true"
  name: standard-v2
provisioner: kubernetes.io/aws-ebs
parameters:
  type: gp2
volumeBindingMode: WaitForFirstConsumer
{{ end }}

{{ if eq .Cluster.CloudProviderName "vsphere" }}
{{ if .Cluster.Features.Has "externalCloudProvider" }}
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  annotations:
    storageclass.beta.kubernetes.io/is-default-class: "true"
  labels:
    kubernetes.io/cluster-service: "true"
  name: vsphere-csi
provisioner: csi.vsphere.vmware.com
{{ if .Cluster.CSI.StoragePolicy }}
parameters:
  storagepolicyname: {{ .Cluster.CSI.StoragePolicy }}
{{ end }}
{{ else }}
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  annotations:
    storageclass.beta.kubernetes.io/is-default-class: "true"
  labels:
    kubernetes.io/cluster-service: "true"
  name: standard
provisioner: kubernetes.io/vsphere-volume
parameters:
  diskformat: thin
{{ end }}
{{ end }}

{{ if eq .Cluster.CloudProviderName "openstack" }}
{{ if .Cluster.Features.Has "externalCloudProvider" }}
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  annotations:
    storageclass.beta.kubernetes.io/is-default-class: "true"
  labels:
    kubernetes.io/cluster-service: "true"
  name: cinder-csi
provisioner: cinder.csi.openstack.org
volumeBindingMode: WaitForFirstConsumer
allowVolumeExpansion: true
{{ else }}
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  annotations:
    storageclass.beta.kubernetes.io/is-default-class: "true"
  labels:
    kubernetes.io/cluster-service: "true"
  name: standard
provisioner: kubernetes.io/cinder
{{ end }}
{{ end }}

{{ if eq .Cluster.CloudProviderName "gcp" }}
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  annotations:
    storageclass.beta.kubernetes.io/is-default-class: "true"
  labels:
    kubernetes.io/cluster-service: "true"
  name: standard
provisioner: kubernetes.io/gce-pd
parameters:
  type: pd-ssd
{{ end }}

{{ if eq .Cluster.CloudProviderName "hetzner" }}
kind: StorageClass
apiVersion: storage.k8s.io/v1
metadata:
  namespace: kube-system
  name: hcloud-volumes
  annotations:
    storageclass.kubernetes.io/is-default-class: "true"
provisioner: csi.hetzner.cloud
volumeBindingMode: WaitForFirstConsumer
allowVolumeExpansion: true
{{ end }}

{{ if eq .Cluster.CloudProviderName "nutanix" }}
kind: StorageClass
apiVersion: storage.k8s.io/v1
metadata:
  name: ntnx-csi
  annotations:
    storageclass.kubernetes.io/is-default-class: "true"
provisioner: csi.nutanix.com
parameters:
  storageType: NutanixVolumes
  csi.storage.k8s.io/provisioner-secret-name: ntnx-secret
  csi.storage.k8s.io/provisioner-secret-namespace: kube-system
  csi.storage.k8s.io/node-publish-secret-name: ntnx-secret
  csi.storage.k8s.io/node-publish-secret-namespace: kube-system
  csi.storage.k8s.io/controller-expand-secret-name: ntnx-secret
  csi.storage.k8s.io/controller-expand-secret-namespace: kube-system
  storageContainer: {{ default "SelfServiceContainer" .Cluster.CSI.StorageContainer | quote }}
  csi.storage.k8s.io/fstype: {{ default "xfs" .Cluster.CSI.Fstype | quote }}
  isSegmentedIscsiNetwork: {{ default "false" .Cluster.CSI.SsSegmentedIscsiNetwork | quote }}
allowVolumeExpansion: true
reclaimPolicy: Delete
{{ end }}

{{ if eq .Cluster.CloudProviderName "vmwareclouddirector" }}
kind: StorageClass
apiVersion: storage.k8s.io/v1
metadata:
  annotations:
    storageclass.kubernetes.io/is-default-class: "true"
  name: vcd-disk-dev
provisioner: named-disk.csi.cloud-director.vmware.com
reclaimPolicy: Delete
parameters:
  storageProfile: {{ .Cluster.CSI.StorageProfile | quote }}
  filesystem: {{ default "ext4" .Cluster.CSI.Filesystem | quote }}
{{ end }}

{{ if eq .Cluster.CloudProviderName "digitalocean" }}
kind: StorageClass
apiVersion: storage.k8s.io/v1
metadata:
  name: do-block-storage
  annotations:
    storageclass.kubernetes.io/is-default-class: "true"
provisioner: dobs.csi.digitalocean.com
allowVolumeExpansion: true
{{ end }}
