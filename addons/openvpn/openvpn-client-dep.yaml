apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    addonmanager.kubernetes.io/mode: "Reconcile"
  name: openvpn-client
  namespace: kube-system
spec:
  replicas: 1
  selector:
    matchLabels:
      role: openvpn-client
  template:
    metadata:
      labels:
        role: openvpn-client
    spec:
      serviceAccountName: vpn-client
      containers:
      - name: openvpn-client
        image: '{{ Registry "quay.io" }}/kubermatic/openvpn:v2.4.8-r1'
        command: ["/usr/sbin/openvpn"]
        args: ["--config", "/etc/openvpn/config/config"]
        resources:
          requests:
            cpu: 5m
            memory: 5Mi
          limits:
            cpu: 100m
            memory: 32Mi
        livenessProbe:
          exec:
            command:
              - "/bin/ping"
              - "-c"
              - "1"
              - "-w"
              - "5"
              - "10.20.0.1"
          initialDelaySeconds: 60
        readinessProbe:
          exec:
            command:
            - "/bin/ping"
            - "-c"
            - "1"
            - "-w"
            - "5"
            - "10.20.0.1"
        securityContext:
          privileged: true
        volumeMounts:
        - mountPath: /etc/openvpn/config
          name: openvpn-client-config
          readOnly: true
        - mountPath: /etc/openvpn/certs
          name: openvpn-client-certificates
          readOnly: true
      - name: dnat-controller
        image: '{{ Registry "quay.io" }}/kubermatic/openvpn:v2.4.8-r1'
        command:
        - bash
        - -ec
        - |
          # make sure we have two chains:
          iptables -t nat -N host_dnat || true
          iptables -t nat -N host_dnat_inactive || true
          iptables -t nat -D PREROUTING -j host_dnat || true
          iptables -t nat -D PREROUTING -j host_dnat_inactive || true

          virtualnodenet='{{.Variables.NodeAccessNetwork}}'

          # access node list via kubectl and generate iptables rules
          # for DNAT from it.
          while sleep 5; do
            echo 1 > /proc/sys/net/ipv4/ip_forward
            iptables -t nat -F host_dnat_inactive
            # query nodes and create DNAT rules in inactive chain
            kubectl get nodes -o json \
                | jq -r '.items[]|  (.metadata|.name+" "+.uid) + " " + (.status.addresses[]|select(.type=="InternalIP")|.address)' \
                | while read name uid ip; do
                    left=$( echo $virtualnodenet | cut -d. -f1-2 )
                    right=$( echo $ip | cut -d. -f3-4 )
                    iptables -t nat -A host_dnat_inactive -d $left.$right -j DNAT --to $ip
                done
                # swap the chains (inactive / active):
                iptables -t nat -I PREROUTING -j host_dnat_inactive
                iptables -t nat -D PREROUTING -j host_dnat || true
                iptables -t nat -E host_dnat host_dnat_old
                iptables -t nat -E host_dnat_inactive host_dnat
                iptables -t nat -E host_dnat_old host_dnat_inactive
          done
          echo "Terminating."

        securityContext:
          # Needed to be able to enable ip_forward, there is no capability that mounts
          # /proc with RW
          privileged: true
        resources:
          requests:
            cpu: 25m
            memory: 25Mi
          limits:
            cpu: 100m
            memory: 50Mi
      restartPolicy: Always
      terminationGracePeriodSeconds: 5
      volumes:
      - name: openvpn-client-certificates
        secret:
          secretName: openvpn-client-certificates
          defaultMode: 0400
      - name: openvpn-client-config
        configMap:
          name: openvpn-client-config
