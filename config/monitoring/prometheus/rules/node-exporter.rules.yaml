groups:
- name: node-exporter.rules
  rules:
  - record: instance:node_num_cpu:sum
    expr: |
      count by (instance) (
        sum by (instance, cpu) (
          node_cpu{app="node-exporter"}
        )
      )

  - record: instance:node_cpu_utilisation:avg1m
    expr: |
      1 - avg by (instance) (
        rate(node_cpu{app="node-exporter",mode="idle"}[1m])
      )

  - record: 'instance:node_cpu_saturation_load1:'
    expr: |
      sum by (instance) (node_load1{app="node-exporter"})
      /
      instance:node_num_cpu:sum

  - record: instance:node_memory_bytes_total:sum
    expr: |
      sum by (instance) (
        node_memory_MemTotal{app="node-exporter"}
      )

  - record: instance:node_memory_utilisation:ratio
    expr: |
      1 - (
          node_memory_MemAvailable{app="node-exporter"}
        /
          node_memory_MemTotal{app="node-exporter"}
      )

  - record: instance:node_memory_swap_io_bytes:sum_rate
    expr: |
      1e3 * sum by (instance) (
        (rate(node_vmstat_pgpgin{app="node-exporter"}[1m])
          + rate(node_vmstat_pgpgout{app="node-exporter"}[1m]))
      )

  - record: instance:node_disk_utilisation:sum_irate
    expr: |
      sum by (instance) (
        irate(node_disk_io_time_ms{app="node-exporter",device=~"(sd|xvd).+"}[1m]) / 1e3
      )

  - record: instance:node_disk_saturation:sum_irate
    expr: |
      sum by (instance) (
        irate(node_disk_io_time_weighted{app="node-exporter",device=~"(sd|xvd).+"}[1m]) / 1e3
      )

  - record: instance:node_net_utilisation:sum_irate
    expr: |
      sum by (instance) (
        (irate(node_network_receive_bytes{app="node-exporter",device=~"eth[0-9]+"}[1m]) +
          irate(node_network_transmit_bytes{app="node-exporter",device=~"eth[0-9]+"}[1m]))
      )

  - record: instance:node_net_saturation:sum_irate
    expr: |
      sum by (instance) (
        (irate(node_network_receive_drop{app="node-exporter",device=~"eth[0-9]+"}[1m]) +
          irate(node_network_transmit_drop{app="node-exporter",device=~"eth[0-9]+"}[1m]))
      )
