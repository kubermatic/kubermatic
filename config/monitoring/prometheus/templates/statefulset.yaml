apiVersion: apps/v1beta2
kind: StatefulSet
metadata:
  name: '{{ template "name" . }}'
spec:
  replicas: 2
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: '{{ template "name" . }}'
  serviceName: '{{ template "name" . }}'
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: '{{ template "name" . }}'
      annotations:
        kubermatic/scrape: 'true'
        kubermatic/scrape_port: '9090'
        {{- if .Values.prometheus.backup.enabled }}
        backup.velero.io/backup-volumes: prometheus-backup
        pre.hook.backup.velero.io/container: backup
        pre.hook.backup.velero.io/timeout: '{{ .Values.prometheus.backup.timeout | default "60m" }}'
        pre.hook.backup.velero.io/command: '["/bin/sh", "-c", "rm -rf /prometheus/snapshots/* && curl -s -XPOST \"http://127.0.0.1:9090/api/v1/admin/tsdb/snapshot?skip_head=true\" && rsync --archive /prometheus/snapshots/*/ /backup"]'
        {{- end }}
    spec:
      containers:
      - name: prometheus
        image: 'quay.io/prometheus/prometheus:{{ .Values.prometheus.version }}'
        args:
        - --config.file=/etc/prometheus/config/prometheus.yaml
        - --storage.tsdb.no-lockfile
        - --storage.tsdb.path=/var/prometheus/data
        - --storage.tsdb.retention.time=360h
        - --web.enable-lifecycle
        - --web.external-url=https://{{ .Values.prometheus.host | trim }}
        - --web.route-prefix=/
        {{- if .Values.prometheus.backup.enabled }}
        - --web.enable-admin-api
        {{- end }}
        ports:
        - containerPort: 9090
          name: web
        livenessProbe:
          failureThreshold: 6
          httpGet:
            path: /-/healthy
            port: web
          initialDelaySeconds: 15
          periodSeconds: 5
          successThreshold: 1
          timeoutSeconds: 5
        readinessProbe:
          failureThreshold: 120
          httpGet:
            path: /-/healthy
            port: web
          initialDelaySeconds: 15
          periodSeconds: 5
          successThreshold: 1
          timeoutSeconds: 5
        resources:
{{ toYaml .Values.prometheus.containers.prometheus.resources | indent 10 }}
        volumeMounts:
        - name: config
          mountPath: /etc/prometheus/config/
          readOnly: false
        - name: rules
          mountPath: /etc/prometheus/rules/
          readOnly: false
        - name: db
          mountPath: /var/prometheus/data
          readOnly: false
          subPath: prometheus-db
        {{- if .Values.prometheus.volumes }}
        {{- range .Values.prometheus.volumes }}
        - name: {{ .name }}
          mountPath: {{ .mountPath }}
          readOnly: true
        {{- end }}
        {{- end }}

      - name: reloader
        image: jimmidyson/configmap-reload
        args:
        - --volume-dir=/etc/prometheus/config
        - --volume-dir=/etc/prometheus/rules
        - --webhook-url=http://localhost:9090/-/reload
        resources:
{{ toYaml .Values.prometheus.containers.reloader.resources | indent 10 }}
        volumeMounts:
        - name: config
          mountPath: /etc/prometheus/config/
          readOnly: false
        - name: rules
          mountPath: /etc/prometheus/rules/
          readOnly: false
        {{- if .Values.prometheus.volumes }}
        {{- range .Values.prometheus.volumes }}
        - name: {{ .name }}
          mountPath: {{ .mountPath }}
          readOnly: true
        {{- end }}
        {{- end }}

      {{- if .Values.prometheus.backup.enabled }}
      - name: backup
        image: '{{ .Values.prometheus.backup.image.repository }}:{{ .Values.prometheus.backup.image.tag }}'
        args:
        - /bin/sh
        - -c
        - while true; do sleep 1h; done
        volumeMounts:
        - name: db
          mountPath: /prometheus
          readOnly: false
          subPath: prometheus-db
        - name: backup
          mountPath: /backup
          readOnly: false
        securityContext:
          runAsNonRoot: false
          runAsUser: 0
        resources:
{{ toYaml .Values.prometheus.containers.backup.resources | indent 10 }}
      {{- end }}

      serviceAccountName: '{{ template "name" . }}'
      securityContext:
        fsGroup: 2000
        runAsNonRoot: true
        runAsUser: 1000
      volumes:
      - name: config
        configMap:
          name: '{{ template "name" . }}-config'
      - name: rules
        configMap:
          name: '{{ template "name" . }}-rules'
      {{- if .Values.prometheus.volumes }}
      {{- range .Values.prometheus.volumes }}
      - name: {{ .name }}
        {{- if .configMap }}
        configMap:
          name: {{ .configMap }}
        {{- else }}
        secret:
          secretName: {{ .secretName }}
        {{- end }}
      {{- end }}
      {{- end }}
      {{- if .Values.prometheus.backup.enabled }}
      - name: backup
        emptyDir: {}
      {{- end }}
      nodeSelector:
{{ toYaml .Values.prometheus.nodeSelector | indent 8 }}
      affinity:
{{ toYaml .Values.prometheus.affinity | indent 8 }}
      tolerations:
{{ toYaml .Values.prometheus.tolerations | indent 8 }}
  volumeClaimTemplates:
  - metadata:
      name: db
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: {{ .Values.prometheus.storageSize }}
      storageClassName: kubermatic-fast
---
apiVersion: policy/v1beta1
kind: PodDisruptionBudget
metadata:
  name: prometheus-kubermatic
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app: prometheus-kubermatic
