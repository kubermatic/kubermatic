{{- if not .Values.prometheus.migration.enabled }}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: '{{ template "name" . }}'
spec:
  replicas: 2
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: {{ template "name" . }}
  serviceName: '{{ template "name" . }}'
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: {{ template "name" . }} # deprecated
        app.kubernetes.io/name: prometheus
        app.kubernetes.io/instance: {{ template "name" . }}
        {{- if .Values.prometheus.thanos.enabled }}
        thanos.io/store-api: 'true'
        {{- end }}
      annotations:
        kubermatic/scrape: 'true'
        kubermatic/scrape_port: '9090'
        {{- if .Values.prometheus.backup.enabled }}
        backup.velero.io/backup-volumes: backup
        pre.hook.backup.velero.io/container: backup
        pre.hook.backup.velero.io/timeout: '{{ .Values.prometheus.backup.timeout | default "60m" }}'
        pre.hook.backup.velero.io/command: '["/bin/sh", "-c", "rm -rf /prometheus/snapshots/* && curl -s -XPOST \"http://127.0.0.1:9090/api/v1/admin/tsdb/snapshot?skip_head=true\" && rsync --archive /prometheus/snapshots/*/ /backup"]'
        {{- end }}
    spec:
      containers:
      - name: prometheus
        image: '{{ .Values.prometheus.image.repository }}:{{ .Values.prometheus.version | default .Values.prometheus.image.tag }}'
        command: [/bin/sh]
        args:
        - -c
        - |
          set -euo pipefail

          echo "Cleaning up block compaction leftovers..."
          find /var/prometheus/data -type d -name '*.tmp' -maxdepth 1 -print -exec rm -r {} \;

          {{- if .Values.prometheus.thanos.enabled }}
          config=/etc/prometheus-shared/prometheus.yaml

          echo "Waiting up to 60 seconds for $config..."
          for i in $(seq 60); do
            [ -f $config ] && break
            sleep 1
          done

          if [ ! -f $config ]; then
            echo "File does not exist, giving up. Check the Thanos sidecar for possible errors."
            exit 1
          fi

          echo "Configuration found, starting Prometheus..."
          exec /bin/prometheus \
            --config.file=$config \
            --storage.tsdb.no-lockfile \
            --storage.tsdb.path=/var/prometheus/data \
            --storage.tsdb.retention.time={{ .Values.prometheus.tsdb.retentionTime | default "24h" }} \
            --storage.tsdb.min-block-duration=2h \
            --storage.tsdb.max-block-duration=2h \
            {{- if .Values.prometheus.tsdb.compressWAL }}
            --storage.tsdb.wal-compression \
            {{- end }}
            --web.enable-lifecycle \
            --web.external-url=https://{{ .Values.prometheus.host | trim }} \
            --web.enable-admin-api
          {{- else }}
          echo "Starting Prometheus..."
          exec /bin/prometheus \
            --config.file=/etc/prometheus/config/prometheus.yaml \
            --storage.tsdb.no-lockfile \
            --storage.tsdb.path=/var/prometheus/data \
            --storage.tsdb.retention.time={{ .Values.prometheus.tsdb.retentionTime | default "24h" }} \
            {{- if .Values.prometheus.tsdb.compressWAL }}
            --storage.tsdb.wal-compression \
            {{- end }}
            --web.enable-lifecycle \
            {{- if .Values.prometheus.backup.enabled }}
            --web.enable-admin-api \
            {{- end }}
            --web.external-url=https://{{ .Values.prometheus.host | trim }}
          {{- end }}
        ports:
        - containerPort: 9090
          name: web
        livenessProbe:
          failureThreshold: 6
          httpGet:
            path: /-/healthy
            port: web
          initialDelaySeconds: 15
          periodSeconds: 5
          successThreshold: 1
          timeoutSeconds: 5
        readinessProbe:
          failureThreshold: 120
          httpGet:
            path: /-/ready
            port: web
          initialDelaySeconds: 15
          periodSeconds: 5
          successThreshold: 1
          timeoutSeconds: 5
        resources:
{{ toYaml .Values.prometheus.containers.prometheus.resources | indent 10 }}
        volumeMounts:
        {{- if .Values.prometheus.thanos.enabled }}
        - name: config-shared
          mountPath: /etc/prometheus-shared/
          readOnly: false
        {{- else }}
        - name: config
          mountPath: /etc/prometheus/config/
          readOnly: false
        {{- end }}
        - name: rules
          mountPath: /etc/prometheus/rules/
          readOnly: false
        - name: db
          mountPath: /var/prometheus/data
          readOnly: false
          subPath: prometheus-db
        {{- if .Values.prometheus.volumes }}
        {{- range .Values.prometheus.volumes }}
        - name: {{ .name }}
          mountPath: {{ .mountPath }}
          readOnly: true
        {{- end }}
        {{- end }}

      {{- if not .Values.prometheus.thanos.enabled }}
      - name: reloader
        image: '{{ .Values.prometheus.configReloaderImage.repository }}:{{ .Values.prometheus.configReloaderImage.tag }}'
        imagePullPolicy: {{ .Values.prometheus.configReloaderImage.pullPolicy }}
        args:
        - --volume-dir=/etc/prometheus/config
        - --volume-dir=/etc/prometheus/rules
        - --webhook-url=http://localhost:9090/-/reload
        resources:
{{ toYaml .Values.prometheus.containers.reloader.resources | indent 10 }}
        volumeMounts:
        - name: config
          mountPath: /etc/prometheus/config/
          readOnly: false
        - name: rules
          mountPath: /etc/prometheus/rules/
          readOnly: false
        {{- if .Values.prometheus.volumes }}
        {{- range .Values.prometheus.volumes }}
        - name: {{ .name }}
          mountPath: {{ .mountPath }}
          readOnly: true
        {{- end }}
        {{- end }}
      {{- end }}

      {{- if .Values.prometheus.backup.enabled }}
      - name: backup
        image: '{{ .Values.prometheus.backup.image.repository }}:{{ .Values.prometheus.backup.image.tag }}'
        args:
        - /bin/sh
        - -c
        - while true; do sleep 1h; done
        volumeMounts:
        - name: db
          mountPath: /prometheus
          readOnly: false
          subPath: prometheus-db
        - name: backup
          mountPath: /backup
          readOnly: false
        securityContext:
          runAsNonRoot: false
          runAsUser: 0
        resources:
{{ toYaml .Values.prometheus.containers.backup.resources | indent 10 }}
      {{- end }}

      {{- if .Values.prometheus.thanos.enabled }}
      - name: thanos
        image: '{{ .Values.prometheus.thanos.image.repository }}:{{ .Values.prometheus.thanos.image.tag }}'
        args:
        - sidecar
        - --tsdb.path=/prometheus
        - --prometheus.url=http://localhost:9090
        - --objstore.config-file=/etc/thanos/objstore.yaml
        - --reloader.config-file=/etc/prometheus/config/prometheus.yaml
        - --reloader.config-envsubst-file=/etc/prometheus-shared/prometheus.yaml
        # New flag for migrating old blocks.
        #- --shipper.upload-compacted-once
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        ports:
        - name: http-sidecar
          containerPort: 10902
        - name: grpc
          containerPort: 10901
        volumeMounts:
        - name: db
          mountPath: /prometheus
          readOnly: false
          subPath: prometheus-db
        - name: config-shared
          mountPath: /etc/prometheus-shared
        - name: config
          mountPath: /etc/prometheus/config
        - name: thanos
          mountPath: /etc/thanos
        securityContext:
          runAsNonRoot: false
          runAsUser: 0
        livenessProbe:
          httpGet:
            path: /-/healthy
            port: http-sidecar
        readinessProbe:
          httpGet:
            path: /-/ready
            port: http-sidecar
        resources:
{{ toYaml .Values.prometheus.containers.thanosSidecar.resources | indent 10 }}
      {{- end }}

      serviceAccountName: '{{ template "name" . }}'
      securityContext:
        fsGroup: 2000
        runAsNonRoot: true
        runAsUser: 1000
      volumes:
      - name: config
        configMap:
          name: '{{ template "name" . }}-config'
      - name: rules
        configMap:
          name: '{{ template "name" . }}-rules'
      {{- if .Values.prometheus.volumes }}
      {{- range .Values.prometheus.volumes }}
      - name: {{ .name }}
        {{- if .configMap }}
        configMap:
          name: {{ .configMap }}
        {{- else }}
        secret:
          secretName: {{ .secretName }}
        {{- end }}
      {{- end }}
      {{- end }}
      {{- if .Values.prometheus.backup.enabled }}
      - name: backup
        emptyDir: {}
      {{- end }}
      {{- if .Values.prometheus.thanos.enabled }}
      - name: config-shared
        emptyDir: {}
      - name: thanos
        secret:
          secretName: '{{ template "name" . }}-thanos'
      {{- end }}
      nodeSelector:
{{ toYaml .Values.prometheus.nodeSelector | indent 8 }}
      affinity:
{{ (tpl (toYaml .Values.prometheus.affinity) .) | fromYaml | toYaml | indent 8 }}
      tolerations:
{{ toYaml .Values.prometheus.tolerations | indent 8 }}
  volumeClaimTemplates:
  - metadata:
      name: db
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: {{ .Values.prometheus.storageSize }}
      {{- with .Values.prometheus.storageClass }}
      storageClassName: {{ . }}
      {{- end }}
{{ end }}

---
apiVersion: policy/v1beta1
kind: PodDisruptionBudget
metadata:
  name: '{{ template "name" . }}'
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app: '{{ template "name" . }}'
