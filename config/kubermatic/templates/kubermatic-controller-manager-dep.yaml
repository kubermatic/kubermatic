apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: controller-manager-v1
spec:
  replicas: {{ .Values.kubermatic.controller.replicas }}
  template:
    metadata:
      labels:
        role: controller-manager
        version: v1
      annotations:
        kubermatic/scrape: 'true'
        kubermatic/scrape_port: '8085'
        checksum/master-files: {{ include (print $.Template.BasePath "/master-files-secret.yaml") . | sha256sum }}
        checksum/datecenters: {{ include (print $.Template.BasePath "/datacenter-yaml-secret.yaml") . | sha256sum }}
        checksum/backup-container-configmap: {{ include (print $.Template.BasePath "/backup-container-configmap.yaml") . | sha256sum }}
    spec:
      serviceAccountName: kubermatic
      initContainers:
      - name: controller-manager-cleanup
        image: '{{.Values.kubermatic.controller.image.repository}}:{{.Values.kubermatic.controller.image.tag}}'
        imagePullPolicy: {{.Values.kubermatic.controller.image.pullPolicy}}
        command:
        - kubermatic-controller-manager-cleanup
        args:
        - -v=4
        - -logtostderr
      - name: copy-addons
        image: '{{ .Values.kubermatic.controller.addons.image.repository }}:{{ .Values.kubermatic.controller.addons.image.tag }}'
        imagePullPolicy: {{ .Values.kubermatic.controller.addons.image.pullPolicy }}
        command: ["/bin/sh"]
        args:
        - "-c"
        - "cp -r /addons/* /opt/addons/"
        volumeMounts:
        - name: addons
          mountPath: /opt/addons
      containers:
        - name: controller-manager
          command:
          - kubermatic-controller-manager
          args:
          - -v=4
          - -logtostderr
          - -external-url={{ .Values.kubermatic.domain }}
          - -datacenter-name={{ .Values.kubermatic.controller.datacenterName }}
          - -etcd-disk-size={{ .Values.kubermatic.etcd.diskSize }}
          - -master-resources=/opt/master-files
          - -datacenters=/opt/datacenter/datacenters.yaml
          - -versions=/opt/master-files/versions.yaml
          - -updates=/opt/master-files/updates.yaml
          - -internal-address=0.0.0.0:8085
          - -addons-list={{ join "," .Values.kubermatic.controller.addons.defaultAddons }}
          - -addons-path=/opt/addons
          - -backup-container=/opt/backup/store-container.yaml
          - -cleanup-container=/opt/backup/cleanup-container.yaml
          {{- if .Values.kubermatic.clusterNamespacePrometheus.disableDefaultRules }}
          - -in-cluster-prometheus-disable-default-rules=true
          {{- end }}
          {{- if .Values.kubermatic.clusterNamespacePrometheus.rules }}
          - -in-cluster-prometheus-rules-file=/opt/incluster-prometheus/_customrules.yaml
          {{- end }}
          image: '{{.Values.kubermatic.controller.image.repository}}:{{.Values.kubermatic.controller.image.tag}}'
          imagePullPolicy: {{.Values.kubermatic.controller.image.pullPolicy}}
          ports:
            - name: metrics
              containerPort: 8085
              protocol: TCP
          volumeMounts:
            - name: master-files
              mountPath: "/opt/master-files/"
              readOnly: true
            - name: datacenters
              mountPath: "/opt/datacenter/"
              readOnly: true
            - name: addons
              mountPath: "/opt/addons/"
              readOnly: true
            - name: backup-container
              mountPath: "/opt/backup/"
              readOnly: true
            {{- if .Values.kubermatic.clusterNamespacePrometheus.rules }}
            - name: in-cluster-prometheus-rules-file
              mountPath: "/opt/incluster-prometheus/"
              readOnly: true
            {{- end }}
          resources:
            requests:
              memory: "64Mi"
              cpu: "100m"
            limits:
              memory: "256Mi"
              cpu: "200m"
      imagePullSecrets:
        - name: dockercfg
        - name: quay
      tolerations:
      - key: "only_critical"
        operator: "Equal"
        value: "true"
        effect: "NoSchedule"
      affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            preference:
              matchExpressions:
              - key: "kubermatic.io/type"
                operator: In
                values:
                - "stable"
      volumes:
        - name: master-files
          secret:
            secretName: master-files
        - name: datacenters
          secret:
            secretName: datacenters
        - name: addons
          emptyDir: {}
        - name: backup-container
          configMap:
            name: backup-container
        {{- if .Values.kubermatic.clusterNamespacePrometheus.rules }}
        - name: in-cluster-prometheus-rules-file
          configMap:
            name: clusterns-prometheus-rules
        {{- end }}
