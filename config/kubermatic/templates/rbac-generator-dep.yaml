{{ if .Values.kubermatic.isMaster }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: rbac-generator-v1
  labels:
    app: rbac-generator
spec:
  replicas: {{.Values.kubermatic.rbac.replicas}}
  selector:
    matchLabels:
      app: rbac-generator
  template:
    metadata:
      labels:
        app: rbac-generator
    spec:
      initContainers:
      - name: projects-migrator
        image: '{{.Values.kubermatic.rbac.image.repository}}:{{.Values.kubermatic.rbac.image.tag}}'
        imagePullPolicy: {{.Values.kubermatic.rbac.image.pullPolicy}}
        command:
        - projects-migrator
        args:
        - -v=3
        - -logtostderr
        - -kubeconfig=/opt/.kube/kubeconfig
        {{- with .Values.kubermatic.projects_migrator }}
        - -dry-run={{ .dry_run }}
        {{- end }}
        volumeMounts:
          - name: kubeconfig
            mountPath: "/opt/.kube/"
            readOnly: true
      containers:
      - name: rbac-generator
        command:
        - rbac-generator
        args:
        - -v=4
        - -logtostderr
        - -kubeconfig=/opt/.kube/kubeconfig
        {{- if .Values.kubermatic.worker_name }}
        - -worker-name={{ .Values.kubermatic.worker_name }}
        {{- end }}
        image: '{{.Values.kubermatic.rbac.image.repository}}:{{.Values.kubermatic.rbac.image.tag}}'
        imagePullPolicy: {{.Values.kubermatic.rbac.image.pullPolicy}}
        volumeMounts:
          - name: kubeconfig
            mountPath: "/opt/.kube/"
            readOnly: true
        resources:
          requests:
            memory: "64Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
      imagePullSecrets:
        - name: dockercfg
      volumes:
        - name: kubeconfig
          secret:
            secretName: kubeconfig
{{ end }}
