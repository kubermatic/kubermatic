apiVersion: v1
kind: ServiceAccount
metadata:
  name: s3-exporter
  namespace: kube-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: kubermatic:s3exporter:clusters:reader
rules:
- apiGroups:
  - kubermatic.k8s.io
  resources:
  - clusters
  verbs:
  - get
  - watch
  - list
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: kubermatic:s3exporter:clusters:reader
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: kubermatic:s3exporter:clusters:reader
subjects:
- kind: ServiceAccount
  name: s3-exporter
  namespace: kube-system
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: s3-exporter
  namespace: kube-system
spec:
  replicas: 2
  selector:
    matchLabels:
      app: s3-exporter
  template:
    metadata:
      labels:
        app: s3-exporter
    spec:
      serviceAccount: s3-exporter
      containers:
        - name: s3-exporter
          image: '{{.Values.kubermatic.s3_exporter.image.repository}}:{{.Values.kubermatic.s3_exporter.image.tag}}'
          env:
          - name: ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: s3-credentials
                key: ACCESS_KEY_ID
          - name: SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: s3-credentials
                key: SECRET_ACCESS_KEY
          command:
            - /usr/local/bin/s3-exporter
          args:
            - -v=4
            - -logtostderr
            - -endpoint=http://minio.minio.svc.cluster.local:9000
            - -access-key-id=$(ACCESS_KEY_ID)
            - -secret-access-key=$(SECRET_ACCESS_KEY)
            - -bucket={{.Values.kubermatic.s3_exporter.bucket}}
