apiVersion: apps/v1
kind: Deployment
metadata:
  name: apiserver
  ownerReferences:
  - apiVersion: kubermatic.k8s.io/v1
    blockOwnerDeletion: true
    controller: true
    kind: Cluster
    name: {{ .Cluster.Name }}
    uid: "{{ .Cluster.ObjectMeta.UID }}"
spec:
  replicas: 1
  selector:
    matchLabels:
      role: apiserver
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  minReadySeconds: 10
  template:
    metadata:
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/path: "/metrics"
        prometheus.io/port: "8080"
      labels:
        release: {{index .Version.Values "k8s-version"}}
        role: apiserver
        tokens-secret-revision: "{{ .SecretRevision "tokens" }}"
        apiserver-tls-secret-revision: "{{ .SecretRevision "apiserver-tls" }}"
        kubelet-client-certificates-secret-revision: "{{ .SecretRevision "kubelet-client-certificates" }}"
        ca-cert-secret-revision: "{{ .SecretRevision "ca-cert" }}"
        service-account-key-secret-revision: "{{ .SecretRevision "service-account-key" }}"
        cloud-config-configmap-revision: "{{ .ConfigMapRevision "cloud-config" }}"
    spec:
      initContainers:
      - name: etcd-running
        image:  {{ default .OverwriteRegistry "quay.io/coreos" }}/etcd:v3.2.7
        command:
        - /bin/sh
        - -ec
        - until ETCDCTL_API=3 /usr/local/bin/etcdctl --dial-timeout=2s --endpoints=[http://etcd-cluster-client:2379] get foo; do echo waiting for etcd; sleep 2; done;
      containers:
      - name: openvpn-client
        image: {{ if .OverwriteRegistry }}{{ .OverwriteRegistry }}/{{ end }}kubermatic/openvpn:v0.2
        command: ["/usr/sbin/openvpn"]
        args: [
          "--client",
          "--proto", "tcp",
          "--dev", "tun",
          "--auth-nocache",
          "--remote", "openvpn-server", "1194",
          "--nobind",
          "--connect-timeout", "5",
          "--connect-retry", "1",
          "--ca", "/etc/kubernetes/ca-cert/ca.crt",
          "--cert", "/etc/openvpn/certs/client.crt",
          "--key", "/etc/openvpn/certs/client.key",
          "--remote-cert-tls", "server",
          "--link-mtu", "1432",
          "--cipher", "AES-256-GCM",
          "--auth", "SHA1",
          "--keysize", "256",
          "--script-security", "2",
          "--up", "/bin/touch /tmp/running",
          "--log", "/dev/stdout",
        ]
        resources:
          requests:
            memory: "30Mi"
            cpu: "10m"
          limits:
            memory: "64Mi"
            cpu: "40m"
        readinessProbe:
          exec:
            command:
            - cat
            - /tmp/running
          initialDelaySeconds: 5
          periodSeconds: 5
        securityContext:
          privileged: true
        volumeMounts:
        - mountPath: /etc/openvpn/certs
          name: openvpn-client-certificates
          readOnly: true
        - name: ca-cert
          mountPath: /etc/kubernetes/ca-cert
          readOnly: true
      - name: apiserver
        image: {{ default .OverwriteRegistry "gcr.io/google_containers" }}/hyperkube-amd64:{{index .Version.Values "k8s-version"}}
        command: [ "/hyperkube", "apiserver",
            "--advertise-address={{ .Cluster.Address.IP }}",
            "--secure-port={{ .GetApiserverExternalNodePort }}",
            "--kubernetes-service-node-port={{ .GetApiserverExternalNodePort }}",
            "--insecure-bind-address=0.0.0.0",
            "--insecure-port=8080",
            "--etcd-servers=http://etcd-cluster-client:2379",
            "--storage-backend=etcd3",
            "--admission-control=NamespaceLifecycle,LimitRanger,ServiceAccount,DefaultStorageClass,ResourceQuota,NodeRestriction",
            "--authorization-mode=Node,RBAC",
            "--external-hostname={{ .Cluster.Address.ExternalName }}",
            "--token-auth-file=/etc/kubernetes/tokens/tokens.csv",
            "--enable-bootstrap-token-auth=true",
            {{ if contains "v1.8" (index .Version.Values "k8s-version") }}
            "--feature-gates=DynamicKubeletConfig=true",
            {{ end }}
            {{ if contains "v1.9" (index .Version.Values "k8s-version") }}
            "--feature-gates=DynamicKubeletConfig=true",
            {{ end }}
            {{ if contains "v1.10" (index .Version.Values "k8s-version") }}
            "--feature-gates=DynamicKubeletConfig=true",
            {{ end }}
            "--service-account-key-file=/etc/kubernetes/service-account-key/sa.key",
            "--service-cluster-ip-range=10.10.10.0/24",
            "--service-node-port-range=30000-32767",
            "--allow-privileged",
            "--audit-log-maxage=30",
            "--audit-log-maxbackup=3",
            "--audit-log-maxsize=100",
            "--audit-log-path=/var/log/audit.log",
            "--tls-cert-file=/etc/kubernetes/tls/apiserver-tls.crt",
            "--tls-private-key-file=/etc/kubernetes/tls/apiserver-tls.key",
            "--client-ca-file=/etc/kubernetes/ca-cert/ca.crt",
            "--kubelet-client-certificate=/etc/kubernetes/kubelet/kubelet-client.crt",
            "--kubelet-client-key=/etc/kubernetes/kubelet/kubelet-client.key",
            {{ if eq .ProviderName "openstack" }}
            "--cloud-config=/etc/kubernetes/cloud/config",
            "--cloud-provider=openstack",
            {{ end }}
            {{ if eq .ProviderName "aws" }}
            "--cloud-config=/etc/kubernetes/cloud/config",
            "--cloud-provider=aws",
            {{ end }}
            "--kubelet-preferred-address-types=ExternalIP,InternalIP",
            "--v=4" ]
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        readinessProbe:
          httpGet:
            path: /healthz
            port: 8080
          periodSeconds: 5
          timeoutSeconds: 15
        livenessProbe:
          failureThreshold: 8
          httpGet:
            path: /healthz
            port: 8080
          initialDelaySeconds: 15
          timeoutSeconds: 15
        ports:
        - containerPort: {{ .GetApiserverExternalNodePort }}
        - containerPort: 8080
        volumeMounts:
        - name: apiserver-tls
          mountPath: /etc/kubernetes/tls
          readOnly: true
        - name: tokens
          mountPath: /etc/kubernetes/tokens
          readOnly: true
        - name: kubelet-client-certificates
          mountPath: /etc/kubernetes/kubelet
          readOnly: true
        - name: ca-cert
          mountPath: /etc/kubernetes/ca-cert
          readOnly: true
        - name: service-account-key
          mountPath: /etc/kubernetes/service-account-key
          readOnly: true
        - name: cloud-config
          mountPath: /etc/kubernetes/cloud
          readOnly: true
      volumes:
      - name: apiserver-tls
        secret:
          secretName: apiserver-tls
          defaultMode: 0400
      - name: tokens
        secret:
          secretName: tokens
          defaultMode: 0400
      - name: openvpn-client-certificates
        secret:
          secretName: openvpn-client-certificates
          defaultMode: 0400
      - name: kubelet-client-certificates
        secret:
          secretName: kubelet-client-certificates
          defaultMode: 0400
      - name: ca-cert
        secret:
          secretName: ca-cert
          defaultMode: 0400
      - name: service-account-key
        secret:
          secretName: service-account-key
          defaultMode: 0400
      - name: cloud-config
        configMap:
          name: cloud-config
