apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: apiserver
  ownerReferences:
  - apiVersion: kubermatic.k8s.io/v1
    blockOwnerDeletion: true
    controller: true
    kind: Cluster
    name: {{ .Cluster.Name }}
    uid: "{{ .Cluster.ObjectMeta.UID }}"
spec:
  selector:
    matchLabels:
      role: apiserver
      version: v1
  replicas: 1
  template:
    metadata:
      labels:
        role: apiserver
        release: {{index .Version.Values "k8s-version"}}
        version: v1
        tokencsvversion: "{{ .TokenCSVRevision }}"
        cloudconfigversion: "{{ .CloudConfigRevision }}"
      annotations:
        prometheus.io/port: '8080'
        prometheus.io/scrape: 'true'
    spec:
      containers:
      - image: kubermatic/pod-network-bridge:{{index .Version.Values "pod-network-bridge"}}
        command:
        - /client
        args:
        - -v=4
        - -logtostderr
        - -ssh-user=apiserver
        - -ssh-port=2222
        - -ssh-keyfile=/var/run/kubernetes/apiserver/id-rsa
        - -master=127.0.0.1:8080
        {{ if or (eq .ProviderName "digitalocean") (eq .ProviderName "bringyourown") }}
        - -ssh-preferred-address-types=InternalIP
        {{ else }}
        - -ssh-preferred-address-types=ExternalIP
        {{ end }}
        - -preferred-address-types=InternalIP
        - -interface-address=10.250.0.2/24
        - -pod-network-cidr=172.25.0.0/16
        - -service-network-cidr=10.10.10.0/24
        - -block-ports=8080
        imagePullPolicy: Always
        name: bridge-client
        securityContext:
          privileged: true
        volumeMounts:
        - mountPath: /var/run/kubernetes/apiserver
          name: apiserver
          readOnly: true
      - name: apiserver
        image: gcr.io/google_containers/hyperkube-amd64:{{index .Version.Values "k8s-version"}}
        command: [ "/hyperkube", "apiserver",
            "--advertise-address={{ .Cluster.Address.IP }}",
            "--secure-port={{ .Cluster.Address.ExternalPort }}",
            "--kubernetes-service-node-port={{ .Cluster.Address.ExternalPort }}",
            "--insecure-bind-address=0.0.0.0",
            "--insecure-port=8080",
            "--etcd-servers=http://etcd-cluster-client:2379",
            "--storage-backend=etcd3",
            "--admission-control=NamespaceLifecycle,LimitRanger,ServiceAccount,DefaultStorageClass,ResourceQuota,NodeRestriction",
            "--authorization-mode=Node,RBAC",
            "--external-hostname={{ .Cluster.Address.ExternalName }}",
            "--token-auth-file=/var/run/kubernetes/token-users/tokens.csv",
            "--enable-bootstrap-token-auth=true",
            {{ if contains "v1.8" (index .Version.Values "k8s-version") }}
            "--feature-gates=DynamicKubeletConfig=true",
            {{ end }}
            {{ if contains "v1.9" (index .Version.Values "k8s-version") }}
            "--feature-gates=DynamicKubeletConfig=true",
            {{ end }}
            "--service-account-key-file=/var/run/kubernetes/apiserver/service-account.key",
            "--service-cluster-ip-range=10.10.10.0/24",
            "--service-node-port-range=30000-32767",
            "--allow-privileged",
            "--tls-cert-file=/var/run/kubernetes/apiserver/apiserver.crt",
            "--tls-private-key-file=/var/run/kubernetes/apiserver/apiserver.key",
            "--client-ca-file=/var/run/kubernetes/apiserver/root-ca.crt",
            "--kubelet-client-certificate=/var/run/kubernetes/apiserver/kubelet-client.crt",
            "--kubelet-client-key=/var/run/kubernetes/apiserver/kubelet-client.key",
            {{ if eq .ProviderName "openstack" }}
            "--cloud-config=/etc/kubernetes/cloud/config",
            "--cloud-provider=openstack",
            {{ end }}
            {{ if eq .ProviderName "aws" }}
            "--cloud-config=/etc/kubernetes/cloud/config",
            "--cloud-provider=aws",
            {{ end }}
            "--kubelet-preferred-address-types=InternalIP",
            "--v=4" ]
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8080
          initialDelaySeconds: 60
          periodSeconds: 60
          timeoutSeconds: 60
        readinessProbe:
          httpGet:
            path: /healthz
            port: 8080
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 30
        ports:
        - containerPort: {{ .Cluster.Address.ExternalPort }}
        - containerPort: 8080
        volumeMounts:
        - name: apiserver
          mountPath: /var/run/kubernetes/apiserver
          readOnly: true
        - name: token-users
          mountPath: /var/run/kubernetes/token-users
          readOnly: true
        - name: cloud-config
          mountPath: /etc/kubernetes/cloud
          readOnly: true
      volumes:
      - name: apiserver
        secret:
          secretName: apiserver
          defaultMode: 0400
      - name: token-users
        secret:
          secretName: token-users
          defaultMode: 0400
      - name: cloud-config
        configMap:
          name: cloud-config
