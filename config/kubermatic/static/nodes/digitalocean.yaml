apiVersion: "nodeset.k8s.io/v1alpha1"
kind: NodeClass
metadata:
  name: {{ .Name }}
nodeController: kube-machine
config:
  dockerMachineFlags:
    digitalocean-access-token: "{{ .Cluster.Spec.Cloud.Digitalocean.Token }}"
    digitalocean-region: "{{ .Datacenter.Spec.Digitalocean.Region }}"
    digitalocean-size: "{{ .NodeSpec.Digitalocean.Size }}"
    digitalocean-image: "coreos-stable"
    digitalocean-ssh-user: "core"
    digitalocean-private-networking: "true"
    digitalocean-tags: "kubermatic,kubermatic-cluster-{{ .Cluster.Name }}"
  provider: "digitalocean"
  provisioning:
    users:
      - name: "apiserver"
        ssh_keys:
          {{range .Keys}}- {{.Spec.PublicKey}}
          {{end -}}
          - "{{ .Cluster.Status.ApiserverSSHKey.PublicKey | apiBytesToString }} apiserver@{{ .Cluster.Address.ExternalName }}"
        sudo: true
    commands:
      - "sudo chmod +x /opt/bin/bootstrap.sh && sudo /opt/bin/bootstrap.sh"
      - "sudo systemctl enable kubelet && sudo systemctl start kubelet"
    files:
      - path: "/etc/kubernetes/bootstrap.kubeconfig"
        permissions: "0640"
        owner: "root"
        content: |-
{{ .Kubeconfig | indent 10 }}
      - path: "/opt/bin/bootstrap.sh"
        permissions: "0750"
        owner: "root"
        content: |-
          #!/bin/bash

          set -xeuo pipefail

          mkdir -p /opt/bin /opt/cni/bin /etc/cni/net.d /var/run/kubernetes /var/lib/kubelet /etc/kubernetes/manifests /var/log/containers

          if [ ! -f /opt/bin/socat ]; then
            curl -L -o /opt/bin/socat https://s3-eu-west-1.amazonaws.com/kubermatic/coreos/socat
            chmod +x /opt/bin/socat
          fi

          if [ ! -f /opt/bin/kubelet.{{index .Version.Values "k8s-version"}} ]; then
            curl -L -o /opt/bin/kubelet.{{index .Version.Values "k8s-version"}} https://storage.googleapis.com/kubernetes-release/release/{{index .Version.Values "k8s-version"}}/bin/linux/amd64/kubelet
            cp /opt/bin/kubelet.{{index .Version.Values "k8s-version"}} /opt/bin/kubelet
            chmod +x /opt/bin/kubelet
          fi

          if [ ! -f /opt/bin/setup-network-environment.v1.0.0 ]; then
            curl -L -o /opt/bin/setup-network-environment.v1.0.0 https://github.com/kelseyhightower/setup-network-environment/releases/download/v1.0.0/setup-network-environment
            cp /opt/bin/setup-network-environment.v1.0.0 /opt/bin/setup-network-environment
            chmod +x /opt/bin/setup-network-environment
          fi

          /opt/bin/setup-network-environment

      - path: "/etc/systemd/system/kubelet.service"
        permissions: "0640"
        owner: "root"
        content: |-
          [Unit]
          Description=Kubelet
          Requires=network.target
          After=network.target

          [Service]
          Restart=always
          RestartSec=10
          StartLimitInterval=600
          StartLimitBurst=50
          Environment="PATH=/sbin:/bin:/usr/sbin:/usr/bin:/opt/bin"
          EnvironmentFile=/etc/network-environment
          ExecStartPre=/opt/bin/bootstrap.sh
          ExecStart=/opt/bin/kubelet \
            --container-runtime=docker \
            --allow-privileged=true \
            --pod-manifest-path=/etc/kubernetes/manifests \
            --cni-conf-dir=/etc/cni/net.d \
            --network-plugin=cni \
            --node-ip=${DEFAULT_IPV4} \
            --cluster-dns=10.10.10.10 \
            --cluster_domain=cluster.local \
            --kubeconfig=/etc/kubernetes/kubeconfig \
            --bootstrap-kubeconfig=/etc/kubernetes/bootstrap.kubeconfig \
            --require-kubeconfig \
            --system-reserved=cpu=50m,memory=100Mi \
            --cert-dir=/etc/kubernetes/

          [Install]
          WantedBy=multi-user.target
