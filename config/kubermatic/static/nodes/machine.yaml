apiVersion: "machine.k8s.io/v1alpha1"
kind: Machine
metadata:
  name: machine-{{ .Node.Metadata.Name }}
spec:
  metadata:
    name: {{ .Node.Metadata.Name }}
  providerConfig:
    sshPublicKeys:
      {{ range .Keys }}- {{ .Spec.PublicKey }}
      {{ end }}
    {{- if .Node.Spec.Cloud.AWS }}
    cloudProvider: "aws"
    cloudProviderSpec:
      accessKeyId: {{ .Cluster.Spec.Cloud.AWS.AccessKeyID | quote }}
      secretAccessKey: {{ .Cluster.Spec.Cloud.AWS.SecretAccessKey | quote  }}
      region: "{{ .Datacenter.Spec.AWS.Region }}"
      availabilityZone: "{{ .Datacenter.Spec.AWS.Region }}{{ .Datacenter.Spec.AWS.ZoneCharacter }}"
      vpcId: {{ .Cluster.Spec.Cloud.AWS.VPCID | quote }}
      subnetId: {{ .Cluster.Spec.Cloud.AWS.SubnetID | quote }}
      instanceProfile: {{ .Cluster.Spec.Cloud.AWS.InstanceProfileName | quote }}
      securityGroupIDs:
      - {{ .Cluster.Spec.Cloud.AWS.SecurityGroupID | quote }}
      instanceType: "{{ .Node.Spec.Cloud.AWS.InstanceType }}"
      diskSize: {{ default 25 .Node.Spec.Cloud.AWS.VolumeSize }}
      diskType: "{{ default "gp2" .Node.Spec.Cloud.AWS.VolumeType }}"
      ami: {{ .Node.Spec.Cloud.AWS.AMI | quote }}
      tags:
        KubernetesCluster: "{{ .Cluster.Name }}"
        {{- range $key, $value := .Node.Spec.Cloud.AWS.Tags }}
        {{$key}}: {{$value | quote}}
        {{- end }}
    {{- end }}
    {{- if .Node.Spec.Cloud.Openstack }}
    cloudProvider: "openstack"
    cloudProviderSpec:
      identityEndpoint: "{{ .Datacenter.Spec.Openstack.AuthURL }}"
      region: "{{ .Datacenter.Spec.Openstack.Region }}"
      username: {{ .Cluster.Spec.Cloud.Openstack.Username | quote }}
      password: {{ .Cluster.Spec.Cloud.Openstack.Password | quote }}
      domainName: {{ .Cluster.Spec.Cloud.Openstack.Domain | quote }}
      tenantName: {{ .Cluster.Spec.Cloud.Openstack.Tenant | quote }}
      image: {{ .Node.Spec.Cloud.Openstack.Image | quote }}
      flavor: {{ .Node.Spec.Cloud.Openstack.Flavor | quote }}
      securityGroups:
        - {{ .Cluster.Spec.Cloud.Openstack.SecurityGroups }}
      floatingIpPool: {{ .Cluster.Spec.Cloud.Openstack.FloatingIPPool | quote }}
      availabilityZone: "{{ .Datacenter.Spec.Openstack.AvailabilityZone }}"
      network: {{ .Cluster.Spec.Cloud.Openstack.Network | quote }}
    {{- end }}
    {{- if .Node.Spec.Cloud.Digitalocean }}
    cloudProvider: "digitalocean"
    cloudProviderSpec:
      token: {{ .Cluster.Spec.Cloud.Digitalocean.Token | quote }}
      region: "{{ .Datacenter.Spec.Digitalocean.Region }}"
      size: "{{ .Node.Spec.Cloud.Digitalocean.Size }}"
      backups: {{ .Node.Spec.Cloud.Digitalocean.Backups }}
      ipv6: {{ .Node.Spec.Cloud.Digitalocean.IPv6 }}
      private_networking: true
      monitoring: {{ .Node.Spec.Cloud.Digitalocean.Monitoring }}
      tags:
      - kubermatic
      - kubermatic-cluster-{{ .Cluster.Name }}
      {{ range .Node.Spec.Cloud.Digitalocean.Tags }}- {{ . | quote }}
      {{ end }}
    {{- end }}
    {{- if .Node.Spec.Cloud.Hetzner }}
    cloudProvider: "hetzner"
    cloudProviderSpec:
      token: {{ .Cluster.Spec.Cloud.Hetzner.Token  | quote }}
      serverType: "{{ .Node.Spec.Cloud.Hetzner.Type }}"
      datacenter: "{{ .Datacenter.Spec.Hetzner.Datacenter }}"
      location: "{{ .Datacenter.Spec.Hetzner.Location }}"
    {{- end }}
    {{- if .Node.Spec.Cloud.VSphere }}
    cloudProvider: "vsphere"
    cloudProviderSpec:
      identityEndpoint: "{{ .Datacenter.Spec.VSphere.Endpoint }}"
      username: {{ .Cluster.Spec.Cloud.VSphere.Username | quote }}
      password: {{ .Cluster.Spec.Cloud.VSphere.Password | quote }}
      datacenter: "{{ .Datacenter.Spec.VSphere.Datacenter }}"
      datastore: "{{ .Datacenter.Spec.VSphere.Datastore }}"
    {{- end }}
    {{- if .Node.Spec.OperatingSystem.ContainerLinux }}
    operatingSystem: "coreos"
    operatingSystemSpec:
      disableAutoUpdate: {{ .Node.Spec.OperatingSystem.DisableAutoUpdate }}
    {{- end }}
    {{- if .Node.Spec.OperatingSystem.Ubuntu }}
    operatingSystem: "ubuntu"
    operatingSystemSpec:
      distUpgradeOnBoot: {{ .Node.Spec.OperatingSystem.Ubuntu.DistUpgradeOnBoot }}
    {{- end }}
  roles:
  - "Node"
  versions:
    kubelet: "{{ .Node.Spec.Versions.Kubelet }}"
    containerRuntime:
      name: "{{ .Node.Spec.Versions.ContainerRuntime.Name }}"
      version: "{{ .Node.Spec.Versions.ContainerRuntime.Version }}"
