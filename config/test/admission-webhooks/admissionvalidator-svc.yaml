# Copyright 2020 The Kubermatic Kubernetes Platform contributors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

apiVersion: apps/v1
kind: Deployment
metadata:
  name: demo-validator
spec:
  selector:
    matchLabels:
      run: demo-validator
  replicas: 1
  template:
    metadata:
      labels:
        run: demo-validator
    spec:
      volumes:
      - name: snakeoil-tls
        secret:
          secretName: snakeoil-tls
      containers:
      - name: demo-validator
        image: thzpub/vnf-swak-diag
        volumeMounts:
        - mountPath: /mnt/snakeoil-tls
          name: snakeoil-tls
          readOnly: true
        command:
        - bash
        - -c
        - |
          printf "Running demo-validator...\n"
          cat <<"EOF">handler.sh
          #!/bin/bash
          ltmp=$(mktemp -d) ; trap "rm -r $ltmp" EXIT

          # read request
          read method path version

          # read header
          contentlength=0
          while read -r header value; do
            header=`echo "$header" | tr -d '\r\n'`
            value=`echo "$value" | tr -d '\r\n'`
            [ "${header^^}" = "CONTENT-LENGTH:" ] && contentlength="$value"
            [ -z "$header" ] && break
          done

          # read body (if any)
          if [ $contentlength -gt 0 ]; then
            dd status=none bs=1 count=$contentlength | jq . |tee $ltmp/req.json > /dev/stderr
          fi

          fail() {
            printf "HTTP/1.1 400 OK\nContent-Type: text/plain\n\n"
            echo "$*"
            exit 0
          }
          deny() {
            printf "HTTP/1.1 200 OK\nContent-Type: application/json\n\n"
            cat <<-RESPONSE
            {
              "response": {
                "allowed": false,
                "status": {
                  "status": "Failure",
                  "reason": "operation denied",
                  "message": "$*",
                  "code": 402
                }
              }
            }
          RESPONSE
            echo "denied: $*" > /dev/stderr
            exit 0
          }
          admit() {
            printf "HTTP/1.1 200 OK\nContent-Type: application/json\n\n"
            echo '{"response": { "allowed": true}}'
            echo "admitted: $*" > /dev/stderr
            exit 0
          }

          req=$ltmp/req.json
          [ `jq -r '.kind' $req` = AdmissionReview ] || fail "Only kind=AdmissionReview is handled here."
          [ `jq -r '.request.kind.kind' $req` = Namespace ] || admit "non-namespace"
          [ `jq -r '.request.operation' $req` = CREATE ] || admit "non-CREATE op"
          [ `jq -r '.request.object.metadata.name' $req` = foobar ] || admit "not foobar named."
          deny "Please pick a better name. Foobar is too generic"
          EOF

          # serve the validator
          chmod 755 handler.sh
          cert=/mnt/snakeoil-tls/snakeoil.crt
          key=/mnt/snakeoil-tls/snakeoil.key
          socat \
            openssl-listen:443,reuseaddr,fork,cert=$cert,key=$key,verify=0 \
            system:./handler.sh
          printf "Terminating.\n"
          exit 0
        ports:
        - containerPort: 443
---
apiVersion: v1
kind: Service
metadata:
  name: demo-validator
  labels:
    run: demo-validator
spec:
  ports:
  - port: 443
    protocol: TCP
  selector:
    run: demo-validator
---
apiVersion: v1
kind: Secret
metadata:
  name: snakeoil-tls
type: Opaque
data:
  snakeoil.crt: Run create-secrets.sh
  snakeoil.key: Run create-secrets.sh
