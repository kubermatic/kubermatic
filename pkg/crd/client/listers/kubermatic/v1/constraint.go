// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "k8c.io/kubermatic/v2/pkg/crd/kubermatic/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ConstraintLister helps list Constraints.
// All objects returned here must be treated as read-only.
type ConstraintLister interface {
	// List lists all Constraints in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.Constraint, err error)
	// Constraints returns an object that can list and get Constraints.
	Constraints(namespace string) ConstraintNamespaceLister
	ConstraintListerExpansion
}

// constraintLister implements the ConstraintLister interface.
type constraintLister struct {
	indexer cache.Indexer
}

// NewConstraintLister returns a new ConstraintLister.
func NewConstraintLister(indexer cache.Indexer) ConstraintLister {
	return &constraintLister{indexer: indexer}
}

// List lists all Constraints in the indexer.
func (s *constraintLister) List(selector labels.Selector) (ret []*v1.Constraint, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.Constraint))
	})
	return ret, err
}

// Constraints returns an object that can list and get Constraints.
func (s *constraintLister) Constraints(namespace string) ConstraintNamespaceLister {
	return constraintNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ConstraintNamespaceLister helps list and get Constraints.
// All objects returned here must be treated as read-only.
type ConstraintNamespaceLister interface {
	// List lists all Constraints in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.Constraint, err error)
	// Get retrieves the Constraint from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.Constraint, error)
	ConstraintNamespaceListerExpansion
}

// constraintNamespaceLister implements the ConstraintNamespaceLister
// interface.
type constraintNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Constraints in the indexer for a given namespace.
func (s constraintNamespaceLister) List(selector labels.Selector) (ret []*v1.Constraint, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.Constraint))
	})
	return ret, err
}

// Get retrieves the Constraint from the indexer for a given namespace and name.
func (s constraintNamespaceLister) Get(name string) (*v1.Constraint, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("constraint"), name)
	}
	return obj.(*v1.Constraint), nil
}
