// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/kubermatic/kubermatic/pkg/crd/kubermatic/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ImportedClusterLister helps list ImportedClusters.
type ImportedClusterLister interface {
	// List lists all ImportedClusters in the indexer.
	List(selector labels.Selector) (ret []*v1.ImportedCluster, err error)
	// Get retrieves the ImportedCluster from the index for a given name.
	Get(name string) (*v1.ImportedCluster, error)
	ImportedClusterListerExpansion
}

// importedClusterLister implements the ImportedClusterLister interface.
type importedClusterLister struct {
	indexer cache.Indexer
}

// NewImportedClusterLister returns a new ImportedClusterLister.
func NewImportedClusterLister(indexer cache.Indexer) ImportedClusterLister {
	return &importedClusterLister{indexer: indexer}
}

// List lists all ImportedClusters in the indexer.
func (s *importedClusterLister) List(selector labels.Selector) (ret []*v1.ImportedCluster, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.ImportedCluster))
	})
	return ret, err
}

// Get retrieves the ImportedCluster from the index for a given name.
func (s *importedClusterLister) Get(name string) (*v1.ImportedCluster, error) {
	obj, exists, err := s.indexer.GetByKey(name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("importedcluster"), name)
	}
	return obj.(*v1.ImportedCluster), nil
}
