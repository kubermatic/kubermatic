// Code generated by go-swagger; DO NOT EDIT.

package datacenter

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/kubermatic/kubermatic/pkg/test/e2e/api/utils/apiclient/models"
)

// GetDCForProviderReader is a Reader for the GetDCForProvider structure.
type GetDCForProviderReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetDCForProviderReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetDCForProviderOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetDCForProviderUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetDCForProviderForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewGetDCForProviderDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetDCForProviderOK creates a GetDCForProviderOK with default headers values
func NewGetDCForProviderOK() *GetDCForProviderOK {
	return &GetDCForProviderOK{}
}

/*GetDCForProviderOK handles this case with default header values.

Datacenter
*/
type GetDCForProviderOK struct {
	Payload *models.Datacenter
}

func (o *GetDCForProviderOK) Error() string {
	return fmt.Sprintf("[GET /api/v1/providers/{provider_name}/dc/{dc}][%d] getDCForProviderOK  %+v", 200, o.Payload)
}

func (o *GetDCForProviderOK) GetPayload() *models.Datacenter {
	return o.Payload
}

func (o *GetDCForProviderOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Datacenter)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDCForProviderUnauthorized creates a GetDCForProviderUnauthorized with default headers values
func NewGetDCForProviderUnauthorized() *GetDCForProviderUnauthorized {
	return &GetDCForProviderUnauthorized{}
}

/*GetDCForProviderUnauthorized handles this case with default header values.

EmptyResponse is a empty response
*/
type GetDCForProviderUnauthorized struct {
}

func (o *GetDCForProviderUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/v1/providers/{provider_name}/dc/{dc}][%d] getDCForProviderUnauthorized ", 401)
}

func (o *GetDCForProviderUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetDCForProviderForbidden creates a GetDCForProviderForbidden with default headers values
func NewGetDCForProviderForbidden() *GetDCForProviderForbidden {
	return &GetDCForProviderForbidden{}
}

/*GetDCForProviderForbidden handles this case with default header values.

EmptyResponse is a empty response
*/
type GetDCForProviderForbidden struct {
}

func (o *GetDCForProviderForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v1/providers/{provider_name}/dc/{dc}][%d] getDCForProviderForbidden ", 403)
}

func (o *GetDCForProviderForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetDCForProviderDefault creates a GetDCForProviderDefault with default headers values
func NewGetDCForProviderDefault(code int) *GetDCForProviderDefault {
	return &GetDCForProviderDefault{
		_statusCode: code,
	}
}

/*GetDCForProviderDefault handles this case with default header values.

errorResponse
*/
type GetDCForProviderDefault struct {
	_statusCode int

	Payload *models.ErrorResponse
}

// Code gets the status code for the get d c for provider default response
func (o *GetDCForProviderDefault) Code() int {
	return o._statusCode
}

func (o *GetDCForProviderDefault) Error() string {
	return fmt.Sprintf("[GET /api/v1/providers/{provider_name}/dc/{dc}][%d] getDCForProvider default  %+v", o._statusCode, o.Payload)
}

func (o *GetDCForProviderDefault) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetDCForProviderDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
