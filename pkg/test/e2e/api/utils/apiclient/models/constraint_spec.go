// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ConstraintSpec constraint spec
//
// swagger:model ConstraintSpec
type ConstraintSpec struct {

	// type of gatekeeper constraint that the constraint applies to
	ConstraintType string `json:"constraintType,omitempty"`

	// excluded namespaces
	ExcludedNamespaces []string `json:"excludedNamespaces"`

	// kinds
	Kinds []*Kind `json:"kinds"`

	// namespaces
	Namespaces []string `json:"namespaces"`

	// scope
	Scope string `json:"scope,omitempty"`

	// label selector
	LabelSelector *LabelSelector `json:"labelSelector,omitempty"`

	// namespace selector
	NamespaceSelector *LabelSelector `json:"namespaceSelector,omitempty"`

	// parameters
	Parameters *Parameters `json:"parameters,omitempty"`
}

// Validate validates this constraint spec
func (m *ConstraintSpec) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateKinds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLabelSelector(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNamespaceSelector(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParameters(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ConstraintSpec) validateKinds(formats strfmt.Registry) error {

	if swag.IsZero(m.Kinds) { // not required
		return nil
	}

	for i := 0; i < len(m.Kinds); i++ {
		if swag.IsZero(m.Kinds[i]) { // not required
			continue
		}

		if m.Kinds[i] != nil {
			if err := m.Kinds[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("kinds" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ConstraintSpec) validateLabelSelector(formats strfmt.Registry) error {

	if swag.IsZero(m.LabelSelector) { // not required
		return nil
	}

	if m.LabelSelector != nil {
		if err := m.LabelSelector.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("labelSelector")
			}
			return err
		}
	}

	return nil
}

func (m *ConstraintSpec) validateNamespaceSelector(formats strfmt.Registry) error {

	if swag.IsZero(m.NamespaceSelector) { // not required
		return nil
	}

	if m.NamespaceSelector != nil {
		if err := m.NamespaceSelector.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("namespaceSelector")
			}
			return err
		}
	}

	return nil
}

func (m *ConstraintSpec) validateParameters(formats strfmt.Registry) error {

	if swag.IsZero(m.Parameters) { // not required
		return nil
	}

	if m.Parameters != nil {
		if err := m.Parameters.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("parameters")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ConstraintSpec) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ConstraintSpec) UnmarshalBinary(b []byte) error {
	var res ConstraintSpec
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
