// Code generated by go-swagger; DO NOT EDIT.

package metering

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewListMeteringReportsParams creates a new ListMeteringReportsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewListMeteringReportsParams() *ListMeteringReportsParams {
	return &ListMeteringReportsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewListMeteringReportsParamsWithTimeout creates a new ListMeteringReportsParams object
// with the ability to set a timeout on a request.
func NewListMeteringReportsParamsWithTimeout(timeout time.Duration) *ListMeteringReportsParams {
	return &ListMeteringReportsParams{
		timeout: timeout,
	}
}

// NewListMeteringReportsParamsWithContext creates a new ListMeteringReportsParams object
// with the ability to set a context for a request.
func NewListMeteringReportsParamsWithContext(ctx context.Context) *ListMeteringReportsParams {
	return &ListMeteringReportsParams{
		Context: ctx,
	}
}

// NewListMeteringReportsParamsWithHTTPClient creates a new ListMeteringReportsParams object
// with the ability to set a custom HTTPClient for a request.
func NewListMeteringReportsParamsWithHTTPClient(client *http.Client) *ListMeteringReportsParams {
	return &ListMeteringReportsParams{
		HTTPClient: client,
	}
}

/* ListMeteringReportsParams contains all the parameters to send to the API endpoint
   for the list metering reports operation.

   Typically these are written to a http.Request.
*/
type ListMeteringReportsParams struct {

	// MaxKeys.
	//
	// Format: int64
	MaxKeys *int64

	// StartAfter.
	StartAfter *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the list metering reports params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ListMeteringReportsParams) WithDefaults() *ListMeteringReportsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the list metering reports params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ListMeteringReportsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the list metering reports params
func (o *ListMeteringReportsParams) WithTimeout(timeout time.Duration) *ListMeteringReportsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the list metering reports params
func (o *ListMeteringReportsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the list metering reports params
func (o *ListMeteringReportsParams) WithContext(ctx context.Context) *ListMeteringReportsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the list metering reports params
func (o *ListMeteringReportsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the list metering reports params
func (o *ListMeteringReportsParams) WithHTTPClient(client *http.Client) *ListMeteringReportsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the list metering reports params
func (o *ListMeteringReportsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithMaxKeys adds the maxKeys to the list metering reports params
func (o *ListMeteringReportsParams) WithMaxKeys(maxKeys *int64) *ListMeteringReportsParams {
	o.SetMaxKeys(maxKeys)
	return o
}

// SetMaxKeys adds the maxKeys to the list metering reports params
func (o *ListMeteringReportsParams) SetMaxKeys(maxKeys *int64) {
	o.MaxKeys = maxKeys
}

// WithStartAfter adds the startAfter to the list metering reports params
func (o *ListMeteringReportsParams) WithStartAfter(startAfter *string) *ListMeteringReportsParams {
	o.SetStartAfter(startAfter)
	return o
}

// SetStartAfter adds the startAfter to the list metering reports params
func (o *ListMeteringReportsParams) SetStartAfter(startAfter *string) {
	o.StartAfter = startAfter
}

// WriteToRequest writes these params to a swagger request
func (o *ListMeteringReportsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.MaxKeys != nil {

		// query param max_keys
		var qrMaxKeys int64

		if o.MaxKeys != nil {
			qrMaxKeys = *o.MaxKeys
		}
		qMaxKeys := swag.FormatInt64(qrMaxKeys)
		if qMaxKeys != "" {

			if err := r.SetQueryParam("max_keys", qMaxKeys); err != nil {
				return err
			}
		}
	}

	if o.StartAfter != nil {

		// query param start_after
		var qrStartAfter string

		if o.StartAfter != nil {
			qrStartAfter = *o.StartAfter
		}
		qStartAfter := qrStartAfter
		if qStartAfter != "" {

			if err := r.SetQueryParam("start_after", qStartAfter); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
