// Code generated by go-swagger; DO NOT EDIT.

package metering

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"k8c.io/kubermatic/v2/pkg/test/e2e/utils/apiclient/models"
)

// GetMeteringReportReader is a Reader for the GetMeteringReport structure.
type GetMeteringReportReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetMeteringReportReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetMeteringReportOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetMeteringReportUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetMeteringReportForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewGetMeteringReportDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetMeteringReportOK creates a GetMeteringReportOK with default headers values
func NewGetMeteringReportOK() *GetMeteringReportOK {
	return &GetMeteringReportOK{}
}

/* GetMeteringReportOK describes a response with status code 200, with default header values.

MeteringReportURL
*/
type GetMeteringReportOK struct {
	Payload models.ReportURL
}

// IsSuccess returns true when this get metering report o k response has a 2xx status code
func (o *GetMeteringReportOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get metering report o k response has a 3xx status code
func (o *GetMeteringReportOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get metering report o k response has a 4xx status code
func (o *GetMeteringReportOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get metering report o k response has a 5xx status code
func (o *GetMeteringReportOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get metering report o k response a status code equal to that given
func (o *GetMeteringReportOK) IsCode(code int) bool {
	return code == 200
}

func (o *GetMeteringReportOK) Error() string {
	return fmt.Sprintf("[GET /api/v1/admin/metering/reports/{report_name}][%d] getMeteringReportOK  %+v", 200, o.Payload)
}

func (o *GetMeteringReportOK) String() string {
	return fmt.Sprintf("[GET /api/v1/admin/metering/reports/{report_name}][%d] getMeteringReportOK  %+v", 200, o.Payload)
}

func (o *GetMeteringReportOK) GetPayload() models.ReportURL {
	return o.Payload
}

func (o *GetMeteringReportOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetMeteringReportUnauthorized creates a GetMeteringReportUnauthorized with default headers values
func NewGetMeteringReportUnauthorized() *GetMeteringReportUnauthorized {
	return &GetMeteringReportUnauthorized{}
}

/* GetMeteringReportUnauthorized describes a response with status code 401, with default header values.

EmptyResponse is a empty response
*/
type GetMeteringReportUnauthorized struct {
}

// IsSuccess returns true when this get metering report unauthorized response has a 2xx status code
func (o *GetMeteringReportUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get metering report unauthorized response has a 3xx status code
func (o *GetMeteringReportUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get metering report unauthorized response has a 4xx status code
func (o *GetMeteringReportUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get metering report unauthorized response has a 5xx status code
func (o *GetMeteringReportUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get metering report unauthorized response a status code equal to that given
func (o *GetMeteringReportUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *GetMeteringReportUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/v1/admin/metering/reports/{report_name}][%d] getMeteringReportUnauthorized ", 401)
}

func (o *GetMeteringReportUnauthorized) String() string {
	return fmt.Sprintf("[GET /api/v1/admin/metering/reports/{report_name}][%d] getMeteringReportUnauthorized ", 401)
}

func (o *GetMeteringReportUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetMeteringReportForbidden creates a GetMeteringReportForbidden with default headers values
func NewGetMeteringReportForbidden() *GetMeteringReportForbidden {
	return &GetMeteringReportForbidden{}
}

/* GetMeteringReportForbidden describes a response with status code 403, with default header values.

EmptyResponse is a empty response
*/
type GetMeteringReportForbidden struct {
}

// IsSuccess returns true when this get metering report forbidden response has a 2xx status code
func (o *GetMeteringReportForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get metering report forbidden response has a 3xx status code
func (o *GetMeteringReportForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get metering report forbidden response has a 4xx status code
func (o *GetMeteringReportForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get metering report forbidden response has a 5xx status code
func (o *GetMeteringReportForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get metering report forbidden response a status code equal to that given
func (o *GetMeteringReportForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *GetMeteringReportForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v1/admin/metering/reports/{report_name}][%d] getMeteringReportForbidden ", 403)
}

func (o *GetMeteringReportForbidden) String() string {
	return fmt.Sprintf("[GET /api/v1/admin/metering/reports/{report_name}][%d] getMeteringReportForbidden ", 403)
}

func (o *GetMeteringReportForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetMeteringReportDefault creates a GetMeteringReportDefault with default headers values
func NewGetMeteringReportDefault(code int) *GetMeteringReportDefault {
	return &GetMeteringReportDefault{
		_statusCode: code,
	}
}

/* GetMeteringReportDefault describes a response with status code -1, with default header values.

errorResponse
*/
type GetMeteringReportDefault struct {
	_statusCode int

	Payload *models.ErrorResponse
}

// Code gets the status code for the get metering report default response
func (o *GetMeteringReportDefault) Code() int {
	return o._statusCode
}

// IsSuccess returns true when this get metering report default response has a 2xx status code
func (o *GetMeteringReportDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this get metering report default response has a 3xx status code
func (o *GetMeteringReportDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this get metering report default response has a 4xx status code
func (o *GetMeteringReportDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this get metering report default response has a 5xx status code
func (o *GetMeteringReportDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this get metering report default response a status code equal to that given
func (o *GetMeteringReportDefault) IsCode(code int) bool {
	return o._statusCode == code
}

func (o *GetMeteringReportDefault) Error() string {
	return fmt.Sprintf("[GET /api/v1/admin/metering/reports/{report_name}][%d] getMeteringReport default  %+v", o._statusCode, o.Payload)
}

func (o *GetMeteringReportDefault) String() string {
	return fmt.Sprintf("[GET /api/v1/admin/metering/reports/{report_name}][%d] getMeteringReport default  %+v", o._statusCode, o.Payload)
}

func (o *GetMeteringReportDefault) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetMeteringReportDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
