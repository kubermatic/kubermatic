// Code generated by go-swagger; DO NOT EDIT.

package project

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewAssignSSHKeyToClusterParams creates a new AssignSSHKeyToClusterParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewAssignSSHKeyToClusterParams() *AssignSSHKeyToClusterParams {
	return &AssignSSHKeyToClusterParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewAssignSSHKeyToClusterParamsWithTimeout creates a new AssignSSHKeyToClusterParams object
// with the ability to set a timeout on a request.
func NewAssignSSHKeyToClusterParamsWithTimeout(timeout time.Duration) *AssignSSHKeyToClusterParams {
	return &AssignSSHKeyToClusterParams{
		timeout: timeout,
	}
}

// NewAssignSSHKeyToClusterParamsWithContext creates a new AssignSSHKeyToClusterParams object
// with the ability to set a context for a request.
func NewAssignSSHKeyToClusterParamsWithContext(ctx context.Context) *AssignSSHKeyToClusterParams {
	return &AssignSSHKeyToClusterParams{
		Context: ctx,
	}
}

// NewAssignSSHKeyToClusterParamsWithHTTPClient creates a new AssignSSHKeyToClusterParams object
// with the ability to set a custom HTTPClient for a request.
func NewAssignSSHKeyToClusterParamsWithHTTPClient(client *http.Client) *AssignSSHKeyToClusterParams {
	return &AssignSSHKeyToClusterParams{
		HTTPClient: client,
	}
}

/* AssignSSHKeyToClusterParams contains all the parameters to send to the API endpoint
   for the assign SSH key to cluster operation.

   Typically these are written to a http.Request.
*/
type AssignSSHKeyToClusterParams struct {

	// ClusterID.
	ClusterID string

	// Dc.
	DC string

	// KeyID.
	KeyID string

	// ProjectID.
	ProjectID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the assign SSH key to cluster params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *AssignSSHKeyToClusterParams) WithDefaults() *AssignSSHKeyToClusterParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the assign SSH key to cluster params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *AssignSSHKeyToClusterParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the assign SSH key to cluster params
func (o *AssignSSHKeyToClusterParams) WithTimeout(timeout time.Duration) *AssignSSHKeyToClusterParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the assign SSH key to cluster params
func (o *AssignSSHKeyToClusterParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the assign SSH key to cluster params
func (o *AssignSSHKeyToClusterParams) WithContext(ctx context.Context) *AssignSSHKeyToClusterParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the assign SSH key to cluster params
func (o *AssignSSHKeyToClusterParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the assign SSH key to cluster params
func (o *AssignSSHKeyToClusterParams) WithHTTPClient(client *http.Client) *AssignSSHKeyToClusterParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the assign SSH key to cluster params
func (o *AssignSSHKeyToClusterParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithClusterID adds the clusterID to the assign SSH key to cluster params
func (o *AssignSSHKeyToClusterParams) WithClusterID(clusterID string) *AssignSSHKeyToClusterParams {
	o.SetClusterID(clusterID)
	return o
}

// SetClusterID adds the clusterId to the assign SSH key to cluster params
func (o *AssignSSHKeyToClusterParams) SetClusterID(clusterID string) {
	o.ClusterID = clusterID
}

// WithDC adds the dc to the assign SSH key to cluster params
func (o *AssignSSHKeyToClusterParams) WithDC(dc string) *AssignSSHKeyToClusterParams {
	o.SetDC(dc)
	return o
}

// SetDC adds the dc to the assign SSH key to cluster params
func (o *AssignSSHKeyToClusterParams) SetDC(dc string) {
	o.DC = dc
}

// WithKeyID adds the keyID to the assign SSH key to cluster params
func (o *AssignSSHKeyToClusterParams) WithKeyID(keyID string) *AssignSSHKeyToClusterParams {
	o.SetKeyID(keyID)
	return o
}

// SetKeyID adds the keyId to the assign SSH key to cluster params
func (o *AssignSSHKeyToClusterParams) SetKeyID(keyID string) {
	o.KeyID = keyID
}

// WithProjectID adds the projectID to the assign SSH key to cluster params
func (o *AssignSSHKeyToClusterParams) WithProjectID(projectID string) *AssignSSHKeyToClusterParams {
	o.SetProjectID(projectID)
	return o
}

// SetProjectID adds the projectId to the assign SSH key to cluster params
func (o *AssignSSHKeyToClusterParams) SetProjectID(projectID string) {
	o.ProjectID = projectID
}

// WriteToRequest writes these params to a swagger request
func (o *AssignSSHKeyToClusterParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param cluster_id
	if err := r.SetPathParam("cluster_id", o.ClusterID); err != nil {
		return err
	}

	// path param dc
	if err := r.SetPathParam("dc", o.DC); err != nil {
		return err
	}

	// path param key_id
	if err := r.SetPathParam("key_id", o.KeyID); err != nil {
		return err
	}

	// path param project_id
	if err := r.SetPathParam("project_id", o.ProjectID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
