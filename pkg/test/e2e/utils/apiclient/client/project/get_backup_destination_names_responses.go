// Code generated by go-swagger; DO NOT EDIT.

package project

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"k8c.io/kubermatic/v2/pkg/test/e2e/utils/apiclient/models"
)

// GetBackupDestinationNamesReader is a Reader for the GetBackupDestinationNames structure.
type GetBackupDestinationNamesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetBackupDestinationNamesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetBackupDestinationNamesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetBackupDestinationNamesUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetBackupDestinationNamesForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewGetBackupDestinationNamesDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetBackupDestinationNamesOK creates a GetBackupDestinationNamesOK with default headers values
func NewGetBackupDestinationNamesOK() *GetBackupDestinationNamesOK {
	return &GetBackupDestinationNamesOK{}
}

/*
GetBackupDestinationNamesOK describes a response with status code 200, with default header values.

BackupDestinationNames
*/
type GetBackupDestinationNamesOK struct {
	Payload models.BackupDestinationNames
}

// IsSuccess returns true when this get backup destination names o k response has a 2xx status code
func (o *GetBackupDestinationNamesOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get backup destination names o k response has a 3xx status code
func (o *GetBackupDestinationNamesOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get backup destination names o k response has a 4xx status code
func (o *GetBackupDestinationNamesOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get backup destination names o k response has a 5xx status code
func (o *GetBackupDestinationNamesOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get backup destination names o k response a status code equal to that given
func (o *GetBackupDestinationNamesOK) IsCode(code int) bool {
	return code == 200
}

func (o *GetBackupDestinationNamesOK) Error() string {
	return fmt.Sprintf("[GET /api/v2/projects/{project_id}/clusters/{cluster_id}/backupdestinations][%d] getBackupDestinationNamesOK  %+v", 200, o.Payload)
}

func (o *GetBackupDestinationNamesOK) String() string {
	return fmt.Sprintf("[GET /api/v2/projects/{project_id}/clusters/{cluster_id}/backupdestinations][%d] getBackupDestinationNamesOK  %+v", 200, o.Payload)
}

func (o *GetBackupDestinationNamesOK) GetPayload() models.BackupDestinationNames {
	return o.Payload
}

func (o *GetBackupDestinationNamesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetBackupDestinationNamesUnauthorized creates a GetBackupDestinationNamesUnauthorized with default headers values
func NewGetBackupDestinationNamesUnauthorized() *GetBackupDestinationNamesUnauthorized {
	return &GetBackupDestinationNamesUnauthorized{}
}

/*
GetBackupDestinationNamesUnauthorized describes a response with status code 401, with default header values.

EmptyResponse is a empty response
*/
type GetBackupDestinationNamesUnauthorized struct {
}

// IsSuccess returns true when this get backup destination names unauthorized response has a 2xx status code
func (o *GetBackupDestinationNamesUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get backup destination names unauthorized response has a 3xx status code
func (o *GetBackupDestinationNamesUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get backup destination names unauthorized response has a 4xx status code
func (o *GetBackupDestinationNamesUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get backup destination names unauthorized response has a 5xx status code
func (o *GetBackupDestinationNamesUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get backup destination names unauthorized response a status code equal to that given
func (o *GetBackupDestinationNamesUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *GetBackupDestinationNamesUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/v2/projects/{project_id}/clusters/{cluster_id}/backupdestinations][%d] getBackupDestinationNamesUnauthorized ", 401)
}

func (o *GetBackupDestinationNamesUnauthorized) String() string {
	return fmt.Sprintf("[GET /api/v2/projects/{project_id}/clusters/{cluster_id}/backupdestinations][%d] getBackupDestinationNamesUnauthorized ", 401)
}

func (o *GetBackupDestinationNamesUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetBackupDestinationNamesForbidden creates a GetBackupDestinationNamesForbidden with default headers values
func NewGetBackupDestinationNamesForbidden() *GetBackupDestinationNamesForbidden {
	return &GetBackupDestinationNamesForbidden{}
}

/*
GetBackupDestinationNamesForbidden describes a response with status code 403, with default header values.

EmptyResponse is a empty response
*/
type GetBackupDestinationNamesForbidden struct {
}

// IsSuccess returns true when this get backup destination names forbidden response has a 2xx status code
func (o *GetBackupDestinationNamesForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get backup destination names forbidden response has a 3xx status code
func (o *GetBackupDestinationNamesForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get backup destination names forbidden response has a 4xx status code
func (o *GetBackupDestinationNamesForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get backup destination names forbidden response has a 5xx status code
func (o *GetBackupDestinationNamesForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get backup destination names forbidden response a status code equal to that given
func (o *GetBackupDestinationNamesForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *GetBackupDestinationNamesForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v2/projects/{project_id}/clusters/{cluster_id}/backupdestinations][%d] getBackupDestinationNamesForbidden ", 403)
}

func (o *GetBackupDestinationNamesForbidden) String() string {
	return fmt.Sprintf("[GET /api/v2/projects/{project_id}/clusters/{cluster_id}/backupdestinations][%d] getBackupDestinationNamesForbidden ", 403)
}

func (o *GetBackupDestinationNamesForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetBackupDestinationNamesDefault creates a GetBackupDestinationNamesDefault with default headers values
func NewGetBackupDestinationNamesDefault(code int) *GetBackupDestinationNamesDefault {
	return &GetBackupDestinationNamesDefault{
		_statusCode: code,
	}
}

/*
GetBackupDestinationNamesDefault describes a response with status code -1, with default header values.

errorResponse
*/
type GetBackupDestinationNamesDefault struct {
	_statusCode int

	Payload *models.ErrorResponse
}

// Code gets the status code for the get backup destination names default response
func (o *GetBackupDestinationNamesDefault) Code() int {
	return o._statusCode
}

// IsSuccess returns true when this get backup destination names default response has a 2xx status code
func (o *GetBackupDestinationNamesDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this get backup destination names default response has a 3xx status code
func (o *GetBackupDestinationNamesDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this get backup destination names default response has a 4xx status code
func (o *GetBackupDestinationNamesDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this get backup destination names default response has a 5xx status code
func (o *GetBackupDestinationNamesDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this get backup destination names default response a status code equal to that given
func (o *GetBackupDestinationNamesDefault) IsCode(code int) bool {
	return o._statusCode == code
}

func (o *GetBackupDestinationNamesDefault) Error() string {
	return fmt.Sprintf("[GET /api/v2/projects/{project_id}/clusters/{cluster_id}/backupdestinations][%d] getBackupDestinationNames default  %+v", o._statusCode, o.Payload)
}

func (o *GetBackupDestinationNamesDefault) String() string {
	return fmt.Sprintf("[GET /api/v2/projects/{project_id}/clusters/{cluster_id}/backupdestinations][%d] getBackupDestinationNames default  %+v", o._statusCode, o.Payload)
}

func (o *GetBackupDestinationNamesDefault) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetBackupDestinationNamesDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
