// Code generated by go-swagger; DO NOT EDIT.

package operatingsystemprofile

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"k8c.io/kubermatic/v2/pkg/test/e2e/utils/apiclient/models"
)

// ListOperatingSystemProfilesForClusterReader is a Reader for the ListOperatingSystemProfilesForCluster structure.
type ListOperatingSystemProfilesForClusterReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListOperatingSystemProfilesForClusterReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewListOperatingSystemProfilesForClusterOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewListOperatingSystemProfilesForClusterUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewListOperatingSystemProfilesForClusterForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewListOperatingSystemProfilesForClusterDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewListOperatingSystemProfilesForClusterOK creates a ListOperatingSystemProfilesForClusterOK with default headers values
func NewListOperatingSystemProfilesForClusterOK() *ListOperatingSystemProfilesForClusterOK {
	return &ListOperatingSystemProfilesForClusterOK{}
}

/* ListOperatingSystemProfilesForClusterOK describes a response with status code 200, with default header values.

OperatingSystemProfile
*/
type ListOperatingSystemProfilesForClusterOK struct {
	Payload []*models.OperatingSystemProfile
}

func (o *ListOperatingSystemProfilesForClusterOK) Error() string {
	return fmt.Sprintf("[GET /projects/{project_id}/clusters/{cluster_id}/operatingsystemprofiles][%d] listOperatingSystemProfilesForClusterOK  %+v", 200, o.Payload)
}
func (o *ListOperatingSystemProfilesForClusterOK) GetPayload() []*models.OperatingSystemProfile {
	return o.Payload
}

func (o *ListOperatingSystemProfilesForClusterOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListOperatingSystemProfilesForClusterUnauthorized creates a ListOperatingSystemProfilesForClusterUnauthorized with default headers values
func NewListOperatingSystemProfilesForClusterUnauthorized() *ListOperatingSystemProfilesForClusterUnauthorized {
	return &ListOperatingSystemProfilesForClusterUnauthorized{}
}

/* ListOperatingSystemProfilesForClusterUnauthorized describes a response with status code 401, with default header values.

EmptyResponse is a empty response
*/
type ListOperatingSystemProfilesForClusterUnauthorized struct {
}

func (o *ListOperatingSystemProfilesForClusterUnauthorized) Error() string {
	return fmt.Sprintf("[GET /projects/{project_id}/clusters/{cluster_id}/operatingsystemprofiles][%d] listOperatingSystemProfilesForClusterUnauthorized ", 401)
}

func (o *ListOperatingSystemProfilesForClusterUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewListOperatingSystemProfilesForClusterForbidden creates a ListOperatingSystemProfilesForClusterForbidden with default headers values
func NewListOperatingSystemProfilesForClusterForbidden() *ListOperatingSystemProfilesForClusterForbidden {
	return &ListOperatingSystemProfilesForClusterForbidden{}
}

/* ListOperatingSystemProfilesForClusterForbidden describes a response with status code 403, with default header values.

EmptyResponse is a empty response
*/
type ListOperatingSystemProfilesForClusterForbidden struct {
}

func (o *ListOperatingSystemProfilesForClusterForbidden) Error() string {
	return fmt.Sprintf("[GET /projects/{project_id}/clusters/{cluster_id}/operatingsystemprofiles][%d] listOperatingSystemProfilesForClusterForbidden ", 403)
}

func (o *ListOperatingSystemProfilesForClusterForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewListOperatingSystemProfilesForClusterDefault creates a ListOperatingSystemProfilesForClusterDefault with default headers values
func NewListOperatingSystemProfilesForClusterDefault(code int) *ListOperatingSystemProfilesForClusterDefault {
	return &ListOperatingSystemProfilesForClusterDefault{
		_statusCode: code,
	}
}

/* ListOperatingSystemProfilesForClusterDefault describes a response with status code -1, with default header values.

errorResponse
*/
type ListOperatingSystemProfilesForClusterDefault struct {
	_statusCode int

	Payload *models.ErrorResponse
}

// Code gets the status code for the list operating system profiles for cluster default response
func (o *ListOperatingSystemProfilesForClusterDefault) Code() int {
	return o._statusCode
}

func (o *ListOperatingSystemProfilesForClusterDefault) Error() string {
	return fmt.Sprintf("[GET /projects/{project_id}/clusters/{cluster_id}/operatingsystemprofiles][%d] listOperatingSystemProfilesForCluster default  %+v", o._statusCode, o.Payload)
}
func (o *ListOperatingSystemProfilesForClusterDefault) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *ListOperatingSystemProfilesForClusterDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
