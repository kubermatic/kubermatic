// Code generated by go-swagger; DO NOT EDIT.

package tokens

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new tokens API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for tokens API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	AddTokenToMainServiceAccount(params *AddTokenToMainServiceAccountParams, authInfo runtime.ClientAuthInfoWriter) (*AddTokenToMainServiceAccountCreated, error)

	AddTokenToServiceAccount(params *AddTokenToServiceAccountParams, authInfo runtime.ClientAuthInfoWriter) (*AddTokenToServiceAccountCreated, error)

	DeleteMainServiceAccountToken(params *DeleteMainServiceAccountTokenParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteMainServiceAccountTokenOK, error)

	DeleteServiceAccountToken(params *DeleteServiceAccountTokenParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteServiceAccountTokenOK, error)

	ListMainServiceAccountTokens(params *ListMainServiceAccountTokensParams, authInfo runtime.ClientAuthInfoWriter) (*ListMainServiceAccountTokensOK, error)

	ListServiceAccountTokens(params *ListServiceAccountTokensParams, authInfo runtime.ClientAuthInfoWriter) (*ListServiceAccountTokensOK, error)

	PatchMainServiceAccountToken(params *PatchMainServiceAccountTokenParams, authInfo runtime.ClientAuthInfoWriter) (*PatchMainServiceAccountTokenOK, error)

	PatchServiceAccountToken(params *PatchServiceAccountTokenParams, authInfo runtime.ClientAuthInfoWriter) (*PatchServiceAccountTokenOK, error)

	UpdateMainServiceAccountToken(params *UpdateMainServiceAccountTokenParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateMainServiceAccountTokenOK, error)

	UpdateServiceAccountToken(params *UpdateServiceAccountTokenParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateServiceAccountTokenOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  AddTokenToMainServiceAccount Generates a token for the given main service account
*/
func (a *Client) AddTokenToMainServiceAccount(params *AddTokenToMainServiceAccountParams, authInfo runtime.ClientAuthInfoWriter) (*AddTokenToMainServiceAccountCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddTokenToMainServiceAccountParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "addTokenToMainServiceAccount",
		Method:             "POST",
		PathPattern:        "/api/v2/serviceaccounts/{serviceaccount_id}/tokens",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddTokenToMainServiceAccountReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddTokenToMainServiceAccountCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AddTokenToMainServiceAccountDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  AddTokenToServiceAccount Generates a token for the given service account
*/
func (a *Client) AddTokenToServiceAccount(params *AddTokenToServiceAccountParams, authInfo runtime.ClientAuthInfoWriter) (*AddTokenToServiceAccountCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddTokenToServiceAccountParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "addTokenToServiceAccount",
		Method:             "POST",
		PathPattern:        "/api/v1/projects/{project_id}/serviceaccounts/{serviceaccount_id}/tokens",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddTokenToServiceAccountReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddTokenToServiceAccountCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AddTokenToServiceAccountDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DeleteMainServiceAccountToken Deletes the token
*/
func (a *Client) DeleteMainServiceAccountToken(params *DeleteMainServiceAccountTokenParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteMainServiceAccountTokenOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteMainServiceAccountTokenParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteMainServiceAccountToken",
		Method:             "DELETE",
		PathPattern:        "/api/v2/serviceaccounts/{serviceaccount_id}/tokens/{token_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteMainServiceAccountTokenReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteMainServiceAccountTokenOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteMainServiceAccountTokenDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DeleteServiceAccountToken Deletes the token
*/
func (a *Client) DeleteServiceAccountToken(params *DeleteServiceAccountTokenParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteServiceAccountTokenOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteServiceAccountTokenParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteServiceAccountToken",
		Method:             "DELETE",
		PathPattern:        "/api/v1/projects/{project_id}/serviceaccounts/{serviceaccount_id}/tokens/{token_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteServiceAccountTokenReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteServiceAccountTokenOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteServiceAccountTokenDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ListMainServiceAccountTokens List tokens for the given main service account
*/
func (a *Client) ListMainServiceAccountTokens(params *ListMainServiceAccountTokensParams, authInfo runtime.ClientAuthInfoWriter) (*ListMainServiceAccountTokensOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListMainServiceAccountTokensParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listMainServiceAccountTokens",
		Method:             "GET",
		PathPattern:        "/api/v2/serviceaccounts/{serviceaccount_id}/tokens",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListMainServiceAccountTokensReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListMainServiceAccountTokensOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListMainServiceAccountTokensDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ListServiceAccountTokens List tokens for the given service account
*/
func (a *Client) ListServiceAccountTokens(params *ListServiceAccountTokensParams, authInfo runtime.ClientAuthInfoWriter) (*ListServiceAccountTokensOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListServiceAccountTokensParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listServiceAccountTokens",
		Method:             "GET",
		PathPattern:        "/api/v1/projects/{project_id}/serviceaccounts/{serviceaccount_id}/tokens",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListServiceAccountTokensReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListServiceAccountTokensOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListServiceAccountTokensDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  PatchMainServiceAccountToken Patches the token name
*/
func (a *Client) PatchMainServiceAccountToken(params *PatchMainServiceAccountTokenParams, authInfo runtime.ClientAuthInfoWriter) (*PatchMainServiceAccountTokenOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchMainServiceAccountTokenParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchMainServiceAccountToken",
		Method:             "PATCH",
		PathPattern:        "/api/v2/serviceaccounts/{serviceaccount_id}/tokens/{token_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchMainServiceAccountTokenReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchMainServiceAccountTokenOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PatchMainServiceAccountTokenDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  PatchServiceAccountToken Patches the token name
*/
func (a *Client) PatchServiceAccountToken(params *PatchServiceAccountTokenParams, authInfo runtime.ClientAuthInfoWriter) (*PatchServiceAccountTokenOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchServiceAccountTokenParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchServiceAccountToken",
		Method:             "PATCH",
		PathPattern:        "/api/v1/projects/{project_id}/serviceaccounts/{serviceaccount_id}/tokens/{token_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchServiceAccountTokenReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchServiceAccountTokenOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PatchServiceAccountTokenDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  UpdateMainServiceAccountToken Updates and regenerates the token
*/
func (a *Client) UpdateMainServiceAccountToken(params *UpdateMainServiceAccountTokenParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateMainServiceAccountTokenOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateMainServiceAccountTokenParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateMainServiceAccountToken",
		Method:             "PUT",
		PathPattern:        "/api/v2/serviceaccounts/{serviceaccount_id}/tokens/{token_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateMainServiceAccountTokenReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateMainServiceAccountTokenOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateMainServiceAccountTokenDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  UpdateServiceAccountToken Updates and regenerates the token
*/
func (a *Client) UpdateServiceAccountToken(params *UpdateServiceAccountTokenParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateServiceAccountTokenOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateServiceAccountTokenParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateServiceAccountToken",
		Method:             "PUT",
		PathPattern:        "/api/v1/projects/{project_id}/serviceaccounts/{serviceaccount_id}/tokens/{token_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateServiceAccountTokenReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateServiceAccountTokenOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateServiceAccountTokenDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
