// Code generated by go-swagger; DO NOT EDIT.

package tokens

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"k8c.io/kubermatic/v2/pkg/test/e2e/utils/apiclient/models"
)

// AddTokenToServiceAccountReader is a Reader for the AddTokenToServiceAccount structure.
type AddTokenToServiceAccountReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AddTokenToServiceAccountReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewAddTokenToServiceAccountCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewAddTokenToServiceAccountUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewAddTokenToServiceAccountForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewAddTokenToServiceAccountDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewAddTokenToServiceAccountCreated creates a AddTokenToServiceAccountCreated with default headers values
func NewAddTokenToServiceAccountCreated() *AddTokenToServiceAccountCreated {
	return &AddTokenToServiceAccountCreated{}
}

/* AddTokenToServiceAccountCreated describes a response with status code 201, with default header values.

ServiceAccountToken
*/
type AddTokenToServiceAccountCreated struct {
	Payload *models.ServiceAccountToken
}

// IsSuccess returns true when this add token to service account created response has a 2xx status code
func (o *AddTokenToServiceAccountCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this add token to service account created response has a 3xx status code
func (o *AddTokenToServiceAccountCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this add token to service account created response has a 4xx status code
func (o *AddTokenToServiceAccountCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this add token to service account created response has a 5xx status code
func (o *AddTokenToServiceAccountCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this add token to service account created response a status code equal to that given
func (o *AddTokenToServiceAccountCreated) IsCode(code int) bool {
	return code == 201
}

func (o *AddTokenToServiceAccountCreated) Error() string {
	return fmt.Sprintf("[POST /api/v1/projects/{project_id}/serviceaccounts/{serviceaccount_id}/tokens][%d] addTokenToServiceAccountCreated  %+v", 201, o.Payload)
}

func (o *AddTokenToServiceAccountCreated) String() string {
	return fmt.Sprintf("[POST /api/v1/projects/{project_id}/serviceaccounts/{serviceaccount_id}/tokens][%d] addTokenToServiceAccountCreated  %+v", 201, o.Payload)
}

func (o *AddTokenToServiceAccountCreated) GetPayload() *models.ServiceAccountToken {
	return o.Payload
}

func (o *AddTokenToServiceAccountCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ServiceAccountToken)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddTokenToServiceAccountUnauthorized creates a AddTokenToServiceAccountUnauthorized with default headers values
func NewAddTokenToServiceAccountUnauthorized() *AddTokenToServiceAccountUnauthorized {
	return &AddTokenToServiceAccountUnauthorized{}
}

/* AddTokenToServiceAccountUnauthorized describes a response with status code 401, with default header values.

EmptyResponse is a empty response
*/
type AddTokenToServiceAccountUnauthorized struct {
}

// IsSuccess returns true when this add token to service account unauthorized response has a 2xx status code
func (o *AddTokenToServiceAccountUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this add token to service account unauthorized response has a 3xx status code
func (o *AddTokenToServiceAccountUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this add token to service account unauthorized response has a 4xx status code
func (o *AddTokenToServiceAccountUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this add token to service account unauthorized response has a 5xx status code
func (o *AddTokenToServiceAccountUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this add token to service account unauthorized response a status code equal to that given
func (o *AddTokenToServiceAccountUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *AddTokenToServiceAccountUnauthorized) Error() string {
	return fmt.Sprintf("[POST /api/v1/projects/{project_id}/serviceaccounts/{serviceaccount_id}/tokens][%d] addTokenToServiceAccountUnauthorized ", 401)
}

func (o *AddTokenToServiceAccountUnauthorized) String() string {
	return fmt.Sprintf("[POST /api/v1/projects/{project_id}/serviceaccounts/{serviceaccount_id}/tokens][%d] addTokenToServiceAccountUnauthorized ", 401)
}

func (o *AddTokenToServiceAccountUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewAddTokenToServiceAccountForbidden creates a AddTokenToServiceAccountForbidden with default headers values
func NewAddTokenToServiceAccountForbidden() *AddTokenToServiceAccountForbidden {
	return &AddTokenToServiceAccountForbidden{}
}

/* AddTokenToServiceAccountForbidden describes a response with status code 403, with default header values.

EmptyResponse is a empty response
*/
type AddTokenToServiceAccountForbidden struct {
}

// IsSuccess returns true when this add token to service account forbidden response has a 2xx status code
func (o *AddTokenToServiceAccountForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this add token to service account forbidden response has a 3xx status code
func (o *AddTokenToServiceAccountForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this add token to service account forbidden response has a 4xx status code
func (o *AddTokenToServiceAccountForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this add token to service account forbidden response has a 5xx status code
func (o *AddTokenToServiceAccountForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this add token to service account forbidden response a status code equal to that given
func (o *AddTokenToServiceAccountForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *AddTokenToServiceAccountForbidden) Error() string {
	return fmt.Sprintf("[POST /api/v1/projects/{project_id}/serviceaccounts/{serviceaccount_id}/tokens][%d] addTokenToServiceAccountForbidden ", 403)
}

func (o *AddTokenToServiceAccountForbidden) String() string {
	return fmt.Sprintf("[POST /api/v1/projects/{project_id}/serviceaccounts/{serviceaccount_id}/tokens][%d] addTokenToServiceAccountForbidden ", 403)
}

func (o *AddTokenToServiceAccountForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewAddTokenToServiceAccountDefault creates a AddTokenToServiceAccountDefault with default headers values
func NewAddTokenToServiceAccountDefault(code int) *AddTokenToServiceAccountDefault {
	return &AddTokenToServiceAccountDefault{
		_statusCode: code,
	}
}

/* AddTokenToServiceAccountDefault describes a response with status code -1, with default header values.

errorResponse
*/
type AddTokenToServiceAccountDefault struct {
	_statusCode int

	Payload *models.ErrorResponse
}

// Code gets the status code for the add token to service account default response
func (o *AddTokenToServiceAccountDefault) Code() int {
	return o._statusCode
}

// IsSuccess returns true when this add token to service account default response has a 2xx status code
func (o *AddTokenToServiceAccountDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this add token to service account default response has a 3xx status code
func (o *AddTokenToServiceAccountDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this add token to service account default response has a 4xx status code
func (o *AddTokenToServiceAccountDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this add token to service account default response has a 5xx status code
func (o *AddTokenToServiceAccountDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this add token to service account default response a status code equal to that given
func (o *AddTokenToServiceAccountDefault) IsCode(code int) bool {
	return o._statusCode == code
}

func (o *AddTokenToServiceAccountDefault) Error() string {
	return fmt.Sprintf("[POST /api/v1/projects/{project_id}/serviceaccounts/{serviceaccount_id}/tokens][%d] addTokenToServiceAccount default  %+v", o._statusCode, o.Payload)
}

func (o *AddTokenToServiceAccountDefault) String() string {
	return fmt.Sprintf("[POST /api/v1/projects/{project_id}/serviceaccounts/{serviceaccount_id}/tokens][%d] addTokenToServiceAccount default  %+v", o._statusCode, o.Payload)
}

func (o *AddTokenToServiceAccountDefault) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *AddTokenToServiceAccountDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
