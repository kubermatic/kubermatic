// Code generated by go-swagger; DO NOT EDIT.

package tokens

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewListMainServiceAccountTokensParams creates a new ListMainServiceAccountTokensParams object
// with the default values initialized.
func NewListMainServiceAccountTokensParams() *ListMainServiceAccountTokensParams {
	var ()
	return &ListMainServiceAccountTokensParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewListMainServiceAccountTokensParamsWithTimeout creates a new ListMainServiceAccountTokensParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewListMainServiceAccountTokensParamsWithTimeout(timeout time.Duration) *ListMainServiceAccountTokensParams {
	var ()
	return &ListMainServiceAccountTokensParams{

		timeout: timeout,
	}
}

// NewListMainServiceAccountTokensParamsWithContext creates a new ListMainServiceAccountTokensParams object
// with the default values initialized, and the ability to set a context for a request
func NewListMainServiceAccountTokensParamsWithContext(ctx context.Context) *ListMainServiceAccountTokensParams {
	var ()
	return &ListMainServiceAccountTokensParams{

		Context: ctx,
	}
}

// NewListMainServiceAccountTokensParamsWithHTTPClient creates a new ListMainServiceAccountTokensParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewListMainServiceAccountTokensParamsWithHTTPClient(client *http.Client) *ListMainServiceAccountTokensParams {
	var ()
	return &ListMainServiceAccountTokensParams{
		HTTPClient: client,
	}
}

/*ListMainServiceAccountTokensParams contains all the parameters to send to the API endpoint
for the list main service account tokens operation typically these are written to a http.Request
*/
type ListMainServiceAccountTokensParams struct {

	/*ServiceaccountID*/
	ServiceAccountID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the list main service account tokens params
func (o *ListMainServiceAccountTokensParams) WithTimeout(timeout time.Duration) *ListMainServiceAccountTokensParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the list main service account tokens params
func (o *ListMainServiceAccountTokensParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the list main service account tokens params
func (o *ListMainServiceAccountTokensParams) WithContext(ctx context.Context) *ListMainServiceAccountTokensParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the list main service account tokens params
func (o *ListMainServiceAccountTokensParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the list main service account tokens params
func (o *ListMainServiceAccountTokensParams) WithHTTPClient(client *http.Client) *ListMainServiceAccountTokensParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the list main service account tokens params
func (o *ListMainServiceAccountTokensParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithServiceAccountID adds the serviceaccountID to the list main service account tokens params
func (o *ListMainServiceAccountTokensParams) WithServiceAccountID(serviceaccountID string) *ListMainServiceAccountTokensParams {
	o.SetServiceAccountID(serviceaccountID)
	return o
}

// SetServiceAccountID adds the serviceaccountId to the list main service account tokens params
func (o *ListMainServiceAccountTokensParams) SetServiceAccountID(serviceaccountID string) {
	o.ServiceAccountID = serviceaccountID
}

// WriteToRequest writes these params to a swagger request
func (o *ListMainServiceAccountTokensParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param serviceaccount_id
	if err := r.SetPathParam("serviceaccount_id", o.ServiceAccountID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
