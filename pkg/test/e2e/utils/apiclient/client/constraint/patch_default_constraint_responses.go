// Code generated by go-swagger; DO NOT EDIT.

package constraint

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"k8c.io/kubermatic/v2/pkg/test/e2e/utils/apiclient/models"
)

// PatchDefaultConstraintReader is a Reader for the PatchDefaultConstraint structure.
type PatchDefaultConstraintReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchDefaultConstraintReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPatchDefaultConstraintOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewPatchDefaultConstraintUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPatchDefaultConstraintForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewPatchDefaultConstraintDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewPatchDefaultConstraintOK creates a PatchDefaultConstraintOK with default headers values
func NewPatchDefaultConstraintOK() *PatchDefaultConstraintOK {
	return &PatchDefaultConstraintOK{}
}

/*
PatchDefaultConstraintOK describes a response with status code 200, with default header values.

Constraint
*/
type PatchDefaultConstraintOK struct {
	Payload *models.Constraint
}

// IsSuccess returns true when this patch default constraint o k response has a 2xx status code
func (o *PatchDefaultConstraintOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this patch default constraint o k response has a 3xx status code
func (o *PatchDefaultConstraintOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch default constraint o k response has a 4xx status code
func (o *PatchDefaultConstraintOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch default constraint o k response has a 5xx status code
func (o *PatchDefaultConstraintOK) IsServerError() bool {
	return false
}

// IsCode returns true when this patch default constraint o k response a status code equal to that given
func (o *PatchDefaultConstraintOK) IsCode(code int) bool {
	return code == 200
}

func (o *PatchDefaultConstraintOK) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/constraints/{constraint_name}][%d] patchDefaultConstraintOK  %+v", 200, o.Payload)
}

func (o *PatchDefaultConstraintOK) String() string {
	return fmt.Sprintf("[PATCH /api/v2/constraints/{constraint_name}][%d] patchDefaultConstraintOK  %+v", 200, o.Payload)
}

func (o *PatchDefaultConstraintOK) GetPayload() *models.Constraint {
	return o.Payload
}

func (o *PatchDefaultConstraintOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Constraint)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchDefaultConstraintUnauthorized creates a PatchDefaultConstraintUnauthorized with default headers values
func NewPatchDefaultConstraintUnauthorized() *PatchDefaultConstraintUnauthorized {
	return &PatchDefaultConstraintUnauthorized{}
}

/*
PatchDefaultConstraintUnauthorized describes a response with status code 401, with default header values.

EmptyResponse is a empty response
*/
type PatchDefaultConstraintUnauthorized struct {
}

// IsSuccess returns true when this patch default constraint unauthorized response has a 2xx status code
func (o *PatchDefaultConstraintUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch default constraint unauthorized response has a 3xx status code
func (o *PatchDefaultConstraintUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch default constraint unauthorized response has a 4xx status code
func (o *PatchDefaultConstraintUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch default constraint unauthorized response has a 5xx status code
func (o *PatchDefaultConstraintUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this patch default constraint unauthorized response a status code equal to that given
func (o *PatchDefaultConstraintUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *PatchDefaultConstraintUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/constraints/{constraint_name}][%d] patchDefaultConstraintUnauthorized ", 401)
}

func (o *PatchDefaultConstraintUnauthorized) String() string {
	return fmt.Sprintf("[PATCH /api/v2/constraints/{constraint_name}][%d] patchDefaultConstraintUnauthorized ", 401)
}

func (o *PatchDefaultConstraintUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPatchDefaultConstraintForbidden creates a PatchDefaultConstraintForbidden with default headers values
func NewPatchDefaultConstraintForbidden() *PatchDefaultConstraintForbidden {
	return &PatchDefaultConstraintForbidden{}
}

/*
PatchDefaultConstraintForbidden describes a response with status code 403, with default header values.

EmptyResponse is a empty response
*/
type PatchDefaultConstraintForbidden struct {
}

// IsSuccess returns true when this patch default constraint forbidden response has a 2xx status code
func (o *PatchDefaultConstraintForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch default constraint forbidden response has a 3xx status code
func (o *PatchDefaultConstraintForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch default constraint forbidden response has a 4xx status code
func (o *PatchDefaultConstraintForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch default constraint forbidden response has a 5xx status code
func (o *PatchDefaultConstraintForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this patch default constraint forbidden response a status code equal to that given
func (o *PatchDefaultConstraintForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *PatchDefaultConstraintForbidden) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/constraints/{constraint_name}][%d] patchDefaultConstraintForbidden ", 403)
}

func (o *PatchDefaultConstraintForbidden) String() string {
	return fmt.Sprintf("[PATCH /api/v2/constraints/{constraint_name}][%d] patchDefaultConstraintForbidden ", 403)
}

func (o *PatchDefaultConstraintForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPatchDefaultConstraintDefault creates a PatchDefaultConstraintDefault with default headers values
func NewPatchDefaultConstraintDefault(code int) *PatchDefaultConstraintDefault {
	return &PatchDefaultConstraintDefault{
		_statusCode: code,
	}
}

/*
PatchDefaultConstraintDefault describes a response with status code -1, with default header values.

errorResponse
*/
type PatchDefaultConstraintDefault struct {
	_statusCode int

	Payload *models.ErrorResponse
}

// Code gets the status code for the patch default constraint default response
func (o *PatchDefaultConstraintDefault) Code() int {
	return o._statusCode
}

// IsSuccess returns true when this patch default constraint default response has a 2xx status code
func (o *PatchDefaultConstraintDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this patch default constraint default response has a 3xx status code
func (o *PatchDefaultConstraintDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this patch default constraint default response has a 4xx status code
func (o *PatchDefaultConstraintDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this patch default constraint default response has a 5xx status code
func (o *PatchDefaultConstraintDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this patch default constraint default response a status code equal to that given
func (o *PatchDefaultConstraintDefault) IsCode(code int) bool {
	return o._statusCode == code
}

func (o *PatchDefaultConstraintDefault) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/constraints/{constraint_name}][%d] patchDefaultConstraint default  %+v", o._statusCode, o.Payload)
}

func (o *PatchDefaultConstraintDefault) String() string {
	return fmt.Sprintf("[PATCH /api/v2/constraints/{constraint_name}][%d] patchDefaultConstraint default  %+v", o._statusCode, o.Payload)
}

func (o *PatchDefaultConstraintDefault) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *PatchDefaultConstraintDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
