// Code generated by go-swagger; DO NOT EDIT.

package etcdrestore

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new etcdrestore API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for etcdrestore API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateEtcdRestore(params *CreateEtcdRestoreParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateEtcdRestoreCreated, error)

	DeleteEtcdRestore(params *DeleteEtcdRestoreParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteEtcdRestoreOK, error)

	GetEtcdRestore(params *GetEtcdRestoreParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetEtcdRestoreOK, error)

	ListEtcdRestore(params *ListEtcdRestoreParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListEtcdRestoreOK, error)

	ListProjectEtcdRestore(params *ListProjectEtcdRestoreParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListProjectEtcdRestoreOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateEtcdRestore Creates a etcd backup restore for a given cluster
*/
func (a *Client) CreateEtcdRestore(params *CreateEtcdRestoreParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateEtcdRestoreCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateEtcdRestoreParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createEtcdRestore",
		Method:             "POST",
		PathPattern:        "/api/v2/projects/{project_id}/clusters/{cluster_id}/etcdrestores",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateEtcdRestoreReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateEtcdRestoreCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateEtcdRestoreDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DeleteEtcdRestore Deletes a etcd restore config for a given cluster based on its name
*/
func (a *Client) DeleteEtcdRestore(params *DeleteEtcdRestoreParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteEtcdRestoreOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteEtcdRestoreParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteEtcdRestore",
		Method:             "DELETE",
		PathPattern:        "/api/v2/projects/{project_id}/clusters/{cluster_id}/etcdrestores/{er_name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteEtcdRestoreReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteEtcdRestoreOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteEtcdRestoreDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetEtcdRestore Gets a etcd backup restore for a given cluster based on its name
*/
func (a *Client) GetEtcdRestore(params *GetEtcdRestoreParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetEtcdRestoreOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEtcdRestoreParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getEtcdRestore",
		Method:             "GET",
		PathPattern:        "/api/v2/projects/{project_id}/clusters/{cluster_id}/etcdrestores/{er_name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetEtcdRestoreReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetEtcdRestoreOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetEtcdRestoreDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ListEtcdRestore List etcd backup restores for a given cluster
*/
func (a *Client) ListEtcdRestore(params *ListEtcdRestoreParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListEtcdRestoreOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListEtcdRestoreParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listEtcdRestore",
		Method:             "GET",
		PathPattern:        "/api/v2/projects/{project_id}/clusters/{cluster_id}/etcdrestores",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListEtcdRestoreReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListEtcdRestoreOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListEtcdRestoreDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ListProjectEtcdRestore List etcd backup restores for a given project
*/
func (a *Client) ListProjectEtcdRestore(params *ListProjectEtcdRestoreParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListProjectEtcdRestoreOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListProjectEtcdRestoreParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listProjectEtcdRestore",
		Method:             "GET",
		PathPattern:        "/api/v2/projects/{project_id}/etcdrestores",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListProjectEtcdRestoreReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListProjectEtcdRestoreOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListProjectEtcdRestoreDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
