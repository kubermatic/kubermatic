// Code generated by go-swagger; DO NOT EDIT.

package gke

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"k8c.io/kubermatic/v2/pkg/test/e2e/utils/apiclient/models"
)

// ListProjectGKEDiskTypesReader is a Reader for the ListProjectGKEDiskTypes structure.
type ListProjectGKEDiskTypesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListProjectGKEDiskTypesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewListProjectGKEDiskTypesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewListProjectGKEDiskTypesDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewListProjectGKEDiskTypesOK creates a ListProjectGKEDiskTypesOK with default headers values
func NewListProjectGKEDiskTypesOK() *ListProjectGKEDiskTypesOK {
	return &ListProjectGKEDiskTypesOK{}
}

/*
ListProjectGKEDiskTypesOK describes a response with status code 200, with default header values.

GKEDiskTypeList
*/
type ListProjectGKEDiskTypesOK struct {
	Payload models.GKEDiskTypeList
}

// IsSuccess returns true when this list project g k e disk types o k response has a 2xx status code
func (o *ListProjectGKEDiskTypesOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this list project g k e disk types o k response has a 3xx status code
func (o *ListProjectGKEDiskTypesOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list project g k e disk types o k response has a 4xx status code
func (o *ListProjectGKEDiskTypesOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this list project g k e disk types o k response has a 5xx status code
func (o *ListProjectGKEDiskTypesOK) IsServerError() bool {
	return false
}

// IsCode returns true when this list project g k e disk types o k response a status code equal to that given
func (o *ListProjectGKEDiskTypesOK) IsCode(code int) bool {
	return code == 200
}

func (o *ListProjectGKEDiskTypesOK) Error() string {
	return fmt.Sprintf("[GET /api/v2/projects/{project_id}/providers/gke/disktypes][%d] listProjectGKEDiskTypesOK  %+v", 200, o.Payload)
}

func (o *ListProjectGKEDiskTypesOK) String() string {
	return fmt.Sprintf("[GET /api/v2/projects/{project_id}/providers/gke/disktypes][%d] listProjectGKEDiskTypesOK  %+v", 200, o.Payload)
}

func (o *ListProjectGKEDiskTypesOK) GetPayload() models.GKEDiskTypeList {
	return o.Payload
}

func (o *ListProjectGKEDiskTypesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListProjectGKEDiskTypesDefault creates a ListProjectGKEDiskTypesDefault with default headers values
func NewListProjectGKEDiskTypesDefault(code int) *ListProjectGKEDiskTypesDefault {
	return &ListProjectGKEDiskTypesDefault{
		_statusCode: code,
	}
}

/*
ListProjectGKEDiskTypesDefault describes a response with status code -1, with default header values.

errorResponse
*/
type ListProjectGKEDiskTypesDefault struct {
	_statusCode int

	Payload *models.ErrorResponse
}

// Code gets the status code for the list project g k e disk types default response
func (o *ListProjectGKEDiskTypesDefault) Code() int {
	return o._statusCode
}

// IsSuccess returns true when this list project g k e disk types default response has a 2xx status code
func (o *ListProjectGKEDiskTypesDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this list project g k e disk types default response has a 3xx status code
func (o *ListProjectGKEDiskTypesDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this list project g k e disk types default response has a 4xx status code
func (o *ListProjectGKEDiskTypesDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this list project g k e disk types default response has a 5xx status code
func (o *ListProjectGKEDiskTypesDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this list project g k e disk types default response a status code equal to that given
func (o *ListProjectGKEDiskTypesDefault) IsCode(code int) bool {
	return o._statusCode == code
}

func (o *ListProjectGKEDiskTypesDefault) Error() string {
	return fmt.Sprintf("[GET /api/v2/projects/{project_id}/providers/gke/disktypes][%d] listProjectGKEDiskTypes default  %+v", o._statusCode, o.Payload)
}

func (o *ListProjectGKEDiskTypesDefault) String() string {
	return fmt.Sprintf("[GET /api/v2/projects/{project_id}/providers/gke/disktypes][%d] listProjectGKEDiskTypes default  %+v", o._statusCode, o.Payload)
}

func (o *ListProjectGKEDiskTypesDefault) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *ListProjectGKEDiskTypesDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
