// Code generated by go-swagger; DO NOT EDIT.

package ipampool

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new ipampool API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for ipampool API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateIPAMPool(params *CreateIPAMPoolParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateIPAMPoolCreated, error)

	DeleteIPAMPool(params *DeleteIPAMPoolParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteIPAMPoolOK, error)

	GetIPAMPool(params *GetIPAMPoolParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetIPAMPoolOK, error)

	ListIPAMPools(params *ListIPAMPoolsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListIPAMPoolsOK, error)

	PatchIPAMPool(params *PatchIPAMPoolParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchIPAMPoolOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CreateIPAMPool creates a IP a m pool
*/
func (a *Client) CreateIPAMPool(params *CreateIPAMPoolParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateIPAMPoolCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateIPAMPoolParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createIPAMPool",
		Method:             "POST",
		PathPattern:        "/api/v2/seeds/{seed_name}/ipampools",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateIPAMPoolReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateIPAMPoolCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateIPAMPoolDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteIPAMPool removes an existing IP a m pool
*/
func (a *Client) DeleteIPAMPool(params *DeleteIPAMPoolParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteIPAMPoolOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteIPAMPoolParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteIPAMPool",
		Method:             "DELETE",
		PathPattern:        "/api/v2/seeds/{seed_name}/ipampools/{ipampool_name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteIPAMPoolReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteIPAMPoolOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteIPAMPoolDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetIPAMPool gets a specific IP a m pool
*/
func (a *Client) GetIPAMPool(params *GetIPAMPoolParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetIPAMPoolOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIPAMPoolParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getIPAMPool",
		Method:             "GET",
		PathPattern:        "/api/v2/seeds/{seed_name}/ipampools/{ipampool_name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIPAMPoolReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetIPAMPoolOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetIPAMPoolDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ListIPAMPools lists IP a m pools
*/
func (a *Client) ListIPAMPools(params *ListIPAMPoolsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListIPAMPoolsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListIPAMPoolsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listIPAMPools",
		Method:             "GET",
		PathPattern:        "/api/v2/seeds/{seed_name}/ipampools",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListIPAMPoolsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListIPAMPoolsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListIPAMPoolsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PatchIPAMPool patches a IP a m pool
*/
func (a *Client) PatchIPAMPool(params *PatchIPAMPoolParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchIPAMPoolOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchIPAMPoolParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "patchIPAMPool",
		Method:             "PATCH",
		PathPattern:        "/api/v2/seeds/{seed_name}/ipampools/{ipampool_name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchIPAMPoolReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchIPAMPoolOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PatchIPAMPoolDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
