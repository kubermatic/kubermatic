// Code generated by go-swagger; DO NOT EDIT.

package mlaadminsetting

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new mlaadminsetting API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for mlaadminsetting API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateMLAAdminSetting(params *CreateMLAAdminSettingParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateMLAAdminSettingCreated, error)

	DeleteMLAAdminSetting(params *DeleteMLAAdminSettingParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteMLAAdminSettingOK, error)

	GetMLAAdminSetting(params *GetMLAAdminSettingParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetMLAAdminSettingOK, error)

	UpdateMLAAdminSetting(params *UpdateMLAAdminSettingParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateMLAAdminSettingOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateMLAAdminSetting Creates MLA admin setting that will belong to the given cluster
*/
func (a *Client) CreateMLAAdminSetting(params *CreateMLAAdminSettingParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateMLAAdminSettingCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateMLAAdminSettingParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createMLAAdminSetting",
		Method:             "POST",
		PathPattern:        "/api/v2/projects/{project_id}/clusters/{cluster_id}/mlaadminsetting",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateMLAAdminSettingReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateMLAAdminSettingCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateMLAAdminSettingDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DeleteMLAAdminSetting deletes the m l a admin setting that belongs to the cluster
*/
func (a *Client) DeleteMLAAdminSetting(params *DeleteMLAAdminSettingParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteMLAAdminSettingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteMLAAdminSettingParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteMLAAdminSetting",
		Method:             "DELETE",
		PathPattern:        "/api/v2/projects/{project_id}/clusters/{cluster_id}/mlaadminsetting",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteMLAAdminSettingReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteMLAAdminSettingOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteMLAAdminSettingDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetMLAAdminSetting gets m l a admin settings for the given cluster
*/
func (a *Client) GetMLAAdminSetting(params *GetMLAAdminSettingParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetMLAAdminSettingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMLAAdminSettingParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getMLAAdminSetting",
		Method:             "GET",
		PathPattern:        "/api/v2/projects/{project_id}/clusters/{cluster_id}/mlaadminsetting",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMLAAdminSettingReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetMLAAdminSettingOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetMLAAdminSettingDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  UpdateMLAAdminSetting updates the m l a admin setting for the given cluster
*/
func (a *Client) UpdateMLAAdminSetting(params *UpdateMLAAdminSettingParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateMLAAdminSettingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateMLAAdminSettingParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateMLAAdminSetting",
		Method:             "PUT",
		PathPattern:        "/api/v2/projects/{project_id}/clusters/{cluster_id}/mlaadminsetting",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateMLAAdminSettingReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateMLAAdminSettingOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateMLAAdminSettingDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
