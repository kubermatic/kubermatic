// Code generated by go-swagger; DO NOT EDIT.

package whitelistedregistries

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewPatchWhitelistedRegistryParams creates a new PatchWhitelistedRegistryParams object
// with the default values initialized.
func NewPatchWhitelistedRegistryParams() *PatchWhitelistedRegistryParams {
	var ()
	return &PatchWhitelistedRegistryParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewPatchWhitelistedRegistryParamsWithTimeout creates a new PatchWhitelistedRegistryParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPatchWhitelistedRegistryParamsWithTimeout(timeout time.Duration) *PatchWhitelistedRegistryParams {
	var ()
	return &PatchWhitelistedRegistryParams{

		timeout: timeout,
	}
}

// NewPatchWhitelistedRegistryParamsWithContext creates a new PatchWhitelistedRegistryParams object
// with the default values initialized, and the ability to set a context for a request
func NewPatchWhitelistedRegistryParamsWithContext(ctx context.Context) *PatchWhitelistedRegistryParams {
	var ()
	return &PatchWhitelistedRegistryParams{

		Context: ctx,
	}
}

// NewPatchWhitelistedRegistryParamsWithHTTPClient creates a new PatchWhitelistedRegistryParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewPatchWhitelistedRegistryParamsWithHTTPClient(client *http.Client) *PatchWhitelistedRegistryParams {
	var ()
	return &PatchWhitelistedRegistryParams{
		HTTPClient: client,
	}
}

/*PatchWhitelistedRegistryParams contains all the parameters to send to the API endpoint
for the patch whitelisted registry operation typically these are written to a http.Request
*/
type PatchWhitelistedRegistryParams struct {

	/*Patch*/
	Patch interface{}
	/*WhitelistedRegistry*/
	WhitelistedRegistryName string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the patch whitelisted registry params
func (o *PatchWhitelistedRegistryParams) WithTimeout(timeout time.Duration) *PatchWhitelistedRegistryParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the patch whitelisted registry params
func (o *PatchWhitelistedRegistryParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the patch whitelisted registry params
func (o *PatchWhitelistedRegistryParams) WithContext(ctx context.Context) *PatchWhitelistedRegistryParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the patch whitelisted registry params
func (o *PatchWhitelistedRegistryParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the patch whitelisted registry params
func (o *PatchWhitelistedRegistryParams) WithHTTPClient(client *http.Client) *PatchWhitelistedRegistryParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the patch whitelisted registry params
func (o *PatchWhitelistedRegistryParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithPatch adds the patch to the patch whitelisted registry params
func (o *PatchWhitelistedRegistryParams) WithPatch(patch interface{}) *PatchWhitelistedRegistryParams {
	o.SetPatch(patch)
	return o
}

// SetPatch adds the patch to the patch whitelisted registry params
func (o *PatchWhitelistedRegistryParams) SetPatch(patch interface{}) {
	o.Patch = patch
}

// WithWhitelistedRegistryName adds the whitelistedRegistry to the patch whitelisted registry params
func (o *PatchWhitelistedRegistryParams) WithWhitelistedRegistryName(whitelistedRegistry string) *PatchWhitelistedRegistryParams {
	o.SetWhitelistedRegistryName(whitelistedRegistry)
	return o
}

// SetWhitelistedRegistryName adds the whitelistedRegistry to the patch whitelisted registry params
func (o *PatchWhitelistedRegistryParams) SetWhitelistedRegistryName(whitelistedRegistry string) {
	o.WhitelistedRegistryName = whitelistedRegistry
}

// WriteToRequest writes these params to a swagger request
func (o *PatchWhitelistedRegistryParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Patch != nil {
		if err := r.SetBodyParam(o.Patch); err != nil {
			return err
		}
	}

	// path param whitelisted_registry
	if err := r.SetPathParam("whitelisted_registry", o.WhitelistedRegistryName); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
