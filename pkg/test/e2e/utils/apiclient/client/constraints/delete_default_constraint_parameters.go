// Code generated by go-swagger; DO NOT EDIT.

package constraints

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewDeleteDefaultConstraintParams creates a new DeleteDefaultConstraintParams object
// with the default values initialized.
func NewDeleteDefaultConstraintParams() *DeleteDefaultConstraintParams {
	var ()
	return &DeleteDefaultConstraintParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewDeleteDefaultConstraintParamsWithTimeout creates a new DeleteDefaultConstraintParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewDeleteDefaultConstraintParamsWithTimeout(timeout time.Duration) *DeleteDefaultConstraintParams {
	var ()
	return &DeleteDefaultConstraintParams{

		timeout: timeout,
	}
}

// NewDeleteDefaultConstraintParamsWithContext creates a new DeleteDefaultConstraintParams object
// with the default values initialized, and the ability to set a context for a request
func NewDeleteDefaultConstraintParamsWithContext(ctx context.Context) *DeleteDefaultConstraintParams {
	var ()
	return &DeleteDefaultConstraintParams{

		Context: ctx,
	}
}

// NewDeleteDefaultConstraintParamsWithHTTPClient creates a new DeleteDefaultConstraintParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewDeleteDefaultConstraintParamsWithHTTPClient(client *http.Client) *DeleteDefaultConstraintParams {
	var ()
	return &DeleteDefaultConstraintParams{
		HTTPClient: client,
	}
}

/*DeleteDefaultConstraintParams contains all the parameters to send to the API endpoint
for the delete default constraint operation typically these are written to a http.Request
*/
type DeleteDefaultConstraintParams struct {

	/*ConstraintName*/
	Name string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the delete default constraint params
func (o *DeleteDefaultConstraintParams) WithTimeout(timeout time.Duration) *DeleteDefaultConstraintParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the delete default constraint params
func (o *DeleteDefaultConstraintParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the delete default constraint params
func (o *DeleteDefaultConstraintParams) WithContext(ctx context.Context) *DeleteDefaultConstraintParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the delete default constraint params
func (o *DeleteDefaultConstraintParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the delete default constraint params
func (o *DeleteDefaultConstraintParams) WithHTTPClient(client *http.Client) *DeleteDefaultConstraintParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the delete default constraint params
func (o *DeleteDefaultConstraintParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithName adds the constraintName to the delete default constraint params
func (o *DeleteDefaultConstraintParams) WithName(constraintName string) *DeleteDefaultConstraintParams {
	o.SetName(constraintName)
	return o
}

// SetName adds the constraintName to the delete default constraint params
func (o *DeleteDefaultConstraintParams) SetName(constraintName string) {
	o.Name = constraintName
}

// WriteToRequest writes these params to a swagger request
func (o *DeleteDefaultConstraintParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param constraint_name
	if err := r.SetPathParam("constraint_name", o.Name); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
