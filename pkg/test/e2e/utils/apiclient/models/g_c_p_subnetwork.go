// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// GCPSubnetwork GCPSubnetwork represents a object of GCP subnetworks.
//
// swagger:model GCPSubnetwork
type GCPSubnetwork struct {

	// gateway address
	GatewayAddress string `json:"gatewayAddress,omitempty"`

	// ID
	ID uint64 `json:"id,omitempty"`

	// IP cidr range
	IPCidrRange string `json:"ipCidrRange,omitempty"`

	// kind
	Kind string `json:"kind,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// network
	Network string `json:"network,omitempty"`

	// path
	Path string `json:"path,omitempty"`

	// private IP google access
	PrivateIPGoogleAccess bool `json:"privateIpGoogleAccess,omitempty"`

	// region
	Region string `json:"region,omitempty"`

	// self link
	SelfLink string `json:"selfLink,omitempty"`

	// ip family
	IPFamily IPFamily `json:"ipFamily,omitempty"`
}

// Validate validates this g c p subnetwork
func (m *GCPSubnetwork) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIPFamily(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GCPSubnetwork) validateIPFamily(formats strfmt.Registry) error {
	if swag.IsZero(m.IPFamily) { // not required
		return nil
	}

	if err := m.IPFamily.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("ipFamily")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("ipFamily")
		}
		return err
	}

	return nil
}

// ContextValidate validate this g c p subnetwork based on the context it is used
func (m *GCPSubnetwork) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateIPFamily(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GCPSubnetwork) contextValidateIPFamily(ctx context.Context, formats strfmt.Registry) error {

	if err := m.IPFamily.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("ipFamily")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("ipFamily")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GCPSubnetwork) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GCPSubnetwork) UnmarshalBinary(b []byte) error {
	var res GCPSubnetwork
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
