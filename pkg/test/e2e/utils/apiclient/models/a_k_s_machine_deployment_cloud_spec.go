// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// AKSMachineDeploymentCloudSpec a k s machine deployment cloud spec
//
// swagger:model AKSMachineDeploymentCloudSpec
type AKSMachineDeploymentCloudSpec struct {

	// Name - Node pool name must contain only lowercase letters and numbers. For Linux node pools must be 12 or fewer characters.
	Name string `json:"name,omitempty"`

	// basic settings
	BasicSettings *AgentPoolBasics `json:"basicSettings,omitempty"`

	// configuration
	Configuration *AgentPoolConfig `json:"configuration,omitempty"`

	// optional settings
	OptionalSettings *AgentPoolOptionalSettings `json:"optionalSettings,omitempty"`
}

// Validate validates this a k s machine deployment cloud spec
func (m *AKSMachineDeploymentCloudSpec) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBasicSettings(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConfiguration(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOptionalSettings(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AKSMachineDeploymentCloudSpec) validateBasicSettings(formats strfmt.Registry) error {
	if swag.IsZero(m.BasicSettings) { // not required
		return nil
	}

	if m.BasicSettings != nil {
		if err := m.BasicSettings.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("basicSettings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("basicSettings")
			}
			return err
		}
	}

	return nil
}

func (m *AKSMachineDeploymentCloudSpec) validateConfiguration(formats strfmt.Registry) error {
	if swag.IsZero(m.Configuration) { // not required
		return nil
	}

	if m.Configuration != nil {
		if err := m.Configuration.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("configuration")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("configuration")
			}
			return err
		}
	}

	return nil
}

func (m *AKSMachineDeploymentCloudSpec) validateOptionalSettings(formats strfmt.Registry) error {
	if swag.IsZero(m.OptionalSettings) { // not required
		return nil
	}

	if m.OptionalSettings != nil {
		if err := m.OptionalSettings.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("optionalSettings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("optionalSettings")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this a k s machine deployment cloud spec based on the context it is used
func (m *AKSMachineDeploymentCloudSpec) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBasicSettings(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateConfiguration(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOptionalSettings(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AKSMachineDeploymentCloudSpec) contextValidateBasicSettings(ctx context.Context, formats strfmt.Registry) error {

	if m.BasicSettings != nil {
		if err := m.BasicSettings.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("basicSettings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("basicSettings")
			}
			return err
		}
	}

	return nil
}

func (m *AKSMachineDeploymentCloudSpec) contextValidateConfiguration(ctx context.Context, formats strfmt.Registry) error {

	if m.Configuration != nil {
		if err := m.Configuration.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("configuration")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("configuration")
			}
			return err
		}
	}

	return nil
}

func (m *AKSMachineDeploymentCloudSpec) contextValidateOptionalSettings(ctx context.Context, formats strfmt.Registry) error {

	if m.OptionalSettings != nil {
		if err := m.OptionalSettings.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("optionalSettings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("optionalSettings")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AKSMachineDeploymentCloudSpec) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AKSMachineDeploymentCloudSpec) UnmarshalBinary(b []byte) error {
	var res AKSMachineDeploymentCloudSpec
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
