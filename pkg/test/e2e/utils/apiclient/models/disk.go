// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// Disk disk
//
// swagger:model Disk
type Disk struct {

	// BootOrder is an integer value > 0, used to determine ordering of boot devices.
	// Lower values take precedence.
	// Each disk or interface that has a boot order must have a unique value.
	// Disks without a boot order are not tried if a disk with a boot order exists.
	// +optional
	BootOrder uint64 `json:"bootOrder,omitempty"`

	// dedicatedIOThread indicates this disk should have an exclusive IO Thread.
	// Enabling this implies useIOThreads = true.
	// Defaults to false.
	// +optional
	DedicatedIOThread bool `json:"dedicatedIOThread,omitempty"`

	// Name is the device name
	Name string `json:"name,omitempty"`

	// Serial provides the ability to specify a serial number for the disk device.
	// +optional
	Serial string `json:"serial,omitempty"`

	// If specified, disk address and its tag will be provided to the guest via config drive metadata
	// +optional
	Tag string `json:"tag,omitempty"`

	// block size
	BlockSize *BlockSize `json:"blockSize,omitempty"`

	// cache
	Cache DriverCache `json:"cache,omitempty"`

	// cdrom
	Cdrom *CDRomTarget `json:"cdrom,omitempty"`

	// disk
	Disk *DiskTarget `json:"disk,omitempty"`

	// floppy
	Floppy *FloppyTarget `json:"floppy,omitempty"`

	// io
	Io DriverIO `json:"io,omitempty"`

	// lun
	Lun *LunTarget `json:"lun,omitempty"`
}

// Validate validates this disk
func (m *Disk) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBlockSize(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCache(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCdrom(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDisk(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFloppy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLun(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Disk) validateBlockSize(formats strfmt.Registry) error {
	if swag.IsZero(m.BlockSize) { // not required
		return nil
	}

	if m.BlockSize != nil {
		if err := m.BlockSize.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("blockSize")
			}
			return err
		}
	}

	return nil
}

func (m *Disk) validateCache(formats strfmt.Registry) error {
	if swag.IsZero(m.Cache) { // not required
		return nil
	}

	if err := m.Cache.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("cache")
		}
		return err
	}

	return nil
}

func (m *Disk) validateCdrom(formats strfmt.Registry) error {
	if swag.IsZero(m.Cdrom) { // not required
		return nil
	}

	if m.Cdrom != nil {
		if err := m.Cdrom.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cdrom")
			}
			return err
		}
	}

	return nil
}

func (m *Disk) validateDisk(formats strfmt.Registry) error {
	if swag.IsZero(m.Disk) { // not required
		return nil
	}

	if m.Disk != nil {
		if err := m.Disk.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("disk")
			}
			return err
		}
	}

	return nil
}

func (m *Disk) validateFloppy(formats strfmt.Registry) error {
	if swag.IsZero(m.Floppy) { // not required
		return nil
	}

	if m.Floppy != nil {
		if err := m.Floppy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("floppy")
			}
			return err
		}
	}

	return nil
}

func (m *Disk) validateIo(formats strfmt.Registry) error {
	if swag.IsZero(m.Io) { // not required
		return nil
	}

	if err := m.Io.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("io")
		}
		return err
	}

	return nil
}

func (m *Disk) validateLun(formats strfmt.Registry) error {
	if swag.IsZero(m.Lun) { // not required
		return nil
	}

	if m.Lun != nil {
		if err := m.Lun.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lun")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this disk based on the context it is used
func (m *Disk) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBlockSize(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCache(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCdrom(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDisk(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFloppy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLun(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Disk) contextValidateBlockSize(ctx context.Context, formats strfmt.Registry) error {

	if m.BlockSize != nil {
		if err := m.BlockSize.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("blockSize")
			}
			return err
		}
	}

	return nil
}

func (m *Disk) contextValidateCache(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Cache.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("cache")
		}
		return err
	}

	return nil
}

func (m *Disk) contextValidateCdrom(ctx context.Context, formats strfmt.Registry) error {

	if m.Cdrom != nil {
		if err := m.Cdrom.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cdrom")
			}
			return err
		}
	}

	return nil
}

func (m *Disk) contextValidateDisk(ctx context.Context, formats strfmt.Registry) error {

	if m.Disk != nil {
		if err := m.Disk.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("disk")
			}
			return err
		}
	}

	return nil
}

func (m *Disk) contextValidateFloppy(ctx context.Context, formats strfmt.Registry) error {

	if m.Floppy != nil {
		if err := m.Floppy.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("floppy")
			}
			return err
		}
	}

	return nil
}

func (m *Disk) contextValidateIo(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Io.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("io")
		}
		return err
	}

	return nil
}

func (m *Disk) contextValidateLun(ctx context.Context, formats strfmt.Registry) error {

	if m.Lun != nil {
		if err := m.Lun.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lun")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Disk) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Disk) UnmarshalBinary(b []byte) error {
	var res Disk
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
