// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// RTCTimer r t c timer
//
// swagger:model RTCTimer
type RTCTimer struct {

	// Enabled set to false makes sure that the machine type or a preset can't add the timer.
	// Defaults to true.
	// +optional
	Enabled bool `json:"present,omitempty"`

	// tick policy
	TickPolicy RTCTickPolicy `json:"tickPolicy,omitempty"`

	// track
	Track RTCTimerTrack `json:"track,omitempty"`
}

// Validate validates this r t c timer
func (m *RTCTimer) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTickPolicy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTrack(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RTCTimer) validateTickPolicy(formats strfmt.Registry) error {
	if swag.IsZero(m.TickPolicy) { // not required
		return nil
	}

	if err := m.TickPolicy.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("tickPolicy")
		}
		return err
	}

	return nil
}

func (m *RTCTimer) validateTrack(formats strfmt.Registry) error {
	if swag.IsZero(m.Track) { // not required
		return nil
	}

	if err := m.Track.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("track")
		}
		return err
	}

	return nil
}

// ContextValidate validate this r t c timer based on the context it is used
func (m *RTCTimer) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateTickPolicy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTrack(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RTCTimer) contextValidateTickPolicy(ctx context.Context, formats strfmt.Registry) error {

	if err := m.TickPolicy.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("tickPolicy")
		}
		return err
	}

	return nil
}

func (m *RTCTimer) contextValidateTrack(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Track.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("track")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RTCTimer) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RTCTimer) UnmarshalBinary(b []byte) error {
	var res RTCTimer
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
