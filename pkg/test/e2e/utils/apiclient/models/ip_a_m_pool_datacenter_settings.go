// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// IPAMPoolDatacenterSettings IP a m pool datacenter settings
//
// swagger:model IPAMPoolDatacenterSettings
type IPAMPoolDatacenterSettings struct {

	// allocation prefix
	AllocationPrefix int64 `json:"allocationPrefix,omitempty"`

	// allocation range
	AllocationRange int64 `json:"allocationRange,omitempty"`

	// pool cidr
	PoolCidr SubnetCIDR `json:"poolCidr,omitempty"`

	// type
	Type IPAMPoolAllocationType `json:"type,omitempty"`
}

// Validate validates this IP a m pool datacenter settings
func (m *IPAMPoolDatacenterSettings) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePoolCidr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IPAMPoolDatacenterSettings) validatePoolCidr(formats strfmt.Registry) error {
	if swag.IsZero(m.PoolCidr) { // not required
		return nil
	}

	if err := m.PoolCidr.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("poolCidr")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("poolCidr")
		}
		return err
	}

	return nil
}

func (m *IPAMPoolDatacenterSettings) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	if err := m.Type.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("type")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("type")
		}
		return err
	}

	return nil
}

// ContextValidate validate this IP a m pool datacenter settings based on the context it is used
func (m *IPAMPoolDatacenterSettings) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidatePoolCidr(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IPAMPoolDatacenterSettings) contextValidatePoolCidr(ctx context.Context, formats strfmt.Registry) error {

	if err := m.PoolCidr.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("poolCidr")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("poolCidr")
		}
		return err
	}

	return nil
}

func (m *IPAMPoolDatacenterSettings) contextValidateType(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Type.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("type")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("type")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *IPAMPoolDatacenterSettings) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IPAMPoolDatacenterSettings) UnmarshalBinary(b []byte) error {
	var res IPAMPoolDatacenterSettings
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
