// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ResourceQuotaStatus resource quota status
//
// swagger:model ResourceQuotaStatus
type ResourceQuotaStatus struct {

	// global usage
	GlobalUsage *Quota `json:"globalUsage,omitempty"`

	// local usage
	LocalUsage *Quota `json:"localUsage,omitempty"`
}

// Validate validates this resource quota status
func (m *ResourceQuotaStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateGlobalUsage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLocalUsage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ResourceQuotaStatus) validateGlobalUsage(formats strfmt.Registry) error {
	if swag.IsZero(m.GlobalUsage) { // not required
		return nil
	}

	if m.GlobalUsage != nil {
		if err := m.GlobalUsage.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("globalUsage")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("globalUsage")
			}
			return err
		}
	}

	return nil
}

func (m *ResourceQuotaStatus) validateLocalUsage(formats strfmt.Registry) error {
	if swag.IsZero(m.LocalUsage) { // not required
		return nil
	}

	if m.LocalUsage != nil {
		if err := m.LocalUsage.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("localUsage")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("localUsage")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this resource quota status based on the context it is used
func (m *ResourceQuotaStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateGlobalUsage(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLocalUsage(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ResourceQuotaStatus) contextValidateGlobalUsage(ctx context.Context, formats strfmt.Registry) error {

	if m.GlobalUsage != nil {
		if err := m.GlobalUsage.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("globalUsage")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("globalUsage")
			}
			return err
		}
	}

	return nil
}

func (m *ResourceQuotaStatus) contextValidateLocalUsage(ctx context.Context, formats strfmt.Registry) error {

	if m.LocalUsage != nil {
		if err := m.LocalUsage.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("localUsage")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("localUsage")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ResourceQuotaStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ResourceQuotaStatus) UnmarshalBinary(b []byte) error {
	var res ResourceQuotaStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
