// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// KubeOneSpec kube one spec
//
// swagger:model KubeOneSpec
type KubeOneSpec struct {

	// container runtime
	ContainerRuntime string `json:"containerRuntime,omitempty"`

	// Manifest Base64 encoded manifest
	Manifest string `json:"manifest,omitempty"`

	// cloud spec
	CloudSpec *KubeOneCloudSpec `json:"cloudSpec,omitempty"`

	// ssh key
	SSHKey *KubeOneSSHKey `json:"sshKey,omitempty"`
}

// Validate validates this kube one spec
func (m *KubeOneSpec) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCloudSpec(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSSHKey(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *KubeOneSpec) validateCloudSpec(formats strfmt.Registry) error {
	if swag.IsZero(m.CloudSpec) { // not required
		return nil
	}

	if m.CloudSpec != nil {
		if err := m.CloudSpec.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cloudSpec")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cloudSpec")
			}
			return err
		}
	}

	return nil
}

func (m *KubeOneSpec) validateSSHKey(formats strfmt.Registry) error {
	if swag.IsZero(m.SSHKey) { // not required
		return nil
	}

	if m.SSHKey != nil {
		if err := m.SSHKey.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sshKey")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sshKey")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this kube one spec based on the context it is used
func (m *KubeOneSpec) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCloudSpec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSSHKey(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *KubeOneSpec) contextValidateCloudSpec(ctx context.Context, formats strfmt.Registry) error {

	if m.CloudSpec != nil {
		if err := m.CloudSpec.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cloudSpec")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cloudSpec")
			}
			return err
		}
	}

	return nil
}

func (m *KubeOneSpec) contextValidateSSHKey(ctx context.Context, formats strfmt.Registry) error {

	if m.SSHKey != nil {
		if err := m.SSHKey.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sshKey")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sshKey")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *KubeOneSpec) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *KubeOneSpec) UnmarshalBinary(b []byte) error {
	var res KubeOneSpec
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
