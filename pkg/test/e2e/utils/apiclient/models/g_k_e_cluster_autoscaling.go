// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// GKEClusterAutoscaling GKEClusterAutoscaling contains global, per-cluster
// information required by Cluster Autoscaler to automatically adjust
// the size of the cluster and create/delete node pools based on the
// current needs.
//
// swagger:model GKEClusterAutoscaling
type GKEClusterAutoscaling struct {

	// AutoprovisioningLocations: The list of Google Compute Engine zones
	// (https://cloud.google.com/compute/docs/zones#available) in which the
	// NodePool's nodes can be created by NAP.
	AutoprovisioningLocations []string `json:"autoprovisioningLocations"`

	// EnableNodeAutoprovisioning: Enables automatic node pool creation and
	// deletion.
	EnableNodeAutoprovisioning bool `json:"enableNodeAutoprovisioning,omitempty"`

	// ResourceLimits: Contains global constraints regarding minimum and
	// maximum amount of resources in the cluster.
	ResourceLimits []*GKEResourceLimit `json:"resourceLimits"`

	// autoprovisioning node pool defaults
	AutoprovisioningNodePoolDefaults *GKEAutoprovisioningNodePoolDefaults `json:"autoprovisioningNodePoolDefaults,omitempty"`
}

// Validate validates this g k e cluster autoscaling
func (m *GKEClusterAutoscaling) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateResourceLimits(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAutoprovisioningNodePoolDefaults(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GKEClusterAutoscaling) validateResourceLimits(formats strfmt.Registry) error {
	if swag.IsZero(m.ResourceLimits) { // not required
		return nil
	}

	for i := 0; i < len(m.ResourceLimits); i++ {
		if swag.IsZero(m.ResourceLimits[i]) { // not required
			continue
		}

		if m.ResourceLimits[i] != nil {
			if err := m.ResourceLimits[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("resourceLimits" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("resourceLimits" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *GKEClusterAutoscaling) validateAutoprovisioningNodePoolDefaults(formats strfmt.Registry) error {
	if swag.IsZero(m.AutoprovisioningNodePoolDefaults) { // not required
		return nil
	}

	if m.AutoprovisioningNodePoolDefaults != nil {
		if err := m.AutoprovisioningNodePoolDefaults.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("autoprovisioningNodePoolDefaults")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("autoprovisioningNodePoolDefaults")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this g k e cluster autoscaling based on the context it is used
func (m *GKEClusterAutoscaling) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateResourceLimits(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAutoprovisioningNodePoolDefaults(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GKEClusterAutoscaling) contextValidateResourceLimits(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ResourceLimits); i++ {

		if m.ResourceLimits[i] != nil {
			if err := m.ResourceLimits[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("resourceLimits" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("resourceLimits" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *GKEClusterAutoscaling) contextValidateAutoprovisioningNodePoolDefaults(ctx context.Context, formats strfmt.Registry) error {

	if m.AutoprovisioningNodePoolDefaults != nil {
		if err := m.AutoprovisioningNodePoolDefaults.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("autoprovisioningNodePoolDefaults")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("autoprovisioningNodePoolDefaults")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GKEClusterAutoscaling) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GKEClusterAutoscaling) UnmarshalBinary(b []byte) error {
	var res GKEClusterAutoscaling
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
