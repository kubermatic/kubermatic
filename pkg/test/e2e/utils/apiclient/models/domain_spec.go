// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// DomainSpec Need to copy the following type to avoid a collision on Resources
// between kubevirtv1.ResourceRequirements and corev1.ResourceRequirements used in different part of the API.
//
// swagger:model DomainSpec
type DomainSpec struct {

	// chassis
	Chassis *Chassis `json:"chassis,omitempty"`

	// clock
	Clock *Clock `json:"clock,omitempty"`

	// cpu
	CPU *CPU `json:"cpu,omitempty"`

	// devices
	Devices *Devices `json:"devices,omitempty"`

	// features
	Features *Features `json:"features,omitempty"`

	// firmware
	Firmware *Firmware `json:"firmware,omitempty"`

	// io threads policy
	IoThreadsPolicy IOThreadsPolicy `json:"ioThreadsPolicy,omitempty"`

	// machine
	Machine *Machine `json:"machine,omitempty"`

	// memory
	Memory *Memory `json:"memory,omitempty"`

	// resources
	Resources *ResourceRequirements `json:"resources,omitempty"`
}

// Validate validates this domain spec
func (m *DomainSpec) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateChassis(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClock(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCPU(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDevices(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFeatures(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFirmware(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIoThreadsPolicy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMachine(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMemory(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResources(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DomainSpec) validateChassis(formats strfmt.Registry) error {
	if swag.IsZero(m.Chassis) { // not required
		return nil
	}

	if m.Chassis != nil {
		if err := m.Chassis.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("chassis")
			}
			return err
		}
	}

	return nil
}

func (m *DomainSpec) validateClock(formats strfmt.Registry) error {
	if swag.IsZero(m.Clock) { // not required
		return nil
	}

	if m.Clock != nil {
		if err := m.Clock.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("clock")
			}
			return err
		}
	}

	return nil
}

func (m *DomainSpec) validateCPU(formats strfmt.Registry) error {
	if swag.IsZero(m.CPU) { // not required
		return nil
	}

	if m.CPU != nil {
		if err := m.CPU.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cpu")
			}
			return err
		}
	}

	return nil
}

func (m *DomainSpec) validateDevices(formats strfmt.Registry) error {
	if swag.IsZero(m.Devices) { // not required
		return nil
	}

	if m.Devices != nil {
		if err := m.Devices.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("devices")
			}
			return err
		}
	}

	return nil
}

func (m *DomainSpec) validateFeatures(formats strfmt.Registry) error {
	if swag.IsZero(m.Features) { // not required
		return nil
	}

	if m.Features != nil {
		if err := m.Features.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("features")
			}
			return err
		}
	}

	return nil
}

func (m *DomainSpec) validateFirmware(formats strfmt.Registry) error {
	if swag.IsZero(m.Firmware) { // not required
		return nil
	}

	if m.Firmware != nil {
		if err := m.Firmware.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("firmware")
			}
			return err
		}
	}

	return nil
}

func (m *DomainSpec) validateIoThreadsPolicy(formats strfmt.Registry) error {
	if swag.IsZero(m.IoThreadsPolicy) { // not required
		return nil
	}

	if err := m.IoThreadsPolicy.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("ioThreadsPolicy")
		}
		return err
	}

	return nil
}

func (m *DomainSpec) validateMachine(formats strfmt.Registry) error {
	if swag.IsZero(m.Machine) { // not required
		return nil
	}

	if m.Machine != nil {
		if err := m.Machine.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("machine")
			}
			return err
		}
	}

	return nil
}

func (m *DomainSpec) validateMemory(formats strfmt.Registry) error {
	if swag.IsZero(m.Memory) { // not required
		return nil
	}

	if m.Memory != nil {
		if err := m.Memory.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("memory")
			}
			return err
		}
	}

	return nil
}

func (m *DomainSpec) validateResources(formats strfmt.Registry) error {
	if swag.IsZero(m.Resources) { // not required
		return nil
	}

	if m.Resources != nil {
		if err := m.Resources.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("resources")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this domain spec based on the context it is used
func (m *DomainSpec) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateChassis(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateClock(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCPU(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDevices(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFeatures(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFirmware(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIoThreadsPolicy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMachine(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMemory(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateResources(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DomainSpec) contextValidateChassis(ctx context.Context, formats strfmt.Registry) error {

	if m.Chassis != nil {
		if err := m.Chassis.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("chassis")
			}
			return err
		}
	}

	return nil
}

func (m *DomainSpec) contextValidateClock(ctx context.Context, formats strfmt.Registry) error {

	if m.Clock != nil {
		if err := m.Clock.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("clock")
			}
			return err
		}
	}

	return nil
}

func (m *DomainSpec) contextValidateCPU(ctx context.Context, formats strfmt.Registry) error {

	if m.CPU != nil {
		if err := m.CPU.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cpu")
			}
			return err
		}
	}

	return nil
}

func (m *DomainSpec) contextValidateDevices(ctx context.Context, formats strfmt.Registry) error {

	if m.Devices != nil {
		if err := m.Devices.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("devices")
			}
			return err
		}
	}

	return nil
}

func (m *DomainSpec) contextValidateFeatures(ctx context.Context, formats strfmt.Registry) error {

	if m.Features != nil {
		if err := m.Features.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("features")
			}
			return err
		}
	}

	return nil
}

func (m *DomainSpec) contextValidateFirmware(ctx context.Context, formats strfmt.Registry) error {

	if m.Firmware != nil {
		if err := m.Firmware.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("firmware")
			}
			return err
		}
	}

	return nil
}

func (m *DomainSpec) contextValidateIoThreadsPolicy(ctx context.Context, formats strfmt.Registry) error {

	if err := m.IoThreadsPolicy.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("ioThreadsPolicy")
		}
		return err
	}

	return nil
}

func (m *DomainSpec) contextValidateMachine(ctx context.Context, formats strfmt.Registry) error {

	if m.Machine != nil {
		if err := m.Machine.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("machine")
			}
			return err
		}
	}

	return nil
}

func (m *DomainSpec) contextValidateMemory(ctx context.Context, formats strfmt.Registry) error {

	if m.Memory != nil {
		if err := m.Memory.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("memory")
			}
			return err
		}
	}

	return nil
}

func (m *DomainSpec) contextValidateResources(ctx context.Context, formats strfmt.Registry) error {

	if m.Resources != nil {
		if err := m.Resources.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("resources")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DomainSpec) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DomainSpec) UnmarshalBinary(b []byte) error {
	var res DomainSpec
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
