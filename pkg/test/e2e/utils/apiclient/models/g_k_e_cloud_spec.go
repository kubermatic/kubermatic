// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// GKECloudSpec g k e cloud spec
//
// swagger:model GKECloudSpec
type GKECloudSpec struct {

	// name
	Name string `json:"name,omitempty"`

	// service account
	ServiceAccount string `json:"serviceAccount,omitempty"`

	// zone
	Zone string `json:"zone,omitempty"`

	// cluster spec
	ClusterSpec *GKEClusterSpec `json:"clusterSpec,omitempty"`
}

// Validate validates this g k e cloud spec
func (m *GKECloudSpec) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClusterSpec(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GKECloudSpec) validateClusterSpec(formats strfmt.Registry) error {
	if swag.IsZero(m.ClusterSpec) { // not required
		return nil
	}

	if m.ClusterSpec != nil {
		if err := m.ClusterSpec.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("clusterSpec")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this g k e cloud spec based on the context it is used
func (m *GKECloudSpec) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateClusterSpec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GKECloudSpec) contextValidateClusterSpec(ctx context.Context, formats strfmt.Registry) error {

	if m.ClusterSpec != nil {
		if err := m.ClusterSpec.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("clusterSpec")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GKECloudSpec) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GKECloudSpec) UnmarshalBinary(b []byte) error {
	var res GKECloudSpec
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
