// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// AKSMDPhase a k s m d phase
//
// swagger:model AKSMDPhase
type AKSMDPhase struct {

	// power state
	PowerState AKSPowerState `json:"powerState,omitempty"`

	// provisioning state
	ProvisioningState AKSProvisioningState `json:"provisioningState,omitempty"`
}

// Validate validates this a k s m d phase
func (m *AKSMDPhase) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePowerState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProvisioningState(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AKSMDPhase) validatePowerState(formats strfmt.Registry) error {
	if swag.IsZero(m.PowerState) { // not required
		return nil
	}

	if err := m.PowerState.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("powerState")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("powerState")
		}
		return err
	}

	return nil
}

func (m *AKSMDPhase) validateProvisioningState(formats strfmt.Registry) error {
	if swag.IsZero(m.ProvisioningState) { // not required
		return nil
	}

	if err := m.ProvisioningState.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("provisioningState")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("provisioningState")
		}
		return err
	}

	return nil
}

// ContextValidate validate this a k s m d phase based on the context it is used
func (m *AKSMDPhase) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidatePowerState(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProvisioningState(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AKSMDPhase) contextValidatePowerState(ctx context.Context, formats strfmt.Registry) error {

	if err := m.PowerState.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("powerState")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("powerState")
		}
		return err
	}

	return nil
}

func (m *AKSMDPhase) contextValidateProvisioningState(ctx context.Context, formats strfmt.Registry) error {

	if err := m.ProvisioningState.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("provisioningState")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("provisioningState")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AKSMDPhase) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AKSMDPhase) UnmarshalBinary(b []byte) error {
	var res AKSMDPhase
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
