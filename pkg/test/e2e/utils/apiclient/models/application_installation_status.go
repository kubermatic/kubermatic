// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ApplicationInstallationStatus ApplicationInstallationStatus is the object representing the status of an Application.
//
// swagger:model ApplicationInstallationStatus
type ApplicationInstallationStatus struct {

	// Conditions contains conditions an installation is in, its primary use case is status signaling between controllers or between controllers and the API
	Conditions []*ApplicationInstallationCondition `json:"conditions"`

	// application version
	ApplicationVersion *ApplicationVersion `json:"applicationVersion,omitempty"`

	// last updated
	// Format: date-time
	LastUpdated Time `json:"lastUpdated,omitempty"`
}

// Validate validates this application installation status
func (m *ApplicationInstallationStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConditions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateApplicationVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastUpdated(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ApplicationInstallationStatus) validateConditions(formats strfmt.Registry) error {
	if swag.IsZero(m.Conditions) { // not required
		return nil
	}

	for i := 0; i < len(m.Conditions); i++ {
		if swag.IsZero(m.Conditions[i]) { // not required
			continue
		}

		if m.Conditions[i] != nil {
			if err := m.Conditions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("conditions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("conditions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ApplicationInstallationStatus) validateApplicationVersion(formats strfmt.Registry) error {
	if swag.IsZero(m.ApplicationVersion) { // not required
		return nil
	}

	if m.ApplicationVersion != nil {
		if err := m.ApplicationVersion.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("applicationVersion")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("applicationVersion")
			}
			return err
		}
	}

	return nil
}

func (m *ApplicationInstallationStatus) validateLastUpdated(formats strfmt.Registry) error {
	if swag.IsZero(m.LastUpdated) { // not required
		return nil
	}

	if err := m.LastUpdated.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("lastUpdated")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("lastUpdated")
		}
		return err
	}

	return nil
}

// ContextValidate validate this application installation status based on the context it is used
func (m *ApplicationInstallationStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateConditions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateApplicationVersion(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLastUpdated(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ApplicationInstallationStatus) contextValidateConditions(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Conditions); i++ {

		if m.Conditions[i] != nil {
			if err := m.Conditions[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("conditions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("conditions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ApplicationInstallationStatus) contextValidateApplicationVersion(ctx context.Context, formats strfmt.Registry) error {

	if m.ApplicationVersion != nil {
		if err := m.ApplicationVersion.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("applicationVersion")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("applicationVersion")
			}
			return err
		}
	}

	return nil
}

func (m *ApplicationInstallationStatus) contextValidateLastUpdated(ctx context.Context, formats strfmt.Registry) error {

	if err := m.LastUpdated.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("lastUpdated")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("lastUpdated")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ApplicationInstallationStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ApplicationInstallationStatus) UnmarshalBinary(b []byte) error {
	var res ApplicationInstallationStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
