// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// DatacenterSpecOpenstack DatacenterSpecOpenstack describes an OpenStack datacenter.
//
// swagger:model DatacenterSpecOpenstack
type DatacenterSpecOpenstack struct {

	// auth URL
	AuthURL string `json:"authURL,omitempty"`

	// availability zone
	AvailabilityZone string `json:"availabilityZone,omitempty"`

	// Used for automatic network creation
	DNSServers []string `json:"dnsServers"`

	// Optional: List of enabled flavors for the given datacenter
	EnabledFlavors []string `json:"enabledFlavors"`

	// Optional
	EnforceFloatingIP bool `json:"enforceFloatingIP,omitempty"`

	// Optional: defines if the IPv6 is enabled for the datacenter
	IPV6Enabled bool `json:"ipv6Enabled,omitempty"`

	// Optional
	IgnoreVolumeAZ bool `json:"ignoreVolumeAZ,omitempty"`

	// Optional: Gets mapped to the "manage-security-groups" setting in the cloud config.
	// This setting defaults to true.
	ManageSecurityGroups bool `json:"manageSecurityGroups,omitempty"`

	// region
	Region string `json:"region,omitempty"`

	// Optional: Gets mapped to the "trust-device-path" setting in the cloud config.
	// This setting defaults to false.
	TrustDevicePath bool `json:"trustDevicePath,omitempty"`

	// Optional: Gets mapped to the "use-octavia" setting in the cloud config.
	// use-octavia is enabled by default in CCM since v1.17.0, and disabled by
	// default with the in-tree cloud provider.
	UseOctavia bool `json:"useOctavia,omitempty"`

	// images
	Images ImageList `json:"images,omitempty"`

	// node size requirements
	NodeSizeRequirements *OpenstackNodeSizeRequirements `json:"nodeSizeRequirements,omitempty"`
}

// Validate validates this datacenter spec openstack
func (m *DatacenterSpecOpenstack) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateImages(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNodeSizeRequirements(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DatacenterSpecOpenstack) validateImages(formats strfmt.Registry) error {
	if swag.IsZero(m.Images) { // not required
		return nil
	}

	if m.Images != nil {
		if err := m.Images.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("images")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("images")
			}
			return err
		}
	}

	return nil
}

func (m *DatacenterSpecOpenstack) validateNodeSizeRequirements(formats strfmt.Registry) error {
	if swag.IsZero(m.NodeSizeRequirements) { // not required
		return nil
	}

	if m.NodeSizeRequirements != nil {
		if err := m.NodeSizeRequirements.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("nodeSizeRequirements")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("nodeSizeRequirements")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this datacenter spec openstack based on the context it is used
func (m *DatacenterSpecOpenstack) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateImages(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNodeSizeRequirements(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DatacenterSpecOpenstack) contextValidateImages(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Images.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("images")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("images")
		}
		return err
	}

	return nil
}

func (m *DatacenterSpecOpenstack) contextValidateNodeSizeRequirements(ctx context.Context, formats strfmt.Registry) error {

	if m.NodeSizeRequirements != nil {
		if err := m.NodeSizeRequirements.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("nodeSizeRequirements")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("nodeSizeRequirements")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DatacenterSpecOpenstack) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DatacenterSpecOpenstack) UnmarshalBinary(b []byte) error {
	var res DatacenterSpecOpenstack
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
