// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// AgentPoolConfig agent pool config
//
// swagger:model AgentPoolConfig
type AgentPoolConfig struct {

	// EnableNodePublicIP - Some scenarios may require nodes in a node pool to receive their own dedicated public IP addresses. A common scenario is for gaming workloads, where a console needs to make a direct connection to a cloud virtual machine to minimize hops. For more information see [assigning a public IP per node](https://docs.microsoft.com/azure/aks/use-multiple-node-pools#assign-a-public-ip-per-node-for-your-node-pools). The default is false.
	EnableNodePublicIP bool `json:"enableNodePublicIP,omitempty"`

	// MaxPods - The maximum number of pods that can run on a node.
	MaxPods int32 `json:"maxPods,omitempty"`

	// MaxSurgeUpgradeSetting - This can either be set to an integer (e.g. '5') or a percentage (e.g. '50%'). If a percentage is specified, it is the percentage of the total agent pool size at the time of the upgrade. For percentages, fractional nodes are rounded up. If not specified, the default is 1. For more information, including best practices, see: https://docs.microsoft.com/azure/aks/upgrade-cluster#customize-node-surge-upgrade
	MaxSurgeUpgradeSetting string `json:"maxSurge,omitempty"`

	// OsDiskType - Possible values include: 'Managed', 'Ephemeral'
	OsDiskType string `json:"osDiskType,omitempty"`

	// OsType - Possible values include: 'Linux', 'Windows'. The default value is 'Linux'.
	// Windows node pools are not supported on kubenet clusters
	OsType string `json:"osType,omitempty"`

	// PodSubnetID - If omitted, pod IPs are statically assigned on the node subnet (see vnetSubnetID for more details). This is of the form: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworks/{virtualNetworkName}/subnets/{subnetName}
	PodSubnetID string `json:"podSubnetID,omitempty"`

	// VnetSubnetID - If this is not specified, a VNET and subnet will be generated and used. If no podSubnetID is specified, this applies to nodes and pods, otherwise it applies to just nodes. This is of the form: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworks/{virtualNetworkName}/subnets/{subnetName}
	VnetSubnetID string `json:"vnetSubnetID,omitempty"`
}

// Validate validates this agent pool config
func (m *AgentPoolConfig) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this agent pool config based on context it is used
func (m *AgentPoolConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *AgentPoolConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AgentPoolConfig) UnmarshalBinary(b []byte) error {
	var res AgentPoolConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
