// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NetworkPolicyPeer NetworkPolicyPeer describes a peer to allow traffic to/from. Only certain combinations of
// fields are allowed
//
// swagger:model NetworkPolicyPeer
type NetworkPolicyPeer struct {

	// ip block
	IPBlock *IPBlock `json:"ipBlock,omitempty"`

	// namespace selector
	NamespaceSelector *LabelSelector `json:"namespaceSelector,omitempty"`

	// pod selector
	PodSelector *LabelSelector `json:"podSelector,omitempty"`
}

// Validate validates this network policy peer
func (m *NetworkPolicyPeer) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIPBlock(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNamespaceSelector(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePodSelector(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NetworkPolicyPeer) validateIPBlock(formats strfmt.Registry) error {
	if swag.IsZero(m.IPBlock) { // not required
		return nil
	}

	if m.IPBlock != nil {
		if err := m.IPBlock.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ipBlock")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ipBlock")
			}
			return err
		}
	}

	return nil
}

func (m *NetworkPolicyPeer) validateNamespaceSelector(formats strfmt.Registry) error {
	if swag.IsZero(m.NamespaceSelector) { // not required
		return nil
	}

	if m.NamespaceSelector != nil {
		if err := m.NamespaceSelector.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("namespaceSelector")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("namespaceSelector")
			}
			return err
		}
	}

	return nil
}

func (m *NetworkPolicyPeer) validatePodSelector(formats strfmt.Registry) error {
	if swag.IsZero(m.PodSelector) { // not required
		return nil
	}

	if m.PodSelector != nil {
		if err := m.PodSelector.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("podSelector")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("podSelector")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this network policy peer based on the context it is used
func (m *NetworkPolicyPeer) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateIPBlock(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNamespaceSelector(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePodSelector(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NetworkPolicyPeer) contextValidateIPBlock(ctx context.Context, formats strfmt.Registry) error {

	if m.IPBlock != nil {
		if err := m.IPBlock.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ipBlock")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ipBlock")
			}
			return err
		}
	}

	return nil
}

func (m *NetworkPolicyPeer) contextValidateNamespaceSelector(ctx context.Context, formats strfmt.Registry) error {

	if m.NamespaceSelector != nil {
		if err := m.NamespaceSelector.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("namespaceSelector")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("namespaceSelector")
			}
			return err
		}
	}

	return nil
}

func (m *NetworkPolicyPeer) contextValidatePodSelector(ctx context.Context, formats strfmt.Registry) error {

	if m.PodSelector != nil {
		if err := m.PodSelector.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("podSelector")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("podSelector")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *NetworkPolicyPeer) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NetworkPolicyPeer) UnmarshalBinary(b []byte) error {
	var res NetworkPolicyPeer
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
