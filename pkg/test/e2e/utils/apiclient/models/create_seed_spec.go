// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// CreateSeedSpec CreateSeedSpec is the structure that is used to create seed.
//
// swagger:model CreateSeedSpec
type CreateSeedSpec struct {

	// Optional: Country of the seed as ISO-3166 two-letter code, e.g. DE or UK.
	// For informational purposes in the Kubermatic dashboard only.
	Country string `json:"country,omitempty"`

	// DefaultClusterTemplate is the name of a cluster template of scope "seed" that is used
	// to default all new created clusters
	DefaultClusterTemplate string `json:"defaultClusterTemplate,omitempty"`

	// The raw Kubeconfig encoded to base64. This field is used for cluster creation or update.
	Kubeconfig string `json:"kubeconfig,omitempty"`

	// Optional: Detailed location of the cluster, like "Hamburg" or "Datacenter 7".
	// For informational purposes in the Kubermatic dashboard only.
	Location string `json:"location,omitempty"`

	// Optional: This can be used to override the DNS name used for this seed.
	// By default the seed name is used.
	SeedDNSOverwrite string `json:"seed_dns_overwrite,omitempty"`

	// expose strategy
	ExposeStrategy ExposeStrategy `json:"expose_strategy,omitempty"`

	// mla
	Mla *CreateSeedMLASettings `json:"mla,omitempty"`

	// proxy settings
	ProxySettings *CreateSeedProxySettings `json:"proxy_settings,omitempty"`
}

// Validate validates this create seed spec
func (m *CreateSeedSpec) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateExposeStrategy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMla(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProxySettings(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateSeedSpec) validateExposeStrategy(formats strfmt.Registry) error {
	if swag.IsZero(m.ExposeStrategy) { // not required
		return nil
	}

	if err := m.ExposeStrategy.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("expose_strategy")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("expose_strategy")
		}
		return err
	}

	return nil
}

func (m *CreateSeedSpec) validateMla(formats strfmt.Registry) error {
	if swag.IsZero(m.Mla) { // not required
		return nil
	}

	if m.Mla != nil {
		if err := m.Mla.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mla")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("mla")
			}
			return err
		}
	}

	return nil
}

func (m *CreateSeedSpec) validateProxySettings(formats strfmt.Registry) error {
	if swag.IsZero(m.ProxySettings) { // not required
		return nil
	}

	if m.ProxySettings != nil {
		if err := m.ProxySettings.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("proxy_settings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("proxy_settings")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this create seed spec based on the context it is used
func (m *CreateSeedSpec) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateExposeStrategy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMla(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProxySettings(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateSeedSpec) contextValidateExposeStrategy(ctx context.Context, formats strfmt.Registry) error {

	if err := m.ExposeStrategy.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("expose_strategy")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("expose_strategy")
		}
		return err
	}

	return nil
}

func (m *CreateSeedSpec) contextValidateMla(ctx context.Context, formats strfmt.Registry) error {

	if m.Mla != nil {
		if err := m.Mla.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mla")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("mla")
			}
			return err
		}
	}

	return nil
}

func (m *CreateSeedSpec) contextValidateProxySettings(ctx context.Context, formats strfmt.Registry) error {

	if m.ProxySettings != nil {
		if err := m.ProxySettings.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("proxy_settings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("proxy_settings")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CreateSeedSpec) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateSeedSpec) UnmarshalBinary(b []byte) error {
	var res CreateSeedSpec
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
