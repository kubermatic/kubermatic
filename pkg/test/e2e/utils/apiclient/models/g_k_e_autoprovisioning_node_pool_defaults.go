// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// GKEAutoprovisioningNodePoolDefaults GKEAutoprovisioningNodePoolDefaults
// contains defaults for a node pool created by NAP.
//
// swagger:model GKEAutoprovisioningNodePoolDefaults
type GKEAutoprovisioningNodePoolDefaults struct {

	// BootDiskKmsKey: The Customer Managed Encryption Key used to encrypt
	// the boot disk attached to each node in the node pool. This should be
	// of the form
	// projects/[KEY_PROJECT_ID]/locations/[LOCATION]/keyRings/[RING_NAME]/cr
	// yptoKeys/[KEY_NAME]. For more information about protecting resources
	// with Cloud KMS Keys please see:
	// https://cloud.google.com/compute/docs/disks/customer-managed-encryption
	BootDiskKmsKey string `json:"bootDiskKmsKey,omitempty"`

	// DiskSizeGb: Size of the disk attached to each node, specified in GB.
	// The smallest allowed disk size is 10GB. If unspecified, the default
	// disk size is 100GB.
	DiskSizeGb int64 `json:"diskSizeGb,omitempty"`

	// DiskType: Type of the disk attached to each node (e.g. 'pd-standard',
	// 'pd-ssd' or 'pd-balanced') If unspecified, the default disk type is
	// 'pd-standard'
	DiskType string `json:"diskType,omitempty"`

	// MinCpuPlatform: Minimum CPU platform to be used for NAP created node
	// pools. The instance may be scheduled on the specified or newer CPU
	// platform. Applicable values are the friendly names of CPU platforms,
	// such as minCpuPlatform: Intel Haswell or minCpuPlatform: Intel Sandy
	// Bridge. For more information, read how to specify min CPU platform
	// (https://cloud.google.com/compute/docs/instances/specify-min-cpu-platform)
	// To unset the min cpu platform field pass "automatic" as field value.
	MinCPUPlatform string `json:"minCpuPlatform,omitempty"`

	// OauthScopes: Scopes that are used by NAP when creating node pools.
	OauthScopes []string `json:"oauthScopes"`

	// ServiceAccount: The Google Cloud Platform Service Account to be used
	// by the node VMs.
	ServiceAccount string `json:"serviceAccount,omitempty"`

	// management
	Management *GKENodeManagement `json:"management,omitempty"`

	// shielded instance config
	ShieldedInstanceConfig *GKEShieldedInstanceConfig `json:"shieldedInstanceConfig,omitempty"`

	// upgrade settings
	UpgradeSettings *GKEUpgradeSettings `json:"upgradeSettings,omitempty"`
}

// Validate validates this g k e autoprovisioning node pool defaults
func (m *GKEAutoprovisioningNodePoolDefaults) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateManagement(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateShieldedInstanceConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpgradeSettings(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GKEAutoprovisioningNodePoolDefaults) validateManagement(formats strfmt.Registry) error {
	if swag.IsZero(m.Management) { // not required
		return nil
	}

	if m.Management != nil {
		if err := m.Management.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("management")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("management")
			}
			return err
		}
	}

	return nil
}

func (m *GKEAutoprovisioningNodePoolDefaults) validateShieldedInstanceConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.ShieldedInstanceConfig) { // not required
		return nil
	}

	if m.ShieldedInstanceConfig != nil {
		if err := m.ShieldedInstanceConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("shieldedInstanceConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("shieldedInstanceConfig")
			}
			return err
		}
	}

	return nil
}

func (m *GKEAutoprovisioningNodePoolDefaults) validateUpgradeSettings(formats strfmt.Registry) error {
	if swag.IsZero(m.UpgradeSettings) { // not required
		return nil
	}

	if m.UpgradeSettings != nil {
		if err := m.UpgradeSettings.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("upgradeSettings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("upgradeSettings")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this g k e autoprovisioning node pool defaults based on the context it is used
func (m *GKEAutoprovisioningNodePoolDefaults) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateManagement(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateShieldedInstanceConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUpgradeSettings(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GKEAutoprovisioningNodePoolDefaults) contextValidateManagement(ctx context.Context, formats strfmt.Registry) error {

	if m.Management != nil {
		if err := m.Management.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("management")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("management")
			}
			return err
		}
	}

	return nil
}

func (m *GKEAutoprovisioningNodePoolDefaults) contextValidateShieldedInstanceConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.ShieldedInstanceConfig != nil {
		if err := m.ShieldedInstanceConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("shieldedInstanceConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("shieldedInstanceConfig")
			}
			return err
		}
	}

	return nil
}

func (m *GKEAutoprovisioningNodePoolDefaults) contextValidateUpgradeSettings(ctx context.Context, formats strfmt.Registry) error {

	if m.UpgradeSettings != nil {
		if err := m.UpgradeSettings.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("upgradeSettings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("upgradeSettings")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GKEAutoprovisioningNodePoolDefaults) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GKEAutoprovisioningNodePoolDefaults) UnmarshalBinary(b []byte) error {
	var res GKEAutoprovisioningNodePoolDefaults
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
