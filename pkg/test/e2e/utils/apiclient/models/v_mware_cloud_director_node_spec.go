// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// VMwareCloudDirectorNodeSpec VMwareCloudDirectorNodeSpec VMware Cloud Director node settings
//
// swagger:model VMwareCloudDirectorNodeSpec
type VMwareCloudDirectorNodeSpec struct {

	// CPU cores
	CPUCores int64 `json:"cpuCores,omitempty"`

	// c p us
	CPUs int64 `json:"cpus,omitempty"`

	// catalog
	Catalog string `json:"catalog,omitempty"`

	// disk i o p s
	DiskIOPS int64 `json:"diskIOPS,omitempty"`

	// disk size g b
	DiskSizeGB int64 `json:"diskSizeGB,omitempty"`

	// memory m b
	MemoryMB int64 `json:"memoryMB,omitempty"`

	// Additional metadata to set
	Metadata map[string]string `json:"metadata,omitempty"`

	// network
	Network string `json:"network,omitempty"`

	// storage profile
	StorageProfile string `json:"storageProfile,omitempty"`

	// template
	Template string `json:"template,omitempty"`

	// v app
	VApp string `json:"vapp,omitempty"`

	// ip allocation mode
	IPAllocationMode IPAllocationMode `json:"ipAllocationMode,omitempty"`
}

// Validate validates this v mware cloud director node spec
func (m *VMwareCloudDirectorNodeSpec) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIPAllocationMode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VMwareCloudDirectorNodeSpec) validateIPAllocationMode(formats strfmt.Registry) error {
	if swag.IsZero(m.IPAllocationMode) { // not required
		return nil
	}

	if err := m.IPAllocationMode.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("ipAllocationMode")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("ipAllocationMode")
		}
		return err
	}

	return nil
}

// ContextValidate validate this v mware cloud director node spec based on the context it is used
func (m *VMwareCloudDirectorNodeSpec) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateIPAllocationMode(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VMwareCloudDirectorNodeSpec) contextValidateIPAllocationMode(ctx context.Context, formats strfmt.Registry) error {

	if err := m.IPAllocationMode.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("ipAllocationMode")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("ipAllocationMode")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *VMwareCloudDirectorNodeSpec) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VMwareCloudDirectorNodeSpec) UnmarshalBinary(b []byte) error {
	var res VMwareCloudDirectorNodeSpec
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
