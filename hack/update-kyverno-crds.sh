#!/usr/bin/env bash

# Copyright 2025 The Kubermatic Kubernetes Platform contributors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

set -euo pipefail

cd $(dirname $0)/..
source hack/lib.sh

if [ "$#" -lt 1 ] || [ "$1" == "--help" ]; then
  cat << EOF
Usage: $(basename $0) (version)
where:
    version:    Kyverno version used to generate the CRDs, e.g. v1.14.1
e.g: $(basename $0) v1.14.1
EOF
  exit 0
fi

# Handle containerized execution
if is_containerized; then
  version="$2"
else
  version="$1"
fi

version="${1:-v1.14.1}"

crd_dir="pkg/ee/kyverno/resources/user-cluster/static/kyverno-crds"
url="https://github.com/kyverno/kyverno/releases/download/$version/install.yaml"

mkdir -p "$crd_dir"
rm -f "$crd_dir"/*.yaml

echodate() {
  echo "[$(date -u +%Y-%m-%dT%H:%M:%SZ)] $*"
}

echodate "Downloading Kyverno CRDs for version $version..."

# Download and extract only CRDs
crds=$(mktemp)
curl -sL "$url" | yq eval-all 'select(.kind == "CustomResourceDefinition")' - > "$crds"

# Split on "---" manually
awk -v outdir="$crd_dir" -v version="$version" '
  BEGIN {
    fileIndex = 0;
    crd = "";
  }
  /^---/ {
    if (crd != "") {
      individual_crd_tempfile = "/tmp/tmp-crd-" fileIndex ".yaml"
      print crd > individual_crd_tempfile;

      cmd_get_plural = "yq eval \".spec.names.plural\" " individual_crd_tempfile
      pluralName = "unknown-plural-" fileIndex
      if ((cmd_get_plural | getline pn_line) > 0 && pn_line != "" && pn_line != "null") {
        pluralName = pn_line
      }
      close(cmd_get_plural)

      cmd_get_group = "yq eval \".spec.group\" " individual_crd_tempfile
      groupName = ""
      if ((cmd_get_group | getline gn_line) > 0 && gn_line != "" && gn_line != "null") {
        groupName = gn_line
      }
      close(cmd_get_group)
      
      if (groupName == "") {
        final_filename = outdir "/" pluralName ".yaml"
      } else {
        final_filename = outdir "/" pluralName "." groupName ".yaml"
      }

      cmd_process_crd = "yq eval '\''del(.metadata.creationTimestamp)'\'' " individual_crd_tempfile
      print "# This file has been generated by hack/update-kyverno-crds.sh using Kyverno version: " version ". Do not edit." > final_filename
      while ((cmd_process_crd | getline proc_line) > 0) {
        print proc_line >> final_filename
      }
      close(cmd_process_crd)

      system("rm -f " individual_crd_tempfile)
      crd = "";
      fileIndex++;
    }
    next;
  }
  {
    crd = crd $0 "\n";
  }
  END {
    if (crd != "") {
      individual_crd_tempfile = "/tmp/tmp-crd-" fileIndex ".yaml"
      print crd > individual_crd_tempfile;

      cmd_get_plural = "yq eval \".spec.names.plural\" " individual_crd_tempfile
      pluralName = "unknown-plural-" fileIndex
      if ((cmd_get_plural | getline pn_line) > 0 && pn_line != "" && pn_line != "null") {
        pluralName = pn_line
      }
      close(cmd_get_plural)

      cmd_get_group = "yq eval \".spec.group\" " individual_crd_tempfile
      groupName = ""
      if ((cmd_get_group | getline gn_line) > 0 && gn_line != "" && gn_line != "null") {
        groupName = gn_line
      }
      close(cmd_get_group)
      
      if (groupName == "") {
        final_filename = outdir "/" pluralName ".yaml"
      } else {
        final_filename = outdir "/" pluralName "." groupName ".yaml"
      }

      cmd_process_crd = "yq eval '\''del(.metadata.creationTimestamp)'\'' " individual_crd_tempfile
      print "# This file has been generated by hack/update-kyverno-crds.sh with Kyverno version " version ". Do not edit." > final_filename
      while ((cmd_process_crd | getline proc_line) > 0) {
        print proc_line >> final_filename
      }
      close(cmd_process_crd)

      system("rm -f " individual_crd_tempfile)
    }
  }
' "$crds"

rm -f "$crds"

echodate "Successfully extracted CRDs to $crd_dir"
