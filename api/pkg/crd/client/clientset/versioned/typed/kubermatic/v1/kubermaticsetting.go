// Code generated by client-gen. DO NOT EDIT.

package v1

import (
	"time"

	scheme "github.com/kubermatic/kubermatic/api/pkg/crd/client/clientset/versioned/scheme"
	v1 "github.com/kubermatic/kubermatic/api/pkg/crd/kubermatic/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	rest "k8s.io/client-go/rest"
)

// KubermaticSettingsGetter has a method to return a KubermaticSettingInterface.
// A group's client should implement this interface.
type KubermaticSettingsGetter interface {
	KubermaticSettings() KubermaticSettingInterface
}

// KubermaticSettingInterface has methods to work with KubermaticSetting resources.
type KubermaticSettingInterface interface {
	Create(*v1.KubermaticSetting) (*v1.KubermaticSetting, error)
	Update(*v1.KubermaticSetting) (*v1.KubermaticSetting, error)
	Delete(name string, options *metav1.DeleteOptions) error
	DeleteCollection(options *metav1.DeleteOptions, listOptions metav1.ListOptions) error
	Get(name string, options metav1.GetOptions) (*v1.KubermaticSetting, error)
	List(opts metav1.ListOptions) (*v1.KubermaticSettingList, error)
	Watch(opts metav1.ListOptions) (watch.Interface, error)
	Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1.KubermaticSetting, err error)
	KubermaticSettingExpansion
}

// kubermaticSettings implements KubermaticSettingInterface
type kubermaticSettings struct {
	client rest.Interface
}

// newKubermaticSettings returns a KubermaticSettings
func newKubermaticSettings(c *KubermaticV1Client) *kubermaticSettings {
	return &kubermaticSettings{
		client: c.RESTClient(),
	}
}

// Get takes name of the kubermaticSetting, and returns the corresponding kubermaticSetting object, and an error if there is any.
func (c *kubermaticSettings) Get(name string, options metav1.GetOptions) (result *v1.KubermaticSetting, err error) {
	result = &v1.KubermaticSetting{}
	err = c.client.Get().
		Resource("kubermaticsettings").
		Name(name).
		VersionedParams(&options, scheme.ParameterCodec).
		Do().
		Into(result)
	return
}

// List takes label and field selectors, and returns the list of KubermaticSettings that match those selectors.
func (c *kubermaticSettings) List(opts metav1.ListOptions) (result *v1.KubermaticSettingList, err error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	result = &v1.KubermaticSettingList{}
	err = c.client.Get().
		Resource("kubermaticsettings").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Do().
		Into(result)
	return
}

// Watch returns a watch.Interface that watches the requested kubermaticSettings.
func (c *kubermaticSettings) Watch(opts metav1.ListOptions) (watch.Interface, error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	opts.Watch = true
	return c.client.Get().
		Resource("kubermaticsettings").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Watch()
}

// Create takes the representation of a kubermaticSetting and creates it.  Returns the server's representation of the kubermaticSetting, and an error, if there is any.
func (c *kubermaticSettings) Create(kubermaticSetting *v1.KubermaticSetting) (result *v1.KubermaticSetting, err error) {
	result = &v1.KubermaticSetting{}
	err = c.client.Post().
		Resource("kubermaticsettings").
		Body(kubermaticSetting).
		Do().
		Into(result)
	return
}

// Update takes the representation of a kubermaticSetting and updates it. Returns the server's representation of the kubermaticSetting, and an error, if there is any.
func (c *kubermaticSettings) Update(kubermaticSetting *v1.KubermaticSetting) (result *v1.KubermaticSetting, err error) {
	result = &v1.KubermaticSetting{}
	err = c.client.Put().
		Resource("kubermaticsettings").
		Name(kubermaticSetting.Name).
		Body(kubermaticSetting).
		Do().
		Into(result)
	return
}

// Delete takes name of the kubermaticSetting and deletes it. Returns an error if one occurs.
func (c *kubermaticSettings) Delete(name string, options *metav1.DeleteOptions) error {
	return c.client.Delete().
		Resource("kubermaticsettings").
		Name(name).
		Body(options).
		Do().
		Error()
}

// DeleteCollection deletes a collection of objects.
func (c *kubermaticSettings) DeleteCollection(options *metav1.DeleteOptions, listOptions metav1.ListOptions) error {
	var timeout time.Duration
	if listOptions.TimeoutSeconds != nil {
		timeout = time.Duration(*listOptions.TimeoutSeconds) * time.Second
	}
	return c.client.Delete().
		Resource("kubermaticsettings").
		VersionedParams(&listOptions, scheme.ParameterCodec).
		Timeout(timeout).
		Body(options).
		Do().
		Error()
}

// Patch applies the patch and returns the patched kubermaticSetting.
func (c *kubermaticSettings) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1.KubermaticSetting, err error) {
	result = &v1.KubermaticSetting{}
	err = c.client.Patch(pt).
		Resource("kubermaticsettings").
		SubResource(subresources...).
		Name(name).
		Body(data).
		Do().
		Into(result)
	return
}
