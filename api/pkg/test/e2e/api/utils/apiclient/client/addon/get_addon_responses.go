// Code generated by go-swagger; DO NOT EDIT.

package addon

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/kubermatic/kubermatic/api/pkg/test/e2e/api/utils/apiclient/models"
)

// GetAddonReader is a Reader for the GetAddon structure.
type GetAddonReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetAddonReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetAddonOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetAddonUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetAddonForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewGetAddonDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetAddonOK creates a GetAddonOK with default headers values
func NewGetAddonOK() *GetAddonOK {
	return &GetAddonOK{}
}

/*GetAddonOK handles this case with default header values.

Addon
*/
type GetAddonOK struct {
	Payload *models.Addon
}

func (o *GetAddonOK) Error() string {
	return fmt.Sprintf("[GET /api/v1/projects/{project_id}/dc/{dc}/clusters/{cluster_id}/addons/{addon_id}][%d] getAddonOK  %+v", 200, o.Payload)
}

func (o *GetAddonOK) GetPayload() *models.Addon {
	return o.Payload
}

func (o *GetAddonOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Addon)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAddonUnauthorized creates a GetAddonUnauthorized with default headers values
func NewGetAddonUnauthorized() *GetAddonUnauthorized {
	return &GetAddonUnauthorized{}
}

/*GetAddonUnauthorized handles this case with default header values.

EmptyResponse is a empty response
*/
type GetAddonUnauthorized struct {
}

func (o *GetAddonUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/v1/projects/{project_id}/dc/{dc}/clusters/{cluster_id}/addons/{addon_id}][%d] getAddonUnauthorized ", 401)
}

func (o *GetAddonUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetAddonForbidden creates a GetAddonForbidden with default headers values
func NewGetAddonForbidden() *GetAddonForbidden {
	return &GetAddonForbidden{}
}

/*GetAddonForbidden handles this case with default header values.

EmptyResponse is a empty response
*/
type GetAddonForbidden struct {
}

func (o *GetAddonForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v1/projects/{project_id}/dc/{dc}/clusters/{cluster_id}/addons/{addon_id}][%d] getAddonForbidden ", 403)
}

func (o *GetAddonForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetAddonDefault creates a GetAddonDefault with default headers values
func NewGetAddonDefault(code int) *GetAddonDefault {
	return &GetAddonDefault{
		_statusCode: code,
	}
}

/*GetAddonDefault handles this case with default header values.

errorResponse
*/
type GetAddonDefault struct {
	_statusCode int

	Payload *models.ErrorResponse
}

// Code gets the status code for the get addon default response
func (o *GetAddonDefault) Code() int {
	return o._statusCode
}

func (o *GetAddonDefault) Error() string {
	return fmt.Sprintf("[GET /api/v1/projects/{project_id}/dc/{dc}/clusters/{cluster_id}/addons/{addon_id}][%d] getAddon default  %+v", o._statusCode, o.Payload)
}

func (o *GetAddonDefault) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetAddonDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
