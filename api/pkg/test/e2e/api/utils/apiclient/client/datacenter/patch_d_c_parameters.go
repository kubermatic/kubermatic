// Code generated by go-swagger; DO NOT EDIT.

package datacenter

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewPatchDCParams creates a new PatchDCParams object
// with the default values initialized.
func NewPatchDCParams() *PatchDCParams {
	var ()
	return &PatchDCParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewPatchDCParamsWithTimeout creates a new PatchDCParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPatchDCParamsWithTimeout(timeout time.Duration) *PatchDCParams {
	var ()
	return &PatchDCParams{

		timeout: timeout,
	}
}

// NewPatchDCParamsWithContext creates a new PatchDCParams object
// with the default values initialized, and the ability to set a context for a request
func NewPatchDCParamsWithContext(ctx context.Context) *PatchDCParams {
	var ()
	return &PatchDCParams{

		Context: ctx,
	}
}

// NewPatchDCParamsWithHTTPClient creates a new PatchDCParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewPatchDCParamsWithHTTPClient(client *http.Client) *PatchDCParams {
	var ()
	return &PatchDCParams{
		HTTPClient: client,
	}
}

/*PatchDCParams contains all the parameters to send to the API endpoint
for the patch d c operation typically these are written to a http.Request
*/
type PatchDCParams struct {

	/*Patch*/
	Patch interface{}
	/*Dc*/
	DCToPatch string
	/*SeedName*/
	Seed string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the patch d c params
func (o *PatchDCParams) WithTimeout(timeout time.Duration) *PatchDCParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the patch d c params
func (o *PatchDCParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the patch d c params
func (o *PatchDCParams) WithContext(ctx context.Context) *PatchDCParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the patch d c params
func (o *PatchDCParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the patch d c params
func (o *PatchDCParams) WithHTTPClient(client *http.Client) *PatchDCParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the patch d c params
func (o *PatchDCParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithPatch adds the patch to the patch d c params
func (o *PatchDCParams) WithPatch(patch interface{}) *PatchDCParams {
	o.SetPatch(patch)
	return o
}

// SetPatch adds the patch to the patch d c params
func (o *PatchDCParams) SetPatch(patch interface{}) {
	o.Patch = patch
}

// WithDCToPatch adds the dc to the patch d c params
func (o *PatchDCParams) WithDCToPatch(dc string) *PatchDCParams {
	o.SetDCToPatch(dc)
	return o
}

// SetDCToPatch adds the dc to the patch d c params
func (o *PatchDCParams) SetDCToPatch(dc string) {
	o.DCToPatch = dc
}

// WithSeed adds the seedName to the patch d c params
func (o *PatchDCParams) WithSeed(seedName string) *PatchDCParams {
	o.SetSeed(seedName)
	return o
}

// SetSeed adds the seedName to the patch d c params
func (o *PatchDCParams) SetSeed(seedName string) {
	o.Seed = seedName
}

// WriteToRequest writes these params to a swagger request
func (o *PatchDCParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Patch != nil {
		if err := r.SetBodyParam(o.Patch); err != nil {
			return err
		}
	}

	// path param dc
	if err := r.SetPathParam("dc", o.DCToPatch); err != nil {
		return err
	}

	// path param seed_name
	if err := r.SetPathParam("seed_name", o.Seed); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
