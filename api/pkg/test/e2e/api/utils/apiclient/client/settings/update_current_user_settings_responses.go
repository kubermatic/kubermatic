// Code generated by go-swagger; DO NOT EDIT.

package settings

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/kubermatic/kubermatic/api/pkg/test/e2e/api/utils/apiclient/models"
)

// UpdateCurrentUserSettingsReader is a Reader for the UpdateCurrentUserSettings structure.
type UpdateCurrentUserSettingsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateCurrentUserSettingsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewUpdateCurrentUserSettingsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewUpdateCurrentUserSettingsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewUpdateCurrentUserSettingsDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewUpdateCurrentUserSettingsOK creates a UpdateCurrentUserSettingsOK with default headers values
func NewUpdateCurrentUserSettingsOK() *UpdateCurrentUserSettingsOK {
	return &UpdateCurrentUserSettingsOK{}
}

/*UpdateCurrentUserSettingsOK handles this case with default header values.

User
*/
type UpdateCurrentUserSettingsOK struct {
	Payload *models.User
}

func (o *UpdateCurrentUserSettingsOK) Error() string {
	return fmt.Sprintf("[GET /api/v1/me][%d] updateCurrentUserSettingsOK  %+v", 200, o.Payload)
}

func (o *UpdateCurrentUserSettingsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.User)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateCurrentUserSettingsUnauthorized creates a UpdateCurrentUserSettingsUnauthorized with default headers values
func NewUpdateCurrentUserSettingsUnauthorized() *UpdateCurrentUserSettingsUnauthorized {
	return &UpdateCurrentUserSettingsUnauthorized{}
}

/*UpdateCurrentUserSettingsUnauthorized handles this case with default header values.

EmptyResponse is a empty response
*/
type UpdateCurrentUserSettingsUnauthorized struct {
}

func (o *UpdateCurrentUserSettingsUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/v1/me][%d] updateCurrentUserSettingsUnauthorized ", 401)
}

func (o *UpdateCurrentUserSettingsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateCurrentUserSettingsDefault creates a UpdateCurrentUserSettingsDefault with default headers values
func NewUpdateCurrentUserSettingsDefault(code int) *UpdateCurrentUserSettingsDefault {
	return &UpdateCurrentUserSettingsDefault{
		_statusCode: code,
	}
}

/*UpdateCurrentUserSettingsDefault handles this case with default header values.

errorResponse
*/
type UpdateCurrentUserSettingsDefault struct {
	_statusCode int

	Payload *models.ErrorResponse
}

// Code gets the status code for the update current user settings default response
func (o *UpdateCurrentUserSettingsDefault) Code() int {
	return o._statusCode
}

func (o *UpdateCurrentUserSettingsDefault) Error() string {
	return fmt.Sprintf("[GET /api/v1/me][%d] updateCurrentUserSettings default  %+v", o._statusCode, o.Payload)
}

func (o *UpdateCurrentUserSettingsDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
