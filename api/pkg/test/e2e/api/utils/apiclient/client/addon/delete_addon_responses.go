// Code generated by go-swagger; DO NOT EDIT.

package addon

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/kubermatic/kubermatic/api/pkg/test/e2e/api/utils/apiclient/models"
)

// DeleteAddonReader is a Reader for the DeleteAddon structure.
type DeleteAddonReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteAddonReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewDeleteAddonOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewDeleteAddonUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewDeleteAddonForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewDeleteAddonDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewDeleteAddonOK creates a DeleteAddonOK with default headers values
func NewDeleteAddonOK() *DeleteAddonOK {
	return &DeleteAddonOK{}
}

/*DeleteAddonOK handles this case with default header values.

EmptyResponse is a empty response
*/
type DeleteAddonOK struct {
}

func (o *DeleteAddonOK) Error() string {
	return fmt.Sprintf("[DELETE /api/v1/projects/{project_id}/dc/{dc}/clusters/{cluster_id}/addons/{addon_id}][%d] deleteAddonOK ", 200)
}

func (o *DeleteAddonOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteAddonUnauthorized creates a DeleteAddonUnauthorized with default headers values
func NewDeleteAddonUnauthorized() *DeleteAddonUnauthorized {
	return &DeleteAddonUnauthorized{}
}

/*DeleteAddonUnauthorized handles this case with default header values.

EmptyResponse is a empty response
*/
type DeleteAddonUnauthorized struct {
}

func (o *DeleteAddonUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /api/v1/projects/{project_id}/dc/{dc}/clusters/{cluster_id}/addons/{addon_id}][%d] deleteAddonUnauthorized ", 401)
}

func (o *DeleteAddonUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteAddonForbidden creates a DeleteAddonForbidden with default headers values
func NewDeleteAddonForbidden() *DeleteAddonForbidden {
	return &DeleteAddonForbidden{}
}

/*DeleteAddonForbidden handles this case with default header values.

EmptyResponse is a empty response
*/
type DeleteAddonForbidden struct {
}

func (o *DeleteAddonForbidden) Error() string {
	return fmt.Sprintf("[DELETE /api/v1/projects/{project_id}/dc/{dc}/clusters/{cluster_id}/addons/{addon_id}][%d] deleteAddonForbidden ", 403)
}

func (o *DeleteAddonForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteAddonDefault creates a DeleteAddonDefault with default headers values
func NewDeleteAddonDefault(code int) *DeleteAddonDefault {
	return &DeleteAddonDefault{
		_statusCode: code,
	}
}

/*DeleteAddonDefault handles this case with default header values.

errorResponse
*/
type DeleteAddonDefault struct {
	_statusCode int

	Payload *models.ErrorResponse
}

// Code gets the status code for the delete addon default response
func (o *DeleteAddonDefault) Code() int {
	return o._statusCode
}

func (o *DeleteAddonDefault) Error() string {
	return fmt.Sprintf("[DELETE /api/v1/projects/{project_id}/dc/{dc}/clusters/{cluster_id}/addons/{addon_id}][%d] deleteAddon default  %+v", o._statusCode, o.Payload)
}

func (o *DeleteAddonDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
