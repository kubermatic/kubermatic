// Code generated by go-swagger; DO NOT EDIT.

package versions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new versions API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for versions API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	GetKubermaticVersion(params *GetKubermaticVersionParams, authInfo runtime.ClientAuthInfoWriter) (*GetKubermaticVersionOK, error)

	GetMasterVersions(params *GetMasterVersionsParams, authInfo runtime.ClientAuthInfoWriter) (*GetMasterVersionsOK, error)

	GetNodeUpgrades(params *GetNodeUpgradesParams, authInfo runtime.ClientAuthInfoWriter) (*GetNodeUpgradesOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  GetKubermaticVersion gets versions of running kubermatic components
*/
func (a *Client) GetKubermaticVersion(params *GetKubermaticVersionParams, authInfo runtime.ClientAuthInfoWriter) (*GetKubermaticVersionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetKubermaticVersionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getKubermaticVersion",
		Method:             "GET",
		PathPattern:        "/api/v1/version",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetKubermaticVersionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetKubermaticVersionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetKubermaticVersionDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetMasterVersions Lists all versions which don't result in automatic updates
*/
func (a *Client) GetMasterVersions(params *GetMasterVersionsParams, authInfo runtime.ClientAuthInfoWriter) (*GetMasterVersionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMasterVersionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getMasterVersions",
		Method:             "GET",
		PathPattern:        "/api/v1/upgrades/cluster",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMasterVersionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetMasterVersionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetMasterVersionsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetNodeUpgrades Gets possible node upgrades for a specific control plane version
*/
func (a *Client) GetNodeUpgrades(params *GetNodeUpgradesParams, authInfo runtime.ClientAuthInfoWriter) (*GetNodeUpgradesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNodeUpgradesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getNodeUpgrades",
		Method:             "GET",
		PathPattern:        "/api/v1/upgrades/node",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNodeUpgradesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNodeUpgradesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetNodeUpgradesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
