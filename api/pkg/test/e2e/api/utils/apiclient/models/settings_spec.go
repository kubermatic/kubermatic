// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// SettingsSpec settings spec
// swagger:model SettingsSpec
type SettingsSpec struct {

	// cluster type options
	ClusterTypeOptions int8 `json:"clusterTypeOptions,omitempty"`

	// default node count
	DefaultNodeCount int8 `json:"defaultNodeCount,omitempty"`

	// display API docs
	DisplayAPIDocs bool `json:"displayAPIDocs,omitempty"`

	// display demo info
	DisplayDemoInfo bool `json:"displayDemoInfo,omitempty"`

	// display terms of service
	DisplayTermsOfService bool `json:"displayTermsOfService,omitempty"`

	// cleanup options
	CleanupOptions *CleanupOptions `json:"cleanupOptions,omitempty"`

	// custom links
	CustomLinks CustomLinks `json:"customLinks,omitempty"`
}

// Validate validates this settings spec
func (m *SettingsSpec) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCleanupOptions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCustomLinks(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SettingsSpec) validateCleanupOptions(formats strfmt.Registry) error {

	if swag.IsZero(m.CleanupOptions) { // not required
		return nil
	}

	if m.CleanupOptions != nil {
		if err := m.CleanupOptions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cleanupOptions")
			}
			return err
		}
	}

	return nil
}

func (m *SettingsSpec) validateCustomLinks(formats strfmt.Registry) error {

	if swag.IsZero(m.CustomLinks) { // not required
		return nil
	}

	if err := m.CustomLinks.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("customLinks")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SettingsSpec) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SettingsSpec) UnmarshalBinary(b []byte) error {
	var res SettingsSpec
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
