// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AWSNodeSpec AWSNodeSpec aws specific node settings
// swagger:model AWSNodeSpec
type AWSNodeSpec struct {

	// ami to use. Will be defaulted to a ami for your selected operating system and region. Only set this when you know what you do.
	AMI string `json:"ami,omitempty"`

	// This flag controls a property of the AWS instance. When set the AWS instance will get a public IP address
	// assigned during launch overriding a possible setting in the used AWS subnet.
	AssignPublicIP bool `json:"assignPublicIP,omitempty"`

	// Availiability zone in which to place the node. It is coupled with the subnet to which the node will belong.
	AvailabilityZone string `json:"availabilityZone,omitempty"`

	// instance type
	// Required: true
	InstanceType *string `json:"instanceType"`

	// The VPC subnet to which the node shall be connected.
	SubnetID string `json:"subnetID,omitempty"`

	// additional instance tags
	Tags map[string]string `json:"tags,omitempty"`

	// size of the volume in gb. Only one volume will be created
	// Required: true
	VolumeSize *int64 `json:"diskSize"`

	// volume type
	// Required: true
	VolumeType *string `json:"volumeType"`
}

// Validate validates this a w s node spec
func (m *AWSNodeSpec) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateInstanceType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVolumeSize(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVolumeType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AWSNodeSpec) validateInstanceType(formats strfmt.Registry) error {

	if err := validate.Required("instanceType", "body", m.InstanceType); err != nil {
		return err
	}

	return nil
}

func (m *AWSNodeSpec) validateVolumeSize(formats strfmt.Registry) error {

	if err := validate.Required("diskSize", "body", m.VolumeSize); err != nil {
		return err
	}

	return nil
}

func (m *AWSNodeSpec) validateVolumeType(formats strfmt.Registry) error {

	if err := validate.Required("volumeType", "body", m.VolumeType); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AWSNodeSpec) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AWSNodeSpec) UnmarshalBinary(b []byte) error {
	var res AWSNodeSpec
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
