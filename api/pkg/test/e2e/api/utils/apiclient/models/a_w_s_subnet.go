// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// AWSSubnet AWSSubnet represents a object of AWS availability subnet.
// swagger:model AWSSubnet
type AWSSubnet struct {

	// availability zone
	AvailabilityZone string `json:"availability_zone,omitempty"`

	// availability zone ID
	AvailabilityZoneID string `json:"availability_zone_id,omitempty"`

	// available IP address count
	AvailableIPAddressCount int64 `json:"available_ip_address_count,omitempty"`

	// default for az
	DefaultForAz bool `json:"default,omitempty"`

	// ID
	ID string `json:"id,omitempty"`

	// IPv4 c ID r
	IPV4CIDR string `json:"ipv4cidr,omitempty"`

	// IPv6 c ID r
	IPV6CIDR string `json:"ipv6cidr,omitempty"`

	// is default subnet
	IsDefaultSubnet bool `json:"isDefaultSubnet,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// state
	State string `json:"state,omitempty"`

	// tags
	Tags []*AWSTag `json:"tags"`
}

// Validate validates this a w s subnet
func (m *AWSSubnet) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTags(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AWSSubnet) validateTags(formats strfmt.Registry) error {

	if swag.IsZero(m.Tags) { // not required
		return nil
	}

	for i := 0; i < len(m.Tags); i++ {
		if swag.IsZero(m.Tags[i]) { // not required
			continue
		}

		if m.Tags[i] != nil {
			if err := m.Tags[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tags" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *AWSSubnet) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AWSSubnet) UnmarshalBinary(b []byte) error {
	var res AWSSubnet
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
