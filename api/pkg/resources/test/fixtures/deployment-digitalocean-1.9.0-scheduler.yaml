metadata:
  creationTimestamp: null
  labels:
    app: scheduler
  name: scheduler
  ownerReferences:
  - apiVersion: kubermatic.k8s.io/v1
    blockOwnerDeletion: true
    controller: true
    kind: Cluster
    name: de-test-01
    uid: "1234567890"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: scheduler
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
    type: RollingUpdate
  template:
    metadata:
      annotations:
        prometheus.io/path: /metrics
        prometheus.io/port: "10251"
        prometheus.io/scrape: "true"
      creationTimestamp: null
      labels:
        app: scheduler
    spec:
      containers:
      - args:
        - --client
        - --proto
        - tcp
        - --dev
        - tun
        - --auth-nocache
        - --remote
        - 192.0.2.13
        - "1194"
        - --nobind
        - --connect-timeout
        - "5"
        - --connect-retry
        - "1"
        - --ca
        - /etc/kubernetes/ca-cert/ca.crt
        - --cert
        - /etc/openvpn/certs/client.crt
        - --key
        - /etc/openvpn/certs/client.key
        - --remote-cert-tls
        - server
        - --link-mtu
        - "1432"
        - --cipher
        - AES-256-GCM
        - --auth
        - SHA1
        - --keysize
        - "256"
        - --script-security
        - "2"
        - --status
        - /run/openvpn-status
        - --log
        - /dev/stdout
        command:
        - /usr/sbin/openvpn
        image: docker.io/kubermatic/openvpn:v0.4
        imagePullPolicy: IfNotPresent
        name: openvpn-client
        resources:
          limits:
            cpu: 40m
            memory: 64Mi
          requests:
            cpu: 10m
            memory: 30Mi
        securityContext:
          privileged: true
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /etc/openvpn/certs
          name: openvpn-client-certificates
          readOnly: true
        - mountPath: /etc/kubernetes/ca-cert
          name: ca-cert
          readOnly: true
      - args:
        - --master
        - http://192.0.2.11:8080
        - --v
        - "4"
        command:
        - /hyperkube
        - scheduler
        image: gcr.io/google_containers/hyperkube-amd64:v1.9.0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          failureThreshold: 8
          httpGet:
            path: /healthz
            port: 10251
          initialDelaySeconds: 15
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 15
        name: scheduler
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /healthz
            port: 10251
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 15
        resources:
          limits:
            cpu: 100m
            memory: 128Mi
          requests:
            cpu: 20m
            memory: 64Mi
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
      dnsConfig:
        nameservers:
        - 10.10.10.10
        options:
        - name: ndots
          value: "5"
        searches:
        - kube-system.svc.cluster.local
        - svc.cluster.local
        - cluster.local
      dnsPolicy: None
      initContainers:
      - command:
        - /bin/sh
        - -ec
        - until wget -T 1 http://192.0.2.11:8080/healthz; do echo waiting for apiserver;
          sleep 2; done;
        image: docker.io/busybox
        imagePullPolicy: IfNotPresent
        name: apiserver-running
        resources: {}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
      volumes:
      - name: openvpn-client-certificates
        secret:
          defaultMode: 256
          secretName: openvpn-client-certificates
      - name: ca-cert
        secret:
          defaultMode: 256
          secretName: ca-cert
status: {}
