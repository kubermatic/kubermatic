metadata:
  creationTimestamp: null
  labels:
    app: apiserver
  name: apiserver
spec:
  replicas: 1
  selector:
    matchLabels:
      app: apiserver
  strategy: {}
  template:
    metadata:
      annotations:
        prometheus.io/path: /metrics
        prometheus.io/port: "30000"
        prometheus.io/scrape_with_kube_cert: "true"
      creationTimestamp: null
      labels:
        apiserver-etcd-client-certificate-secret-revision: "123456"
        apiserver-proxy-client-certificate-secret-revision: "123456"
        apiserver-tls-secret-revision: "123456"
        app: apiserver
        audit-config-configmap-revision: "123456"
        ca-secret-revision: "123456"
        cloud-config-configmap-revision: "123456"
        cluster: de-test-01
        dex-ca-secret-revision: "123456"
        front-proxy-ca-secret-revision: "123456"
        kubelet-client-certificates-secret-revision: "123456"
        kubeletdnatcontroller-kubeconfig-secret-revision: "123456"
        openvpn-client-certificates-secret-revision: "123456"
        service-account-key-secret-revision: "123456"
        tokens-secret-revision: "123456"
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchLabels:
                  app: apiserver
                  cluster: de-test-01
              topologyKey: kubernetes.io/hostname
            weight: 100
          - podAffinityTerm:
              labelSelector:
                matchLabels:
                  app: apiserver
              topologyKey: kubernetes.io/hostname
            weight: 10
      containers:
      - args:
        - --client
        - --proto
        - tcp
        - --dev
        - tun
        - --auth-nocache
        - --remote
        - openvpn-server.cluster-de-test-01.svc.cluster.local.
        - "1194"
        - --nobind
        - --connect-timeout
        - "5"
        - --connect-retry
        - "1"
        - --ca
        - /etc/openvpn/pki/client/ca.crt
        - --cert
        - /etc/openvpn/pki/client/client.crt
        - --key
        - /etc/openvpn/pki/client/client.key
        - --remote-cert-tls
        - server
        - --link-mtu
        - "1432"
        - --cipher
        - AES-256-GCM
        - --auth
        - SHA1
        - --keysize
        - "256"
        - --script-security
        - "2"
        - --status
        - /run/openvpn-status
        - --log
        - /dev/stdout
        command:
        - /usr/sbin/openvpn
        image: quay.io/kubermatic/openvpn:v0.5
        name: openvpn-client
        resources:
          limits:
            cpu: 100m
            memory: 32Mi
          requests:
            cpu: 5m
            memory: 5Mi
        securityContext:
          privileged: true
        volumeMounts:
        - mountPath: /etc/openvpn/pki/client
          name: openvpn-client-certificates
          readOnly: true
      - args:
        - -kubeconfig
        - /etc/kubernetes/kubeconfig/kubeconfig
        - -node-access-network
        - 192.0.2.0/24
        - -master
        - https://127.0.0.1:30000
        command:
        - /usr/local/bin/kubeletdnat-controller
        image: 'quay.io/kubermatic/kubeletdnat-controller:'
        name: dnat-controller
        resources:
          limits:
            cpu: 100m
            memory: 512Mi
          requests:
            cpu: 5m
            memory: 16Mi
        securityContext:
          capabilities:
            add:
            - NET_ADMIN
          procMount: Default
          runAsUser: 0
        volumeMounts:
        - mountPath: /etc/kubernetes/kubeconfig
          name: kubeletdnatcontroller-kubeconfig
          readOnly: true
      - args:
        - --advertise-address
        - 35.198.93.90
        - --secure-port
        - "30000"
        - --kubernetes-service-node-port
        - "30000"
        - --etcd-servers
        - https://etcd-0.etcd.cluster-de-test-01.svc.cluster.local.:2379,https://etcd-1.etcd.cluster-de-test-01.svc.cluster.local.:2379,https://etcd-2.etcd.cluster-de-test-01.svc.cluster.local.:2379
        - --etcd-cafile
        - /etc/etcd/pki/client/ca.crt
        - --etcd-certfile
        - /etc/etcd/pki/client/apiserver-etcd-client.crt
        - --etcd-keyfile
        - /etc/etcd/pki/client/apiserver-etcd-client.key
        - --storage-backend
        - etcd3
        - --enable-admission-plugins
        - NamespaceLifecycle,LimitRanger,ServiceAccount,DefaultStorageClass,DefaultTolerationSeconds,MutatingAdmissionWebhook,ValidatingAdmissionWebhook,Priority,ResourceQuota
        - --authorization-mode
        - Node,RBAC
        - --external-hostname
        - jh8j81chn.europe-west3-c.dev.kubermatic.io
        - --token-auth-file
        - /etc/kubernetes/tokens/tokens.csv
        - --enable-bootstrap-token-auth
        - "true"
        - --service-account-key-file
        - /etc/kubernetes/service-account-key/sa.key
        - --service-cluster-ip-range
        - 10.240.16.0/20
        - --service-node-port-range
        - 30000-32767
        - --allow-privileged
        - --audit-log-maxage
        - "30"
        - --audit-log-maxbackup
        - "3"
        - --audit-log-maxsize
        - "100"
        - --audit-log-path
        - /var/log/kubernetes/audit/audit.log
        - --tls-cert-file
        - /etc/kubernetes/tls/apiserver-tls.crt
        - --tls-private-key-file
        - /etc/kubernetes/tls/apiserver-tls.key
        - --proxy-client-cert-file
        - /etc/kubernetes/pki/front-proxy/client/apiserver-proxy-client.crt
        - --proxy-client-key-file
        - /etc/kubernetes/pki/front-proxy/client/apiserver-proxy-client.key
        - --client-ca-file
        - /etc/kubernetes/pki/ca/ca.crt
        - --kubelet-client-certificate
        - /etc/kubernetes/kubelet/kubelet-client.crt
        - --kubelet-client-key
        - /etc/kubernetes/kubelet/kubelet-client.key
        - --requestheader-client-ca-file
        - /etc/kubernetes/pki/front-proxy/ca/ca.crt
        - --requestheader-allowed-names
        - apiserver-aggregator
        - --requestheader-extra-headers-prefix
        - X-Remote-Extra-
        - --requestheader-group-headers
        - X-Remote-Group
        - --requestheader-username-headers
        - X-Remote-User
        - --kubelet-preferred-address-types
        - ExternalIP,InternalIP
        - --cloud-provider
        - azure
        - --cloud-config
        - /etc/kubernetes/cloud/config
        - --oidc-issuer-url
        - https://dev.kubermatic.io/dex
        - --oidc-client-id
        - kubermaticIssuer
        - --oidc-username-claim
        - email
        - --oidc-groups-prefix
        - 'oidc:'
        - --oidc-groups-claim
        - groups
        - --oidc-ca-file
        - /etc/kubernetes/dex/ca/caBundle.pem
        command:
        - /hyperkube
        - kube-apiserver
        env:
        - name: HTTP_PROXY
          value: http://my-corp
        - name: HTTPS_PROXY
          value: http://my-corp
        - name: http_proxy
          value: http://my-corp
        - name: https_proxy
          value: http://my-corp
        - name: NO_PROXY
          value: apiserver-external.cluster-de-test-01.svc.cluster.local.
        - name: no_proxy
          value: apiserver-external.cluster-de-test-01.svc.cluster.local.
        image: gcr.io/google_containers/hyperkube-amd64:v1.11.1
        livenessProbe:
          failureThreshold: 8
          httpGet:
            path: /healthz
            port: 30000
            scheme: HTTPS
          initialDelaySeconds: 15
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 15
        name: apiserver
        ports:
        - containerPort: 30000
          protocol: TCP
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /healthz
            port: 30000
            scheme: HTTPS
          periodSeconds: 5
          successThreshold: 1
          timeoutSeconds: 15
        resources:
          limits:
            cpu: "2"
            memory: 4Gi
          requests:
            cpu: 100m
            memory: 256Mi
        volumeMounts:
        - mountPath: /etc/kubernetes/tls
          name: apiserver-tls
          readOnly: true
        - mountPath: /etc/kubernetes/tokens
          name: tokens
          readOnly: true
        - mountPath: /etc/kubernetes/kubelet
          name: kubelet-client-certificates
          readOnly: true
        - mountPath: /etc/kubernetes/pki/ca
          name: ca
          readOnly: true
        - mountPath: /etc/kubernetes/service-account-key
          name: service-account-key
          readOnly: true
        - mountPath: /etc/kubernetes/cloud
          name: cloud-config
          readOnly: true
        - mountPath: /etc/etcd/pki/client
          name: apiserver-etcd-client-certificate
          readOnly: true
        - mountPath: /etc/kubernetes/pki/front-proxy/client
          name: apiserver-proxy-client-certificate
          readOnly: true
        - mountPath: /etc/kubernetes/pki/front-proxy/ca
          name: front-proxy-ca
          readOnly: true
        - mountPath: /etc/kubernetes/audit
          name: audit-config
          readOnly: true
        - mountPath: /var/log/kubernetes/audit
          name: audit-log
        - mountPath: /etc/kubernetes/dex/ca
          name: dex-ca
          readOnly: true
      dnsConfig:
        nameservers:
        - 192.0.2.14
        options:
        - name: ndots
          value: "5"
        searches:
        - kube-system.svc.cluster.local
        - svc.cluster.local
        - cluster.local
      dnsPolicy: None
      imagePullSecrets:
      - name: dockercfg
      initContainers:
      - command:
        - /bin/sh
        - -ec
        - until ETCDCTL_API=3 /usr/local/bin/etcdctl --cacert=/etc/etcd/pki/client/ca.crt
          --cert=/etc/etcd/pki/client/apiserver-etcd-client.crt --key=/etc/etcd/pki/client/apiserver-etcd-client.key
          --dial-timeout=2s --endpoints='https://etcd-0.etcd.cluster-de-test-01.svc.cluster.local.:2379,https://etcd-1.etcd.cluster-de-test-01.svc.cluster.local.:2379,https://etcd-2.etcd.cluster-de-test-01.svc.cluster.local.:2379'
          put kubermatic/quorum-check something; do echo waiting for etcd; sleep 2;
          done;
        image: gcr.io/etcd-development/etcd:v3.3.15
        name: etcd-running
        resources: {}
        volumeMounts:
        - mountPath: /etc/etcd/pki/client
          name: apiserver-etcd-client-certificate
          readOnly: true
      volumes:
      - name: apiserver-tls
        secret:
          secretName: apiserver-tls
      - name: tokens
        secret:
          secretName: tokens
      - name: openvpn-client-certificates
        secret:
          secretName: openvpn-client-certificates
      - name: kubelet-client-certificates
        secret:
          secretName: kubelet-client-certificates
      - name: ca
        secret:
          items:
          - key: ca.crt
            path: ca.crt
          secretName: ca
      - name: service-account-key
        secret:
          secretName: service-account-key
      - configMap:
          name: cloud-config
        name: cloud-config
      - name: apiserver-etcd-client-certificate
        secret:
          secretName: apiserver-etcd-client-certificate
      - name: apiserver-proxy-client-certificate
        secret:
          secretName: apiserver-proxy-client-certificate
      - name: front-proxy-ca
        secret:
          secretName: front-proxy-ca
      - name: kubeletdnatcontroller-kubeconfig
        secret:
          secretName: kubeletdnatcontroller-kubeconfig
      - configMap:
          name: audit-config
          optional: false
        name: audit-config
      - emptyDir: {}
        name: audit-log
      - name: dex-ca
        secret:
          secretName: dex-ca
status: {}
