apiVersion: apps/v1
kind: Deployment
metadata:
  creationTimestamp: null
  name: apiserver
  ownerReferences:
  - apiVersion: kubermatic.k8s.io/v1
    blockOwnerDeletion: true
    controller: true
    kind: Cluster
    name: de-test-01
    uid: "1234567890"
spec:
  replicas: 1
  selector:
    matchLabels:
      role: apiserver
      version: v1
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
    type: RollingUpdate
  template:
    metadata:
      creationTimestamp: null
      labels:
        apiserver-tls-secret-revision: "123456"
        ca-cert-secret-revision: "123456"
        cloud-config-configmap-revision: "123456"
        kubelet-client-certificates-secret-revision: "123456"
        release: v1.9.0
        role: apiserver
        service-account-key-secret-revision: "123456"
        tokens-secret-revision: "123456"
        version: v1
    spec:
      containers:
      - args:
        - --client
        - --proto
        - tcp
        - --dev
        - tun
        - --auth-nocache
        - --remote
        - openvpn-server
        - "1194"
        - --nobind
        - --connect-timeout
        - "5"
        - --connect-retry
        - "1"
        - --ca
        - /etc/kubernetes/ca-cert/ca.crt
        - --cert
        - /etc/openvpn/certs/client.crt
        - --key
        - /etc/openvpn/certs/client.key
        - --remote-cert-tls
        - server
        - --link-mtu
        - "1432"
        - --cipher
        - AES-256-GCM
        - --auth
        - SHA1
        - --keysize
        - "256"
        - --script-security
        - "2"
        - --up
        - /bin/touch /tmp/running
        - --log
        - /dev/stdout
        command:
        - /usr/sbin/openvpn
        image: kubermatic/openvpn:v0.2
        name: openvpn-client
        readinessProbe:
          exec:
            command:
            - cat
            - /tmp/running
          initialDelaySeconds: 5
          periodSeconds: 5
        resources: {}
        securityContext:
          privileged: true
        volumeMounts:
        - mountPath: /etc/openvpn/certs
          name: openvpn-client-certificates
          readOnly: true
        - mountPath: /etc/kubernetes/ca-cert
          name: ca-cert
          readOnly: true
      - command:
        - /hyperkube
        - apiserver
        - --advertise-address=35.198.93.90
        - --secure-port=30000
        - --kubernetes-service-node-port=30000
        - --insecure-bind-address=0.0.0.0
        - --insecure-port=8080
        - --etcd-servers=http://etcd-cluster-client:2379
        - --storage-backend=etcd3
        - --admission-control=NamespaceLifecycle,LimitRanger,ServiceAccount,DefaultStorageClass,ResourceQuota,NodeRestriction
        - --authorization-mode=Node,RBAC
        - --external-hostname=jh8j81chn.europe-west3-c.dev.kubermatic.io
        - --token-auth-file=/etc/kubernetes/tokens/tokens.csv
        - --enable-bootstrap-token-auth=true
        - --feature-gates=DynamicKubeletConfig=true
        - --service-account-key-file=/etc/kubernetes/service-account-key/sa.key
        - --service-cluster-ip-range=10.10.10.0/24
        - --service-node-port-range=30000-32767
        - --allow-privileged
        - --audit-log-maxage=30
        - --audit-log-maxbackup=3
        - --audit-log-maxsize=100
        - --audit-log-path=/var/log/audit.log
        - --tls-cert-file=/etc/kubernetes/tls/apiserver-tls.crt
        - --tls-private-key-file=/etc/kubernetes/tls/apiserver-tls.key
        - --client-ca-file=/etc/kubernetes/ca-cert/ca.crt
        - --kubelet-client-certificate=/etc/kubernetes/kubelet/kubelet-client.crt
        - --kubelet-client-key=/etc/kubernetes/kubelet/kubelet-client.key
        - --cloud-config=/etc/kubernetes/cloud/config
        - --cloud-provider=aws
        - --kubelet-preferred-address-types=ExternalIP,InternalIP
        - --v=4
        image: gcr.io/google_containers/hyperkube-amd64:v1.9.0
        livenessProbe:
          failureThreshold: 8
          httpGet:
            path: /healthz
            port: 8080
          initialDelaySeconds: 15
          timeoutSeconds: 15
        name: apiserver
        ports:
        - containerPort: 30000
        - containerPort: 8080
        readinessProbe:
          httpGet:
            path: /healthz
            port: 8080
          periodSeconds: 5
          timeoutSeconds: 15
        resources: {}
        volumeMounts:
        - mountPath: /etc/kubernetes/tls
          name: apiserver-tls
          readOnly: true
        - mountPath: /etc/kubernetes/tokens
          name: tokens
          readOnly: true
        - mountPath: /etc/kubernetes/kubelet
          name: kubelet-client-certificates
          readOnly: true
        - mountPath: /etc/kubernetes/ca-cert
          name: ca-cert
          readOnly: true
        - mountPath: /etc/kubernetes/service-account-key
          name: service-account-key
          readOnly: true
        - mountPath: /etc/kubernetes/cloud
          name: cloud-config
          readOnly: true
      initContainers:
      - command:
        - /bin/sh
        - -ec
        - until ETCDCTL_API=3 /usr/local/bin/etcdctl --dial-timeout=2s --endpoints=[http://etcd-cluster-client:2379]
          get foo; do echo waiting for etcd; sleep 2; done;
        image: quay.io/coreos/etcd:v3.2.7
        name: etcd-running
        resources: {}
      volumes:
      - name: apiserver-tls
        secret:
          defaultMode: 256
          secretName: apiserver-tls
      - name: tokens
        secret:
          defaultMode: 256
          secretName: tokens
      - name: openvpn-client-certificates
        secret:
          defaultMode: 256
          secretName: openvpn-client-certificates
      - name: kubelet-client-certificates
        secret:
          defaultMode: 256
          secretName: kubelet-client-certificates
      - name: ca-cert
        secret:
          defaultMode: 256
          secretName: ca-cert
      - name: service-account-key
        secret:
          defaultMode: 256
          secretName: service-account-key
      - configMap:
          name: cloud-config
        name: cloud-config
status: {}
