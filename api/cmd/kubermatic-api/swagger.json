{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "swagger": "2.0",
  "info": {
    "description": "Kubermatic API\n\nThis describes possible operations which can be made against the Kubermatic API.",
    "title": "Kubermatic API.",
    "termsOfService": "There are no TOS at this moment, use at your own risk we take no responsibility",
    "version": "2.11"
  },
  "paths": {
    "/api/v1/addons": {
      "post": {
        "description": "Lists names of addons that can be configured inside the user clusters",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "operationId": "addon",
        "responses": {
          "200": {
            "description": "AccessibleAddons",
            "schema": {
              "$ref": "#/definitions/AccessibleAddons"
            }
          },
          "401": {
            "$ref": "#/responses/empty"
          },
          "403": {
            "$ref": "#/responses/empty"
          },
          "default": {
            "description": "errorResponse",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/api/v1/admin": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "admin"
        ],
        "summary": "Returns list of admin users.",
        "operationId": "getAdmins",
        "responses": {
          "200": {
            "description": "Admin",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Admin"
              }
            }
          },
          "401": {
            "$ref": "#/responses/empty"
          },
          "403": {
            "$ref": "#/responses/empty"
          },
          "default": {
            "description": "errorResponse",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "admin"
        ],
        "summary": "Allows setting and clearing admin role for users.",
        "operationId": "setAdmin",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Admin"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Admin",
            "schema": {
              "$ref": "#/definitions/Admin"
            }
          },
          "401": {
            "$ref": "#/responses/empty"
          },
          "403": {
            "$ref": "#/responses/empty"
          },
          "default": {
            "description": "errorResponse",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/api/v1/admin/settings": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "admin"
        ],
        "summary": "Gets the global settings.",
        "operationId": "getKubermaticSettings",
        "responses": {
          "200": {
            "description": "GlobalSettings",
            "schema": {
              "$ref": "#/definitions/GlobalSettings"
            }
          },
          "401": {
            "$ref": "#/responses/empty"
          },
          "403": {
            "$ref": "#/responses/empty"
          },
          "default": {
            "description": "errorResponse",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      },
      "patch": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "admin"
        ],
        "summary": "Patches the global settings.",
        "operationId": "patchKubermaticSettings",
        "parameters": [
          {
            "name": "Patch",
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint8"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "GlobalSettings",
            "schema": {
              "$ref": "#/definitions/GlobalSettings"
            }
          },
          "401": {
            "$ref": "#/responses/empty"
          },
          "403": {
            "$ref": "#/responses/empty"
          },
          "default": {
            "description": "errorResponse",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/api/v1/dc": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "datacenter"
        ],
        "operationId": "listDatacenters",
        "responses": {
          "200": {
            "description": "DatacenterList",
            "schema": {
              "$ref": "#/definitions/DatacenterList"
            }
          },
          "default": {
            "description": "errorResponse",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/api/v1/dc/{dc}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "datacenter"
        ],
        "operationId": "getDatacenter",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "DC",
            "name": "dc",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Datacenter",
            "schema": {
              "$ref": "#/definitions/Datacenter"
            }
          },
          "default": {
            "description": "errorResponse",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/api/v1/kubeconfig": {
      "get": {
        "description": "Starts OIDC flow and generates kubeconfig, the generated config\ncontains OIDC provider authentication info",
        "produces": [
          "application/json"
        ],
        "operationId": "createOIDCKubeconfig",
        "parameters": [
          {
            "type": "string",
            "name": "ClusterID",
            "in": "query"
          },
          {
            "type": "string",
            "name": "ProjectID",
            "in": "query"
          },
          {
            "type": "string",
            "name": "UserID",
            "in": "query"
          },
          {
            "type": "string",
            "name": "Datacenter",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Kubeconfig",
            "schema": {
              "$ref": "#/definitions/Kubeconfig"
            }
          },
          "default": {
            "description": "errorResponse",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/api/v1/labels/system": {
      "patch": {
        "description": "List restricted system labels",
        "produces": [
          "application/json"
        ],
        "operationId": "listSystemLabels",
        "responses": {
          "200": {
            "description": "ResourceLabelMap",
            "schema": {
              "$ref": "#/definitions/ResourceLabelMap"
            }
          },
          "401": {
            "$ref": "#/responses/empty"
          },
          "403": {
            "$ref": "#/responses/empty"
          },
          "default": {
            "description": "errorResponse",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/api/v1/me": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "users"
        ],
        "summary": "Returns information about the current user.",
        "operationId": "getCurrentUser",
        "responses": {
          "200": {
            "description": "User",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "401": {
            "$ref": "#/responses/empty"
          },
          "default": {
            "description": "errorResponse",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/api/v1/me/settings": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "settings"
        ],
        "summary": "Returns settings of the current user.",
        "operationId": "getCurrentUserSettings",
        "responses": {
          "200": {
            "description": "UserSettings",
            "schema": {
              "$ref": "#/definitions/UserSettings"
            }
          },
          "401": {
            "$ref": "#/responses/empty"
          },
          "default": {
            "description": "errorResponse",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      },
      "patch": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "settings"
        ],
        "summary": "Updates settings of the current user.",
        "operationId": "patchCurrentUserSettings",
        "parameters": [
          {
            "name": "Patch",
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint8"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "UserSettings",
            "schema": {
              "$ref": "#/definitions/UserSettings"
            }
          },
          "401": {
            "$ref": "#/responses/empty"
          },
          "default": {
            "description": "errorResponse",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/api/v1/projects": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "project"
        ],
        "summary": "Lists projects that an authenticated user is a member of.",
        "operationId": "listProjects",
        "responses": {
          "200": {
            "description": "Project",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Project"
              }
            }
          },
          "401": {
            "$ref": "#/responses/empty"
          },
          "409": {
            "$ref": "#/responses/empty"
          },
          "default": {
            "description": "errorResponse",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      },
      "post": {
        "description": "Note that this endpoint can be consumed by every authenticated user.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "project"
        ],
        "summary": "Creates a brand new project.",
        "operationId": "createProject",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "labels": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  },
                  "x-go-name": "Labels"
                },
                "name": {
                  "type": "string",
                  "x-go-name": "Name"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Project",
            "schema": {
              "$ref": "#/definitions/Project"
            }
          },
          "401": {
            "$ref": "#/responses/empty"
          },
          "409": {
            "$ref": "#/responses/empty"
          },
          "default": {
            "description": "errorResponse",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/api/v1/projects/{project_id}": {
      "get": {
        "description": "Gets the project with the given ID",
        "produces": [
          "application/json"
        ],
        "tags": [
          "project"
        ],
        "operationId": "getProject",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Project",
            "schema": {
              "$ref": "#/definitions/Project"
            }
          },
          "401": {
            "$ref": "#/responses/empty"
          },
          "409": {
            "$ref": "#/responses/empty"
          },
          "default": {
            "description": "errorResponse",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      },
      "put": {
        "description": "Updates the given project",
        "produces": [
          "application/json"
        ],
        "tags": [
          "project"
        ],
        "operationId": "updateProject",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          },
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Project"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Project",
            "schema": {
              "$ref": "#/definitions/Project"
            }
          },
          "400": {
            "$ref": "#/responses/empty"
          },
          "404": {
            "$ref": "#/responses/empty"
          },
          "500": {
            "$ref": "#/responses/empty"
          },
          "501": {
            "$ref": "#/responses/empty"
          },
          "default": {
            "description": "errorResponse",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      },
      "delete": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "project"
        ],
        "summary": "Deletes the project with the given ID.",
        "operationId": "deleteProject",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/empty"
          },
          "401": {
            "$ref": "#/responses/empty"
          },
          "403": {
            "$ref": "#/responses/empty"
          },
          "default": {
            "description": "errorResponse",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/api/v1/projects/{project_id}/clusters": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "project"
        ],
        "summary": "Lists clusters for the specified project.",
        "operationId": "listClustersForProject",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ClusterList",
            "schema": {
              "$ref": "#/definitions/ClusterList"
            }
          },
          "401": {
            "$ref": "#/responses/empty"
          },
          "403": {
            "$ref": "#/responses/empty"
          },
          "default": {
            "description": "errorResponse",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/api/v1/projects/{project_id}/dc/{dc}/clusters": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "project"
        ],
        "summary": "Lists clusters for the specified project and data center.",
        "operationId": "listClusters",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "DC",
            "name": "dc",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ClusterList",
            "schema": {
              "$ref": "#/definitions/ClusterList"
            }
          },
          "401": {
            "$ref": "#/responses/empty"
          },
          "403": {
            "$ref": "#/responses/empty"
          },
          "default": {
            "description": "errorResponse",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "project"
        ],
        "summary": "Creates a cluster for the given project.",
        "operationId": "createCluster",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "DC",
            "name": "dc",
            "in": "path",
            "required": true
          },
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/CreateClusterSpec"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Cluster",
            "schema": {
              "$ref": "#/definitions/Cluster"
            }
          },
          "401": {
            "$ref": "#/responses/empty"
          },
          "403": {
            "$ref": "#/responses/empty"
          },
          "default": {
            "description": "errorResponse",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/api/v1/projects/{project_id}/dc/{dc}/clusters/{cluster_id}": {
      "get": {
        "description": "Gets the cluster with the given name",
        "produces": [
          "application/json"
        ],
        "tags": [
          "project"
        ],
        "operationId": "getCluster",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "DC",
            "name": "dc",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "ClusterID",
            "name": "cluster_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Cluster",
            "schema": {
              "$ref": "#/definitions/Cluster"
            }
          },
          "401": {
            "$ref": "#/responses/empty"
          },
          "403": {
            "$ref": "#/responses/empty"
          },
          "default": {
            "description": "errorResponse",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      },
      "delete": {
        "description": "Deletes the specified cluster",
        "produces": [
          "application/json"
        ],
        "tags": [
          "project"
        ],
        "operationId": "deleteCluster",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "DC",
            "name": "dc",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "ClusterID",
            "name": "cluster_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/empty"
          },
          "401": {
            "$ref": "#/responses/empty"
          },
          "403": {
            "$ref": "#/responses/empty"
          },
          "default": {
            "description": "errorResponse",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      },
      "patch": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "project"
        ],
        "summary": "Patches the given cluster using JSON Merge Patch method (https://tools.ietf.org/html/rfc7396).",
        "operationId": "patchCluster",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "DC",
            "name": "dc",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "ClusterID",
            "name": "cluster_id",
            "in": "path",
            "required": true
          },
          {
            "name": "Patch",
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint8"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Cluster",
            "schema": {
              "$ref": "#/definitions/Cluster"
            }
          },
          "401": {
            "$ref": "#/responses/empty"
          },
          "403": {
            "$ref": "#/responses/empty"
          },
          "default": {
            "description": "errorResponse",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/api/v1/projects/{project_id}/dc/{dc}/clusters/{cluster_id}/addons": {
      "get": {
        "description": "Lists addons that belong to the given cluster",
        "produces": [
          "application/json"
        ],
        "tags": [
          "addon"
        ],
        "operationId": "listAddons",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "DC",
            "name": "dc",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "ClusterID",
            "name": "cluster_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Addon",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Addon"
              }
            }
          },
          "401": {
            "$ref": "#/responses/empty"
          },
          "403": {
            "$ref": "#/responses/empty"
          },
          "default": {
            "description": "errorResponse",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      },
      "post": {
        "description": "Creates an addon that will belong to the given cluster",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "addon"
        ],
        "operationId": "createAddon",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "DC",
            "name": "dc",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "ClusterID",
            "name": "cluster_id",
            "in": "path",
            "required": true
          },
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Addon"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Addon",
            "schema": {
              "$ref": "#/definitions/Addon"
            }
          },
          "401": {
            "$ref": "#/responses/empty"
          },
          "403": {
            "$ref": "#/responses/empty"
          },
          "default": {
            "description": "errorResponse",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/api/v1/projects/{project_id}/dc/{dc}/clusters/{cluster_id}/addons/{addon_id}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "addon"
        ],
        "summary": "Gets an addon that is assigned to the given cluster.",
        "operationId": "getAddon",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "DC",
            "name": "dc",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "ClusterID",
            "name": "cluster_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "AddonID",
            "name": "addon_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Addon",
            "schema": {
              "$ref": "#/definitions/Addon"
            }
          },
          "401": {
            "$ref": "#/responses/empty"
          },
          "403": {
            "$ref": "#/responses/empty"
          },
          "default": {
            "description": "errorResponse",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      },
      "delete": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "addon"
        ],
        "summary": "Deletes the given addon that belongs to the cluster.",
        "operationId": "deleteAddon",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "DC",
            "name": "dc",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "ClusterID",
            "name": "cluster_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "AddonID",
            "name": "addon_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/empty"
          },
          "401": {
            "$ref": "#/responses/empty"
          },
          "403": {
            "$ref": "#/responses/empty"
          },
          "default": {
            "description": "errorResponse",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      },
      "patch": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "addon"
        ],
        "summary": "Patches an addon that is assigned to the given cluster.",
        "operationId": "patchAddon",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "DC",
            "name": "dc",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "ClusterID",
            "name": "cluster_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "AddonID",
            "name": "addon_id",
            "in": "path",
            "required": true
          },
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Addon"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Addon",
            "schema": {
              "$ref": "#/definitions/Addon"
            }
          },
          "401": {
            "$ref": "#/responses/empty"
          },
          "403": {
            "$ref": "#/responses/empty"
          },
          "default": {
            "description": "errorResponse",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/api/v1/projects/{project_id}/dc/{dc}/clusters/{cluster_id}/clusterroles": {
      "get": {
        "description": "Lists all ClusterRoles",
        "produces": [
          "application/json"
        ],
        "tags": [
          "project"
        ],
        "operationId": "listClusterRole",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "DC",
            "name": "dc",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "ClusterID",
            "name": "cluster_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ClusterRole",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ClusterRole"
              }
            }
          },
          "401": {
            "$ref": "#/responses/empty"
          },
          "403": {
            "$ref": "#/responses/empty"
          },
          "default": {
            "description": "errorResponse",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      },
      "post": {
        "description": "Creates cluster role",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "project"
        ],
        "operationId": "createClusterRole",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "DC",
            "name": "dc",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "ClusterID",
            "name": "cluster_id",
            "in": "path",
            "required": true
          },
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ClusterRole"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "ClusterRole",
            "schema": {
              "$ref": "#/definitions/ClusterRole"
            }
          },
          "401": {
            "$ref": "#/responses/empty"
          },
          "403": {
            "$ref": "#/responses/empty"
          },
          "default": {
            "description": "errorResponse",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/api/v1/projects/{project_id}/dc/{dc}/clusters/{cluster_id}/clusterroles/{role_id}": {
      "delete": {
        "description": "Delete the cluster role with the given name",
        "produces": [
          "application/json"
        ],
        "tags": [
          "project"
        ],
        "operationId": "deleteClusterRole",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "DC",
            "name": "dc",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "ClusterID",
            "name": "cluster_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "RoleID",
            "name": "role_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/empty"
          },
          "401": {
            "$ref": "#/responses/empty"
          },
          "403": {
            "$ref": "#/responses/empty"
          },
          "default": {
            "description": "errorResponse",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      },
      "patch": {
        "description": "Patch the cluster role with the given name",
        "produces": [
          "application/json"
        ],
        "tags": [
          "project"
        ],
        "operationId": "patchClusterRole",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "DC",
            "name": "dc",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "ClusterID",
            "name": "cluster_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "RoleID",
            "name": "role_id",
            "in": "path",
            "required": true
          },
          {
            "name": "Patch",
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint8"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ClusterRole",
            "schema": {
              "$ref": "#/definitions/ClusterRole"
            }
          },
          "401": {
            "$ref": "#/responses/empty"
          },
          "403": {
            "$ref": "#/responses/empty"
          },
          "default": {
            "description": "errorResponse",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/api/v1/projects/{project_id}/dc/{dc}/clusters/{cluster_id}/clusterroles/{role_id}/clusterbindings": {
      "get": {
        "description": "List cluster role binding",
        "produces": [
          "application/json"
        ],
        "tags": [
          "project"
        ],
        "operationId": "listClusterRoleBinding",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "DC",
            "name": "dc",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "ClusterID",
            "name": "cluster_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "RoleID",
            "name": "role_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ClusterRoleBinding",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ClusterRoleBinding"
              }
            }
          },
          "401": {
            "$ref": "#/responses/empty"
          },
          "403": {
            "$ref": "#/responses/empty"
          },
          "default": {
            "description": "errorResponse",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      },
      "post": {
        "description": "Creates cluster role binding",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "project"
        ],
        "operationId": "createClusterRoleBinding",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "DC",
            "name": "dc",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "ClusterID",
            "name": "cluster_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "RoleID",
            "name": "role_id",
            "in": "path",
            "required": true
          },
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ClusterRoleBinding"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "ClusterRoleBinding",
            "schema": {
              "$ref": "#/definitions/ClusterRoleBinding"
            }
          },
          "401": {
            "$ref": "#/responses/empty"
          },
          "403": {
            "$ref": "#/responses/empty"
          },
          "default": {
            "description": "errorResponse",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/api/v1/projects/{project_id}/dc/{dc}/clusters/{cluster_id}/clusterroles/{role_id}/clusterbindings/{binding_id}": {
      "get": {
        "description": "Get cluster role binding",
        "produces": [
          "application/json"
        ],
        "tags": [
          "project"
        ],
        "operationId": "getClusterRoleBinding",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "DC",
            "name": "dc",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "ClusterID",
            "name": "cluster_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "RoleID",
            "name": "role_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "BindingID",
            "name": "binding_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ClusterRoleBinding",
            "schema": {
              "$ref": "#/definitions/ClusterRoleBinding"
            }
          },
          "401": {
            "$ref": "#/responses/empty"
          },
          "403": {
            "$ref": "#/responses/empty"
          },
          "default": {
            "description": "errorResponse",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      },
      "delete": {
        "description": "Delete cluster role binding",
        "produces": [
          "application/json"
        ],
        "tags": [
          "project"
        ],
        "operationId": "deleteClusterRoleBinding",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "DC",
            "name": "dc",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "ClusterID",
            "name": "cluster_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "RoleID",
            "name": "role_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "BindingID",
            "name": "binding_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/empty"
          },
          "401": {
            "$ref": "#/responses/empty"
          },
          "403": {
            "$ref": "#/responses/empty"
          },
          "default": {
            "description": "errorResponse",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      },
      "patch": {
        "description": "Update cluster role binding",
        "produces": [
          "application/json"
        ],
        "tags": [
          "project"
        ],
        "operationId": "patchClusterRoleBinding",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "DC",
            "name": "dc",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "ClusterID",
            "name": "cluster_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "RoleID",
            "name": "role_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "BindingID",
            "name": "binding_id",
            "in": "path",
            "required": true
          },
          {
            "name": "Patch",
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint8"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ClusterRoleBinding",
            "schema": {
              "$ref": "#/definitions/ClusterRoleBinding"
            }
          },
          "401": {
            "$ref": "#/responses/empty"
          },
          "403": {
            "$ref": "#/responses/empty"
          },
          "default": {
            "description": "errorResponse",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/api/v1/projects/{project_id}/dc/{dc}/clusters/{cluster_id}/events": {
      "get": {
        "produces": [
          "application/yaml"
        ],
        "tags": [
          "project"
        ],
        "summary": "Gets the events related to the specified cluster.",
        "operationId": "getClusterEvents",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "DC",
            "name": "dc",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "ClusterID",
            "name": "cluster_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "Type",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Event",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Event"
              }
            }
          },
          "401": {
            "$ref": "#/responses/empty"
          },
          "403": {
            "$ref": "#/responses/empty"
          },
          "default": {
            "description": "errorResponse",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/api/v1/projects/{project_id}/dc/{dc}/clusters/{cluster_id}/health": {
      "get": {
        "description": "Returns the cluster's component health status",
        "produces": [
          "application/json"
        ],
        "tags": [
          "project"
        ],
        "operationId": "getClusterHealth",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "DC",
            "name": "dc",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "ClusterID",
            "name": "cluster_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ClusterHealth",
            "schema": {
              "$ref": "#/definitions/ClusterHealth"
            }
          },
          "401": {
            "$ref": "#/responses/empty"
          },
          "403": {
            "$ref": "#/responses/empty"
          },
          "default": {
            "description": "errorResponse",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/api/v1/projects/{project_id}/dc/{dc}/clusters/{cluster_id}/kubeconfig": {
      "get": {
        "produces": [
          "application/yaml"
        ],
        "tags": [
          "project"
        ],
        "summary": "Gets the kubeconfig for the specified cluster.",
        "operationId": "getClusterKubeconfig",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "DC",
            "name": "dc",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "ClusterID",
            "name": "cluster_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Kubeconfig",
            "schema": {
              "$ref": "#/definitions/Kubeconfig"
            }
          },
          "401": {
            "$ref": "#/responses/empty"
          },
          "403": {
            "$ref": "#/responses/empty"
          },
          "default": {
            "description": "errorResponse",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/api/v1/projects/{project_id}/dc/{dc}/clusters/{cluster_id}/metrics": {
      "get": {
        "description": "Gets cluster metrics",
        "produces": [
          "application/json"
        ],
        "tags": [
          "project"
        ],
        "operationId": "getClusterMetrics",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "DC",
            "name": "dc",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "ClusterID",
            "name": "cluster_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ClusterMetrics",
            "schema": {
              "$ref": "#/definitions/ClusterMetrics"
            }
          },
          "401": {
            "$ref": "#/responses/empty"
          },
          "403": {
            "$ref": "#/responses/empty"
          },
          "default": {
            "description": "errorResponse",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/api/v1/projects/{project_id}/dc/{dc}/clusters/{cluster_id}/namespaces": {
      "get": {
        "description": "Lists all namespaces in the cluster",
        "produces": [
          "application/json"
        ],
        "tags": [
          "project"
        ],
        "operationId": "listNamespace",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "DC",
            "name": "dc",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "ClusterID",
            "name": "cluster_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Namespace",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Namespace"
              }
            }
          },
          "401": {
            "$ref": "#/responses/empty"
          },
          "403": {
            "$ref": "#/responses/empty"
          },
          "default": {
            "description": "errorResponse",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/api/v1/projects/{project_id}/dc/{dc}/clusters/{cluster_id}/nodedeployments": {
      "get": {
        "description": "Lists node deployments that belong to the given cluster",
        "produces": [
          "application/json"
        ],
        "tags": [
          "project"
        ],
        "operationId": "listNodeDeployments",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "DC",
            "name": "dc",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "ClusterID",
            "name": "cluster_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "NodeDeployment",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/NodeDeployment"
              }
            }
          },
          "401": {
            "$ref": "#/responses/empty"
          },
          "403": {
            "$ref": "#/responses/empty"
          },
          "default": {
            "description": "errorResponse",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      },
      "post": {
        "description": "Creates a node deployment that will belong to the given cluster",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "project"
        ],
        "operationId": "createNodeDeployment",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "DC",
            "name": "dc",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "ClusterID",
            "name": "cluster_id",
            "in": "path",
            "required": true
          },
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/NodeDeployment"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "NodeDeployment",
            "schema": {
              "$ref": "#/definitions/NodeDeployment"
            }
          },
          "401": {
            "$ref": "#/responses/empty"
          },
          "403": {
            "$ref": "#/responses/empty"
          },
          "default": {
            "description": "errorResponse",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/api/v1/projects/{project_id}/dc/{dc}/clusters/{cluster_id}/nodedeployments/{nodedeployment_id}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "project"
        ],
        "summary": "Gets a node deployment that is assigned to the given cluster.",
        "operationId": "getNodeDeployment",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "DC",
            "name": "dc",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "ClusterID",
            "name": "cluster_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "NodeDeploymentID",
            "name": "nodedeployment_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "NodeDeployment",
            "schema": {
              "$ref": "#/definitions/NodeDeployment"
            }
          },
          "401": {
            "$ref": "#/responses/empty"
          },
          "403": {
            "$ref": "#/responses/empty"
          },
          "default": {
            "description": "errorResponse",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      },
      "delete": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "project"
        ],
        "summary": "Deletes the given node deployment that belongs to the cluster.",
        "operationId": "deleteNodeDeployment",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "DC",
            "name": "dc",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "ClusterID",
            "name": "cluster_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "NodeDeploymentID",
            "name": "nodedeployment_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/empty"
          },
          "401": {
            "$ref": "#/responses/empty"
          },
          "403": {
            "$ref": "#/responses/empty"
          },
          "default": {
            "description": "errorResponse",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      },
      "patch": {
        "description": "Patches a node deployment that is assigned to the given cluster. Please note that at the moment only\nnode deployment's spec can be updated by a patch, no other fields can be changed using this endpoint.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "project"
        ],
        "operationId": "patchNodeDeployment",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "DC",
            "name": "dc",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "ClusterID",
            "name": "cluster_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "NodeDeploymentID",
            "name": "nodedeployment_id",
            "in": "path",
            "required": true
          },
          {
            "name": "Patch",
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint8"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "NodeDeployment",
            "schema": {
              "$ref": "#/definitions/NodeDeployment"
            }
          },
          "401": {
            "$ref": "#/responses/empty"
          },
          "403": {
            "$ref": "#/responses/empty"
          },
          "default": {
            "description": "errorResponse",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/api/v1/projects/{project_id}/dc/{dc}/clusters/{cluster_id}/nodedeployments/{nodedeployment_id}/nodes": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "project"
        ],
        "summary": "Lists nodes that belong to the given node deployment.",
        "operationId": "listNodeDeploymentNodes",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "DC",
            "name": "dc",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "ClusterID",
            "name": "cluster_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "NodeDeploymentID",
            "name": "nodedeployment_id",
            "in": "path",
            "required": true
          },
          {
            "type": "boolean",
            "x-go-name": "HideInitialConditions",
            "name": "hideInitialConditions",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Node",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Node"
              }
            }
          },
          "401": {
            "$ref": "#/responses/empty"
          },
          "403": {
            "$ref": "#/responses/empty"
          },
          "default": {
            "description": "errorResponse",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/api/v1/projects/{project_id}/dc/{dc}/clusters/{cluster_id}/nodedeployments/{nodedeployment_id}/nodes/events": {
      "get": {
        "description": "If the value is 'normal' then normal events are returned. If the query parameter is missing method returns all events.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "project"
        ],
        "summary": "Lists node deployment events. If query parameter `type` is set to `warning` then only warning events are retrieved.",
        "operationId": "listNodeDeploymentNodesEvents",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "DC",
            "name": "dc",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "ClusterID",
            "name": "cluster_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "Type",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "NodeDeploymentID",
            "name": "nodedeployment_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Event",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Event"
              }
            }
          },
          "401": {
            "$ref": "#/responses/empty"
          },
          "403": {
            "$ref": "#/responses/empty"
          },
          "default": {
            "description": "errorResponse",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/api/v1/projects/{project_id}/dc/{dc}/clusters/{cluster_id}/nodedeployments/{nodedeployment_id}/nodes/metrics": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "metric"
        ],
        "summary": "Lists metrics that belong to the given node deployment.",
        "operationId": "listNodeDeploymentMetrics",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "DC",
            "name": "dc",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "ClusterID",
            "name": "cluster_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "NodeDeploymentID",
            "name": "nodedeployment_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "NodeMetric",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/NodeMetric"
              }
            }
          },
          "401": {
            "$ref": "#/responses/empty"
          },
          "403": {
            "$ref": "#/responses/empty"
          },
          "default": {
            "description": "errorResponse",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/api/v1/projects/{project_id}/dc/{dc}/clusters/{cluster_id}/nodes": {
      "get": {
        "description": "This endpoint is deprecated, please create a Node Deployment instead.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "project"
        ],
        "summary": "Deprecated:\nLists nodes that belong to the given cluster",
        "operationId": "listNodesForClusterLegacy",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "DC",
            "name": "dc",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "ClusterID",
            "name": "cluster_id",
            "in": "path",
            "required": true
          },
          {
            "type": "boolean",
            "x-go-name": "HideInitialConditions",
            "name": "hideInitialConditions",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Node",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Node"
              }
            }
          },
          "401": {
            "$ref": "#/responses/empty"
          },
          "403": {
            "$ref": "#/responses/empty"
          },
          "default": {
            "description": "errorResponse",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      },
      "post": {
        "description": "This endpoint is deprecated, please create a Node Deployment instead.\nUse POST /api/v1/projects/{project_id}/dc/{dc}/clusters/{cluster_id}/nodedeployments",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "project"
        ],
        "summary": "Deprecated:\nCreates a node that will belong to the given cluster",
        "operationId": "createNodeForClusterLegacy",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "DC",
            "name": "dc",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "ClusterID",
            "name": "cluster_id",
            "in": "path",
            "required": true
          },
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Node"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Node",
            "schema": {
              "$ref": "#/definitions/Node"
            }
          },
          "401": {
            "$ref": "#/responses/empty"
          },
          "403": {
            "$ref": "#/responses/empty"
          },
          "default": {
            "description": "errorResponse",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/api/v1/projects/{project_id}/dc/{dc}/clusters/{cluster_id}/nodes/upgrades": {
      "put": {
        "description": "Upgrades node deployments in a cluster",
        "produces": [
          "application/json"
        ],
        "tags": [
          "project"
        ],
        "operationId": "upgradeClusterNodeDeployments",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "DC",
            "name": "dc",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "ClusterID",
            "name": "cluster_id",
            "in": "path",
            "required": true
          },
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/MasterVersion"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/empty"
          },
          "401": {
            "$ref": "#/responses/empty"
          },
          "403": {
            "$ref": "#/responses/empty"
          },
          "default": {
            "description": "errorResponse",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/api/v1/projects/{project_id}/dc/{dc}/clusters/{cluster_id}/nodes/{node_id}": {
      "get": {
        "description": "This endpoint is deprecated, please create a Node Deployment instead.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "project"
        ],
        "summary": "Deprecated:\nGets a node that is assigned to the given cluster.",
        "operationId": "getNodeForClusterLegacy",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "DC",
            "name": "dc",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "ClusterID",
            "name": "cluster_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "NodeID",
            "name": "node_id",
            "in": "path",
            "required": true
          },
          {
            "type": "boolean",
            "x-go-name": "HideInitialConditions",
            "name": "hideInitialConditions",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Node",
            "schema": {
              "$ref": "#/definitions/Node"
            }
          },
          "401": {
            "$ref": "#/responses/empty"
          },
          "403": {
            "$ref": "#/responses/empty"
          },
          "default": {
            "description": "errorResponse",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      },
      "delete": {
        "description": "This endpoint is deprecated, please create a Node Deployment instead.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "project"
        ],
        "summary": "Deprecated:\nDeletes the given node that belongs to the cluster.",
        "operationId": "deleteNodeForClusterLegacy",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "DC",
            "name": "dc",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "ClusterID",
            "name": "cluster_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "NodeID",
            "name": "node_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/empty"
          },
          "401": {
            "$ref": "#/responses/empty"
          },
          "403": {
            "$ref": "#/responses/empty"
          },
          "default": {
            "description": "errorResponse",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/api/v1/projects/{project_id}/dc/{dc}/clusters/{cluster_id}/oidckubeconfig": {
      "get": {
        "produces": [
          "application/yaml"
        ],
        "tags": [
          "project"
        ],
        "summary": "Gets the kubeconfig for the specified cluster with oidc authentication.",
        "operationId": "getOidcClusterKubeconfig",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "DC",
            "name": "dc",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "ClusterID",
            "name": "cluster_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Kubeconfig",
            "schema": {
              "$ref": "#/definitions/Kubeconfig"
            }
          },
          "401": {
            "$ref": "#/responses/empty"
          },
          "403": {
            "$ref": "#/responses/empty"
          },
          "default": {
            "description": "errorResponse",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/api/v1/projects/{project_id}/dc/{dc}/clusters/{cluster_id}/providers/aws/sizes": {
      "get": {
        "description": "Lists available AWS sizes",
        "produces": [
          "application/json"
        ],
        "tags": [
          "aws"
        ],
        "operationId": "listAWSSizesNoCredentials",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "DC",
            "name": "dc",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "ClusterID",
            "name": "cluster_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "AWSSizeList",
            "schema": {
              "$ref": "#/definitions/AWSSizeList"
            }
          },
          "default": {
            "description": "errorResponse",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/api/v1/projects/{project_id}/dc/{dc}/clusters/{cluster_id}/providers/aws/subnets": {
      "get": {
        "description": "Lists available AWS subnets",
        "produces": [
          "application/json"
        ],
        "tags": [
          "aws"
        ],
        "operationId": "listAWSSubnetsNoCredentials",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "DC",
            "name": "dc",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "ClusterID",
            "name": "cluster_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "AWSSubnetList",
            "schema": {
              "$ref": "#/definitions/AWSSubnetList"
            }
          },
          "default": {
            "description": "errorResponse",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/api/v1/projects/{project_id}/dc/{dc}/clusters/{cluster_id}/providers/azure/sizes": {
      "get": {
        "description": "Lists available VM sizes in an Azure region",
        "produces": [
          "application/json"
        ],
        "tags": [
          "azure"
        ],
        "operationId": "listAzureSizesNoCredentials",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "DC",
            "name": "dc",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "ClusterID",
            "name": "cluster_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "AzureSizeList",
            "schema": {
              "$ref": "#/definitions/AzureSizeList"
            }
          },
          "default": {
            "description": "errorResponse",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/api/v1/projects/{project_id}/dc/{dc}/clusters/{cluster_id}/providers/digitalocean/sizes": {
      "get": {
        "description": "Lists sizes from digitalocean",
        "produces": [
          "application/json"
        ],
        "tags": [
          "digitalocean"
        ],
        "operationId": "listDigitaloceanSizesNoCredentials",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "DC",
            "name": "dc",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "ClusterID",
            "name": "cluster_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "DigitaloceanSizeList",
            "schema": {
              "$ref": "#/definitions/DigitaloceanSizeList"
            }
          },
          "default": {
            "description": "errorResponse",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/api/v1/projects/{project_id}/dc/{dc}/clusters/{cluster_id}/providers/gcp/disktypes": {
      "get": {
        "description": "Lists disk types from GCP",
        "produces": [
          "application/json"
        ],
        "tags": [
          "gcp"
        ],
        "operationId": "listGCPDiskTypesNoCredentials",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "DC",
            "name": "dc",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "ClusterID",
            "name": "cluster_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "Zone",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "GCPDiskTypeList",
            "schema": {
              "$ref": "#/definitions/GCPDiskTypeList"
            }
          },
          "default": {
            "description": "errorResponse",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/api/v1/projects/{project_id}/dc/{dc}/clusters/{cluster_id}/providers/gcp/sizes": {
      "get": {
        "description": "Lists machine sizes from GCP",
        "produces": [
          "application/json"
        ],
        "tags": [
          "gcp"
        ],
        "operationId": "listGCPSizesNoCredentials",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "DC",
            "name": "dc",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "ClusterID",
            "name": "cluster_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "Zone",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "GCPMachineSizeList",
            "schema": {
              "$ref": "#/definitions/GCPMachineSizeList"
            }
          },
          "default": {
            "description": "errorResponse",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/api/v1/projects/{project_id}/dc/{dc}/clusters/{cluster_id}/providers/gcp/zones": {
      "get": {
        "description": "Lists available GCP zones",
        "produces": [
          "application/json"
        ],
        "tags": [
          "gcp"
        ],
        "operationId": "listGCPZonesNoCredentials",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "DC",
            "name": "dc",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "ClusterID",
            "name": "cluster_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "GCPZoneList",
            "schema": {
              "$ref": "#/definitions/GCPZoneList"
            }
          },
          "default": {
            "description": "errorResponse",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/api/v1/projects/{project_id}/dc/{dc}/clusters/{cluster_id}/providers/hetzner/sizes": {
      "get": {
        "description": "Lists sizes from hetzner",
        "produces": [
          "application/json"
        ],
        "tags": [
          "hetzner"
        ],
        "operationId": "listHetznerSizesNoCredentials",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "DC",
            "name": "dc",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "ClusterID",
            "name": "cluster_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "HetznerSizeList",
            "schema": {
              "$ref": "#/definitions/HetznerSizeList"
            }
          },
          "default": {
            "description": "errorResponse",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/api/v1/projects/{project_id}/dc/{dc}/clusters/{cluster_id}/providers/openstack/networks": {
      "get": {
        "description": "Lists networks from openstack",
        "produces": [
          "application/json"
        ],
        "tags": [
          "openstack"
        ],
        "operationId": "listOpenstackNetworksNoCredentials",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "DC",
            "name": "dc",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "ClusterID",
            "name": "cluster_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OpenstackNetwork",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/OpenstackNetwork"
              }
            }
          },
          "default": {
            "description": "errorResponse",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/api/v1/projects/{project_id}/dc/{dc}/clusters/{cluster_id}/providers/openstack/securitygroups": {
      "get": {
        "description": "Lists security groups from openstack",
        "produces": [
          "application/json"
        ],
        "tags": [
          "openstack"
        ],
        "operationId": "listOpenstackSecurityGroupsNoCredentials",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "DC",
            "name": "dc",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "ClusterID",
            "name": "cluster_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OpenstackSecurityGroup",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/OpenstackSecurityGroup"
              }
            }
          },
          "default": {
            "description": "errorResponse",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/api/v1/projects/{project_id}/dc/{dc}/clusters/{cluster_id}/providers/openstack/sizes": {
      "get": {
        "description": "Lists sizes from openstack",
        "produces": [
          "application/json"
        ],
        "tags": [
          "openstack"
        ],
        "operationId": "listOpenstackSizesNoCredentials",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "DC",
            "name": "dc",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "ClusterID",
            "name": "cluster_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OpenstackSize",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/OpenstackSize"
              }
            }
          },
          "default": {
            "description": "errorResponse",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/api/v1/projects/{project_id}/dc/{dc}/clusters/{cluster_id}/providers/openstack/subnets": {
      "get": {
        "description": "Lists subnets from openstack",
        "produces": [
          "application/json"
        ],
        "tags": [
          "openstack"
        ],
        "operationId": "listOpenstackSubnetsNoCredentials",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "DC",
            "name": "dc",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "ClusterID",
            "name": "cluster_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "NetworkID",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OpenstackSubnet",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/OpenstackSubnet"
              }
            }
          },
          "default": {
            "description": "errorResponse",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/api/v1/projects/{project_id}/dc/{dc}/clusters/{cluster_id}/providers/openstack/tenants": {
      "get": {
        "description": "Lists tenants from openstack",
        "produces": [
          "application/json"
        ],
        "tags": [
          "openstack"
        ],
        "operationId": "listOpenstackTenantsNoCredentials",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "DC",
            "name": "dc",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "ClusterID",
            "name": "cluster_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OpenstackTenant",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/OpenstackTenant"
              }
            }
          },
          "default": {
            "description": "errorResponse",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/api/v1/projects/{project_id}/dc/{dc}/clusters/{cluster_id}/providers/packet/sizes": {
      "get": {
        "description": "Lists sizes from packet",
        "produces": [
          "application/json"
        ],
        "tags": [
          "packet"
        ],
        "operationId": "listPacketSizesNoCredentials",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "DC",
            "name": "dc",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "ClusterID",
            "name": "cluster_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "PacketSizeList",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PacketSizeList"
              }
            }
          },
          "default": {
            "description": "errorResponse",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/api/v1/projects/{project_id}/dc/{dc}/clusters/{cluster_id}/providers/vsphere/folders": {
      "get": {
        "description": "Lists folders from vsphere datacenter",
        "produces": [
          "application/json"
        ],
        "tags": [
          "vsphere"
        ],
        "operationId": "listVSphereFoldersNoCredentials",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "DC",
            "name": "dc",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "ClusterID",
            "name": "cluster_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "VSphereFolder",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/VSphereFolder"
              }
            }
          },
          "default": {
            "description": "errorResponse",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/api/v1/projects/{project_id}/dc/{dc}/clusters/{cluster_id}/providers/vsphere/networks": {
      "get": {
        "description": "Lists networks from vsphere datacenter",
        "produces": [
          "application/json"
        ],
        "tags": [
          "vsphere"
        ],
        "operationId": "listVSphereNetworksNoCredentials",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "DC",
            "name": "dc",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "ClusterID",
            "name": "cluster_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "VSphereNetwork",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/VSphereNetwork"
              }
            }
          },
          "default": {
            "description": "errorResponse",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/api/v1/projects/{project_id}/dc/{dc}/clusters/{cluster_id}/roles": {
      "get": {
        "description": "Lists all Roles",
        "produces": [
          "application/json"
        ],
        "tags": [
          "project"
        ],
        "operationId": "listRole",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "DC",
            "name": "dc",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "ClusterID",
            "name": "cluster_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Role",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Role"
              }
            }
          },
          "401": {
            "$ref": "#/responses/empty"
          },
          "403": {
            "$ref": "#/responses/empty"
          },
          "default": {
            "description": "errorResponse",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      },
      "post": {
        "description": "Creates cluster role",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "project"
        ],
        "operationId": "createRole",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "DC",
            "name": "dc",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "ClusterID",
            "name": "cluster_id",
            "in": "path",
            "required": true
          },
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Role"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Role",
            "schema": {
              "$ref": "#/definitions/Role"
            }
          },
          "401": {
            "$ref": "#/responses/empty"
          },
          "403": {
            "$ref": "#/responses/empty"
          },
          "default": {
            "description": "errorResponse",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/api/v1/projects/{project_id}/dc/{dc}/clusters/{cluster_id}/roles/{namespace}/{role_id}": {
      "get": {
        "description": "Gets the role with the given name",
        "produces": [
          "application/json"
        ],
        "tags": [
          "project"
        ],
        "operationId": "getRole",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "DC",
            "name": "dc",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "ClusterID",
            "name": "cluster_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "RoleID",
            "name": "role_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Role",
            "schema": {
              "$ref": "#/definitions/Role"
            }
          },
          "401": {
            "$ref": "#/responses/empty"
          },
          "403": {
            "$ref": "#/responses/empty"
          },
          "default": {
            "description": "errorResponse",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      },
      "delete": {
        "description": "Delete the cluster role with the given name",
        "produces": [
          "application/json"
        ],
        "tags": [
          "project"
        ],
        "operationId": "deleteRole",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "DC",
            "name": "dc",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "ClusterID",
            "name": "cluster_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "RoleID",
            "name": "role_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/empty"
          },
          "401": {
            "$ref": "#/responses/empty"
          },
          "403": {
            "$ref": "#/responses/empty"
          },
          "default": {
            "description": "errorResponse",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      },
      "patch": {
        "description": "Patch the role with the given name",
        "produces": [
          "application/json"
        ],
        "tags": [
          "project"
        ],
        "operationId": "patchRole",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "DC",
            "name": "dc",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "ClusterID",
            "name": "cluster_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "RoleID",
            "name": "role_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "name": "Patch",
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint8"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Role",
            "schema": {
              "$ref": "#/definitions/Role"
            }
          },
          "401": {
            "$ref": "#/responses/empty"
          },
          "403": {
            "$ref": "#/responses/empty"
          },
          "default": {
            "description": "errorResponse",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/api/v1/projects/{project_id}/dc/{dc}/clusters/{cluster_id}/roles/{namespace}/{role_id}/bindings": {
      "get": {
        "description": "List role binding",
        "produces": [
          "application/json"
        ],
        "tags": [
          "project"
        ],
        "operationId": "listRoleBinding",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "DC",
            "name": "dc",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "ClusterID",
            "name": "cluster_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "RoleID",
            "name": "role_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "RoleBinding",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/RoleBinding"
              }
            }
          },
          "401": {
            "$ref": "#/responses/empty"
          },
          "403": {
            "$ref": "#/responses/empty"
          },
          "default": {
            "description": "errorResponse",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      },
      "post": {
        "description": "Creates role binding",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "project"
        ],
        "operationId": "createRoleBinding",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "DC",
            "name": "dc",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "ClusterID",
            "name": "cluster_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "RoleID",
            "name": "role_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/RoleBinding"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "RoleBinding",
            "schema": {
              "$ref": "#/definitions/RoleBinding"
            }
          },
          "401": {
            "$ref": "#/responses/empty"
          },
          "403": {
            "$ref": "#/responses/empty"
          },
          "default": {
            "description": "errorResponse",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/api/v1/projects/{project_id}/dc/{dc}/clusters/{cluster_id}/roles/{namespace}/{role_id}/bindings/{binding_id}": {
      "get": {
        "description": "Get role binding",
        "produces": [
          "application/json"
        ],
        "tags": [
          "project"
        ],
        "operationId": "getRoleBinding",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "DC",
            "name": "dc",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "ClusterID",
            "name": "cluster_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "RoleID",
            "name": "role_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "BindingID",
            "name": "binding_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "RoleBinding",
            "schema": {
              "$ref": "#/definitions/RoleBinding"
            }
          },
          "401": {
            "$ref": "#/responses/empty"
          },
          "403": {
            "$ref": "#/responses/empty"
          },
          "default": {
            "description": "errorResponse",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      },
      "delete": {
        "description": "Delete role binding",
        "produces": [
          "application/json"
        ],
        "tags": [
          "project"
        ],
        "operationId": "deleteRoleBinding",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "DC",
            "name": "dc",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "ClusterID",
            "name": "cluster_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "RoleID",
            "name": "role_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "BindingID",
            "name": "binding_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/empty"
          },
          "401": {
            "$ref": "#/responses/empty"
          },
          "403": {
            "$ref": "#/responses/empty"
          },
          "default": {
            "description": "errorResponse",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      },
      "patch": {
        "description": "Update role binding",
        "produces": [
          "application/json"
        ],
        "tags": [
          "project"
        ],
        "operationId": "patchRoleBinding",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "DC",
            "name": "dc",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "ClusterID",
            "name": "cluster_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "RoleID",
            "name": "role_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "BindingID",
            "name": "binding_id",
            "in": "path",
            "required": true
          },
          {
            "name": "Patch",
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint8"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "RoleBinding",
            "schema": {
              "$ref": "#/definitions/RoleBinding"
            }
          },
          "401": {
            "$ref": "#/responses/empty"
          },
          "403": {
            "$ref": "#/responses/empty"
          },
          "default": {
            "description": "errorResponse",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/api/v1/projects/{project_id}/dc/{dc}/clusters/{cluster_id}/roles/{role_id}": {
      "get": {
        "description": "Gets the cluster role with the given name",
        "produces": [
          "application/json"
        ],
        "tags": [
          "project"
        ],
        "operationId": "getClusterRole",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "DC",
            "name": "dc",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "ClusterID",
            "name": "cluster_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "RoleID",
            "name": "role_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ClusterRole",
            "schema": {
              "$ref": "#/definitions/ClusterRole"
            }
          },
          "401": {
            "$ref": "#/responses/empty"
          },
          "403": {
            "$ref": "#/responses/empty"
          },
          "default": {
            "description": "errorResponse",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/api/v1/projects/{project_id}/dc/{dc}/clusters/{cluster_id}/sshkeys": {
      "get": {
        "description": "Lists ssh keys that are assigned to the cluster\nThe returned collection is sorted by creation timestamp.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "project"
        ],
        "operationId": "listSSHKeysAssignedToCluster",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "DC",
            "name": "dc",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "ClusterID",
            "name": "cluster_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "SSHKey",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SSHKey"
              }
            }
          },
          "401": {
            "$ref": "#/responses/empty"
          },
          "403": {
            "$ref": "#/responses/empty"
          },
          "default": {
            "description": "errorResponse",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/api/v1/projects/{project_id}/dc/{dc}/clusters/{cluster_id}/sshkeys/{key_id}": {
      "put": {
        "description": "Assigns an existing ssh key to the given cluster",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "project"
        ],
        "operationId": "assignSSHKeyToCluster",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "DC",
            "name": "dc",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "ClusterID",
            "name": "cluster_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "KeyID",
            "name": "key_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "SSHKey",
            "schema": {
              "$ref": "#/definitions/SSHKey"
            }
          },
          "401": {
            "$ref": "#/responses/empty"
          },
          "403": {
            "$ref": "#/responses/empty"
          },
          "default": {
            "description": "errorResponse",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      },
      "delete": {
        "description": "Unassignes an ssh key from the given cluster",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "project"
        ],
        "operationId": "detachSSHKeyFromCluster",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "DC",
            "name": "dc",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "KeyID",
            "name": "key_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "ClusterID",
            "name": "cluster_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/empty"
          },
          "401": {
            "$ref": "#/responses/empty"
          },
          "403": {
            "$ref": "#/responses/empty"
          },
          "default": {
            "description": "errorResponse",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/api/v1/projects/{project_id}/dc/{dc}/clusters/{cluster_id}/token": {
      "put": {
        "description": "Revokes the current admin token",
        "produces": [
          "application/json"
        ],
        "tags": [
          "project"
        ],
        "operationId": "revokeClusterAdminToken",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "DC",
            "name": "dc",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "ClusterID",
            "name": "cluster_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/empty"
          },
          "401": {
            "$ref": "#/responses/empty"
          },
          "403": {
            "$ref": "#/responses/empty"
          },
          "default": {
            "description": "errorResponse",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/api/v1/projects/{project_id}/dc/{dc}/clusters/{cluster_id}/upgrades": {
      "get": {
        "description": "Gets possible cluster upgrades",
        "produces": [
          "application/json"
        ],
        "tags": [
          "project"
        ],
        "operationId": "getClusterUpgrades",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "DC",
            "name": "dc",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "ClusterID",
            "name": "cluster_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "MasterVersion",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MasterVersion"
              }
            }
          },
          "401": {
            "$ref": "#/responses/empty"
          },
          "403": {
            "$ref": "#/responses/empty"
          },
          "default": {
            "description": "errorResponse",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/api/v1/projects/{project_id}/dc/{dc}/clusters/{cluster_id}/viewertoken": {
      "put": {
        "description": "Revokes the current viewer token",
        "produces": [
          "application/json"
        ],
        "tags": [
          "project"
        ],
        "operationId": "revokeClusterViewerToken",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "DC",
            "name": "dc",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "ClusterID",
            "name": "cluster_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/empty"
          },
          "401": {
            "$ref": "#/responses/empty"
          },
          "403": {
            "$ref": "#/responses/empty"
          },
          "default": {
            "description": "errorResponse",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/api/v1/projects/{project_id}/serviceaccounts": {
      "get": {
        "description": "List Service Accounts for the given project",
        "produces": [
          "application/json"
        ],
        "tags": [
          "serviceaccounts"
        ],
        "operationId": "listServiceAccounts",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ServiceAccount",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ServiceAccount"
              }
            }
          },
          "401": {
            "$ref": "#/responses/empty"
          },
          "403": {
            "$ref": "#/responses/empty"
          },
          "default": {
            "description": "errorResponse",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      },
      "post": {
        "description": "Adds the given service account to the given project",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "serviceaccounts"
        ],
        "operationId": "addServiceAccountToProject",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          },
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ServiceAccount"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "ServiceAccount",
            "schema": {
              "$ref": "#/definitions/ServiceAccount"
            }
          },
          "401": {
            "$ref": "#/responses/empty"
          },
          "403": {
            "$ref": "#/responses/empty"
          },
          "default": {
            "description": "errorResponse",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/api/v1/projects/{project_id}/serviceaccounts/{serviceaccount_id}": {
      "put": {
        "description": "Updates service account for the given project",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "serviceaccounts"
        ],
        "operationId": "updateServiceAccount",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          },
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ServiceAccount"
            }
          },
          {
            "type": "string",
            "x-go-name": "ServiceAccountID",
            "name": "serviceaccount_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ServiceAccount",
            "schema": {
              "$ref": "#/definitions/ServiceAccount"
            }
          },
          "401": {
            "$ref": "#/responses/empty"
          },
          "403": {
            "$ref": "#/responses/empty"
          },
          "default": {
            "description": "errorResponse",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      },
      "delete": {
        "description": "Deletes service account for the given project",
        "produces": [
          "application/json"
        ],
        "tags": [
          "serviceaccounts"
        ],
        "operationId": "deleteServiceAccount",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "ServiceAccountID",
            "name": "serviceaccount_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/empty"
          },
          "401": {
            "$ref": "#/responses/empty"
          },
          "403": {
            "$ref": "#/responses/empty"
          },
          "default": {
            "description": "errorResponse",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/api/v1/projects/{project_id}/serviceaccounts/{serviceaccount_id}/tokens": {
      "get": {
        "description": "List tokens for the given service account",
        "produces": [
          "application/json"
        ],
        "tags": [
          "tokens"
        ],
        "operationId": "listServiceAccountTokens",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "ServiceAccountID",
            "name": "serviceaccount_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "PublicServiceAccountToken",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PublicServiceAccountToken"
              }
            }
          },
          "401": {
            "$ref": "#/responses/empty"
          },
          "403": {
            "$ref": "#/responses/empty"
          },
          "default": {
            "description": "errorResponse",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      },
      "post": {
        "description": "Generates a token for the given service account",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "tokens"
        ],
        "operationId": "addTokenToServiceAccount",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "ServiceAccountID",
            "name": "serviceaccount_id",
            "in": "path",
            "required": true
          },
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ServiceAccountToken"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "ServiceAccountToken",
            "schema": {
              "$ref": "#/definitions/ServiceAccountToken"
            }
          },
          "401": {
            "$ref": "#/responses/empty"
          },
          "403": {
            "$ref": "#/responses/empty"
          },
          "default": {
            "description": "errorResponse",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/api/v1/projects/{project_id}/serviceaccounts/{serviceaccount_id}/tokens/{token_id}": {
      "put": {
        "description": "Updates and regenerates the token",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "tokens"
        ],
        "operationId": "updateServiceAccountToken",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "ServiceAccountID",
            "name": "serviceaccount_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "TokenID",
            "name": "token_id",
            "in": "path",
            "required": true
          },
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/PublicServiceAccountToken"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ServiceAccountToken",
            "schema": {
              "$ref": "#/definitions/ServiceAccountToken"
            }
          },
          "401": {
            "$ref": "#/responses/empty"
          },
          "403": {
            "$ref": "#/responses/empty"
          },
          "default": {
            "description": "errorResponse",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      },
      "delete": {
        "description": "Deletes the token",
        "produces": [
          "application/json"
        ],
        "tags": [
          "tokens"
        ],
        "operationId": "deleteServiceAccountToken",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "ServiceAccountID",
            "name": "serviceaccount_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "TokenID",
            "name": "token_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/empty"
          },
          "401": {
            "$ref": "#/responses/empty"
          },
          "403": {
            "$ref": "#/responses/empty"
          },
          "default": {
            "description": "errorResponse",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      },
      "patch": {
        "description": "Patches the token name",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "tokens"
        ],
        "operationId": "patchServiceAccountToken",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "ServiceAccountID",
            "name": "serviceaccount_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "TokenID",
            "name": "token_id",
            "in": "path",
            "required": true
          },
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint8"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "PublicServiceAccountToken",
            "schema": {
              "$ref": "#/definitions/PublicServiceAccountToken"
            }
          },
          "401": {
            "$ref": "#/responses/empty"
          },
          "403": {
            "$ref": "#/responses/empty"
          },
          "default": {
            "description": "errorResponse",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/api/v1/projects/{project_id}/sshkeys": {
      "get": {
        "description": "The returned collection is sorted by creation timestamp.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "project"
        ],
        "summary": "Lists SSH Keys that belong to the given project.",
        "operationId": "listSSHKeys",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "SSHKey",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SSHKey"
              }
            }
          },
          "401": {
            "$ref": "#/responses/empty"
          },
          "403": {
            "$ref": "#/responses/empty"
          },
          "default": {
            "description": "errorResponse",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "project"
        ],
        "summary": "Adds the given SSH key to the specified project.",
        "operationId": "createSSHKey",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "SSHKey",
            "schema": {
              "$ref": "#/definitions/SSHKey"
            }
          },
          "401": {
            "$ref": "#/responses/empty"
          },
          "403": {
            "$ref": "#/responses/empty"
          },
          "default": {
            "description": "errorResponse",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/api/v1/projects/{project_id}/sshkeys/{key_id}": {
      "delete": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "project"
        ],
        "summary": "Removes the given SSH Key from the system.",
        "operationId": "deleteSSHKey",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "SSHKeyID",
            "name": "key_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/empty"
          },
          "401": {
            "$ref": "#/responses/empty"
          },
          "403": {
            "$ref": "#/responses/empty"
          },
          "default": {
            "description": "errorResponse",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/api/v1/projects/{project_id}/users": {
      "get": {
        "description": "Get list of users for the given project",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "users"
        ],
        "operationId": "getUsersForProject",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "User",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/User"
              }
            }
          },
          "401": {
            "$ref": "#/responses/empty"
          },
          "403": {
            "$ref": "#/responses/empty"
          },
          "default": {
            "description": "errorResponse",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      },
      "post": {
        "description": "Adds the given user to the given project",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "users"
        ],
        "operationId": "addUserToProject",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          },
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "User",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "401": {
            "$ref": "#/responses/empty"
          },
          "403": {
            "$ref": "#/responses/empty"
          },
          "default": {
            "description": "errorResponse",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/api/v1/projects/{project_id}/users/{user_id}": {
      "put": {
        "description": "Changes membership of the given user for the given project",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "users"
        ],
        "operationId": "editUserInProject",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          },
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          {
            "type": "string",
            "x-go-name": "UserID",
            "name": "user_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "User",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "401": {
            "$ref": "#/responses/empty"
          },
          "403": {
            "$ref": "#/responses/empty"
          },
          "default": {
            "description": "errorResponse",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      },
      "delete": {
        "description": "Removes the given member from the project",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "users"
        ],
        "operationId": "deleteUserFromProject",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "UserID",
            "name": "user_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "User",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "401": {
            "$ref": "#/responses/empty"
          },
          "403": {
            "$ref": "#/responses/empty"
          },
          "default": {
            "description": "errorResponse",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/api/v1/providers/aws/sizes": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "aws"
        ],
        "summary": "Lists available AWS sizes.",
        "operationId": "listAWSSizes",
        "parameters": [
          {
            "type": "string",
            "name": "Region",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "AWSSizeList",
            "schema": {
              "$ref": "#/definitions/AWSSizeList"
            }
          },
          "default": {
            "description": "errorResponse",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/api/v1/providers/aws/{dc}/subnets": {
      "get": {
        "description": "Lists available AWS subnets",
        "produces": [
          "application/json"
        ],
        "tags": [
          "aws"
        ],
        "operationId": "listAWSSubnets",
        "parameters": [
          {
            "type": "string",
            "name": "AccessKeyID",
            "in": "header"
          },
          {
            "type": "string",
            "name": "SecretAccessKey",
            "in": "header"
          },
          {
            "type": "string",
            "name": "Credential",
            "in": "header"
          },
          {
            "type": "string",
            "x-go-name": "DC",
            "name": "dc",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "VPC",
            "name": "vpc",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "AWSSubnetList",
            "schema": {
              "$ref": "#/definitions/AWSSubnetList"
            }
          },
          "default": {
            "description": "errorResponse",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/api/v1/providers/aws/{dc}/vpcs": {
      "get": {
        "description": "Lists available AWS vpc's",
        "produces": [
          "application/json"
        ],
        "tags": [
          "aws"
        ],
        "operationId": "listAWSVPCS",
        "parameters": [
          {
            "type": "string",
            "name": "AccessKeyID",
            "in": "header"
          },
          {
            "type": "string",
            "name": "SecretAccessKey",
            "in": "header"
          },
          {
            "type": "string",
            "name": "Credential",
            "in": "header"
          },
          {
            "type": "string",
            "x-go-name": "DC",
            "name": "dc",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "AWSVPCList",
            "schema": {
              "$ref": "#/definitions/AWSVPCList"
            }
          },
          "default": {
            "description": "errorResponse",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/api/v1/providers/azure/sizes": {
      "get": {
        "description": "Lists available VM sizes in an Azure region",
        "produces": [
          "application/json"
        ],
        "tags": [
          "azure"
        ],
        "operationId": "listAzureSizes",
        "responses": {
          "200": {
            "description": "AzureSizeList",
            "schema": {
              "$ref": "#/definitions/AzureSizeList"
            }
          },
          "default": {
            "description": "errorResponse",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/api/v1/providers/digitalocean/sizes": {
      "get": {
        "description": "Lists sizes from digitalocean",
        "produces": [
          "application/json"
        ],
        "tags": [
          "digitalocean"
        ],
        "operationId": "listDigitaloceanSizes",
        "responses": {
          "200": {
            "description": "DigitaloceanSizeList",
            "schema": {
              "$ref": "#/definitions/DigitaloceanSizeList"
            }
          },
          "default": {
            "description": "errorResponse",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/api/v1/providers/gcp/disktypes": {
      "get": {
        "description": "Lists disk types from GCP",
        "produces": [
          "application/json"
        ],
        "tags": [
          "gcp"
        ],
        "operationId": "listGCPDiskTypes",
        "parameters": [
          {
            "type": "string",
            "name": "ServiceAccount",
            "in": "header"
          },
          {
            "type": "string",
            "name": "Credential",
            "in": "header"
          },
          {
            "type": "string",
            "name": "Zone",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "GCPDiskTypeList",
            "schema": {
              "$ref": "#/definitions/GCPDiskTypeList"
            }
          },
          "default": {
            "description": "errorResponse",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/api/v1/providers/gcp/sizes": {
      "get": {
        "description": "Lists machine sizes from GCP",
        "produces": [
          "application/json"
        ],
        "tags": [
          "gcp"
        ],
        "operationId": "listGCPSizes",
        "parameters": [
          {
            "type": "string",
            "name": "ServiceAccount",
            "in": "header"
          },
          {
            "type": "string",
            "name": "Credential",
            "in": "header"
          },
          {
            "type": "string",
            "name": "Zone",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "GCPMachineSizeList",
            "schema": {
              "$ref": "#/definitions/GCPMachineSizeList"
            }
          },
          "default": {
            "description": "errorResponse",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/api/v1/providers/gcp/{dc}/zones": {
      "get": {
        "description": "Lists available GCP zones",
        "produces": [
          "application/json"
        ],
        "tags": [
          "gcp"
        ],
        "operationId": "listGCPZones",
        "parameters": [
          {
            "type": "string",
            "name": "ServiceAccount",
            "in": "header"
          },
          {
            "type": "string",
            "name": "Credential",
            "in": "header"
          },
          {
            "type": "string",
            "x-go-name": "DC",
            "name": "dc",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "GCPZoneList",
            "schema": {
              "$ref": "#/definitions/GCPZoneList"
            }
          },
          "default": {
            "description": "errorResponse",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/api/v1/providers/hetzner/sizes": {
      "get": {
        "description": "Lists sizes from hetzner",
        "produces": [
          "application/json"
        ],
        "tags": [
          "hetzner"
        ],
        "operationId": "listHetznerSizes",
        "responses": {
          "200": {
            "description": "HetznerSizeList",
            "schema": {
              "$ref": "#/definitions/HetznerSizeList"
            }
          },
          "default": {
            "description": "errorResponse",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/api/v1/providers/openstack/networks": {
      "get": {
        "description": "Lists networks from openstack",
        "produces": [
          "application/json"
        ],
        "tags": [
          "openstack"
        ],
        "operationId": "listOpenstackNetworks",
        "responses": {
          "200": {
            "description": "OpenstackNetwork",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/OpenstackNetwork"
              }
            }
          },
          "default": {
            "description": "errorResponse",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/api/v1/providers/openstack/securitygroups": {
      "get": {
        "description": "Lists security groups from openstack",
        "produces": [
          "application/json"
        ],
        "tags": [
          "openstack"
        ],
        "operationId": "listOpenstackSecurityGroups",
        "responses": {
          "200": {
            "description": "OpenstackSecurityGroup",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/OpenstackSecurityGroup"
              }
            }
          },
          "default": {
            "description": "errorResponse",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/api/v1/providers/openstack/sizes": {
      "get": {
        "description": "Lists sizes from openstack",
        "produces": [
          "application/json"
        ],
        "tags": [
          "openstack"
        ],
        "operationId": "listOpenstackSizes",
        "responses": {
          "200": {
            "description": "OpenstackSize",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/OpenstackSize"
              }
            }
          },
          "default": {
            "description": "errorResponse",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/api/v1/providers/openstack/subnets": {
      "get": {
        "description": "Lists subnets from openstack",
        "produces": [
          "application/json"
        ],
        "tags": [
          "openstack"
        ],
        "operationId": "listOpenstackSubnets",
        "parameters": [
          {
            "type": "string",
            "name": "Username",
            "in": "query"
          },
          {
            "type": "string",
            "name": "Password",
            "in": "query"
          },
          {
            "type": "string",
            "name": "Domain",
            "in": "query"
          },
          {
            "type": "string",
            "name": "Tenant",
            "in": "query"
          },
          {
            "type": "string",
            "name": "TenantID",
            "in": "query"
          },
          {
            "type": "string",
            "name": "DatacenterName",
            "in": "query"
          },
          {
            "type": "string",
            "name": "Credential",
            "in": "query"
          },
          {
            "type": "string",
            "name": "NetworkID",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OpenstackSubnet",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/OpenstackSubnet"
              }
            }
          },
          "default": {
            "description": "errorResponse",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/api/v1/providers/openstack/tenants": {
      "get": {
        "description": "Lists tenants from openstack",
        "produces": [
          "application/json"
        ],
        "tags": [
          "openstack"
        ],
        "operationId": "listOpenstackTenants",
        "responses": {
          "200": {
            "description": "OpenstackTenant",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/OpenstackTenant"
              }
            }
          },
          "default": {
            "description": "errorResponse",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/api/v1/providers/packet/sizes": {
      "get": {
        "description": "Lists sizes from packet",
        "produces": [
          "application/json"
        ],
        "tags": [
          "packet"
        ],
        "operationId": "listPacketSizes",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "APIKey",
            "name": "apiKey",
            "in": "header"
          },
          {
            "type": "string",
            "x-go-name": "ProjectID",
            "name": "projectID",
            "in": "header"
          },
          {
            "type": "string",
            "x-go-name": "Credential",
            "name": "credential",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "PacketSizeList",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PacketSizeList"
              }
            }
          },
          "default": {
            "description": "errorResponse",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/api/v1/providers/vsphere/folders": {
      "get": {
        "description": "Lists folders from vsphere datacenter",
        "produces": [
          "application/json"
        ],
        "tags": [
          "vsphere"
        ],
        "operationId": "listVSphereFolders",
        "responses": {
          "200": {
            "description": "VSphereFolder",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/VSphereFolder"
              }
            }
          },
          "default": {
            "description": "errorResponse",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/api/v1/providers/vsphere/networks": {
      "get": {
        "description": "Lists networks from vsphere datacenter",
        "produces": [
          "application/json"
        ],
        "tags": [
          "vsphere"
        ],
        "operationId": "listVSphereNetworks",
        "responses": {
          "200": {
            "description": "VSphereNetwork",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/VSphereNetwork"
              }
            }
          },
          "default": {
            "description": "errorResponse",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/api/v1/providers/{provider_name}/presets/credentials": {
      "get": {
        "description": "Lists credential names for the provider",
        "produces": [
          "application/json"
        ],
        "tags": [
          "credentials"
        ],
        "operationId": "listCredentials",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ProviderName",
            "name": "provider_name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "CredentialList",
            "schema": {
              "$ref": "#/definitions/CredentialList"
            }
          },
          "default": {
            "description": "errorResponse",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/api/v1/upgrades/cluster": {
      "get": {
        "description": "Lists all versions which don't result in automatic updates",
        "produces": [
          "application/json"
        ],
        "tags": [
          "versions"
        ],
        "operationId": "getMasterVersions",
        "responses": {
          "200": {
            "description": "MasterVersion",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MasterVersion"
              }
            }
          },
          "default": {
            "description": "errorResponse",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/api/v1/upgrades/node": {
      "get": {
        "description": "Gets possible node upgrades for a specific control plane version",
        "produces": [
          "application/json"
        ],
        "tags": [
          "versions"
        ],
        "operationId": "getNodeUpgrades",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Type",
            "name": "type",
            "in": "query"
          },
          {
            "type": "string",
            "name": "ControlPlaneVersion",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "MasterVersion",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MasterVersion"
              }
            }
          },
          "401": {
            "$ref": "#/responses/empty"
          },
          "403": {
            "$ref": "#/responses/empty"
          },
          "default": {
            "description": "errorResponse",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/api/v1/version": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "versions"
        ],
        "summary": "Get versions of running Kubermatic components.",
        "operationId": "getKubermaticVersion",
        "responses": {
          "200": {
            "description": "KubermaticVersions",
            "schema": {
              "$ref": "#/definitions/KubermaticVersions"
            }
          },
          "default": {
            "description": "errorResponse",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "AWSCloudSpec": {
      "type": "object",
      "title": "AWSCloudSpec specifies access data to Amazon Web Services.",
      "properties": {
        "accessKeyId": {
          "type": "string",
          "x-go-name": "AccessKeyID"
        },
        "credentialsReference": {
          "$ref": "#/definitions/GlobalSecretKeySelector"
        },
        "instanceProfileName": {
          "type": "string",
          "x-go-name": "InstanceProfileName"
        },
        "roleARN": {
          "description": "The IAM role, the control plane will use. The control plane will perform an assume-role",
          "type": "string",
          "x-go-name": "ControlPlaneRoleARN"
        },
        "roleName": {
          "description": "DEPRECATED. Don't care for the role name. We only require the ControlPlaneRoleARN to be set so the control plane\ncan perform the assume-role.\nWe keep it for backwards compatibility (We use this name for cleanup purpose).",
          "type": "string",
          "x-go-name": "RoleName"
        },
        "routeTableId": {
          "type": "string",
          "x-go-name": "RouteTableID"
        },
        "secretAccessKey": {
          "type": "string",
          "x-go-name": "SecretAccessKey"
        },
        "securityGroupID": {
          "type": "string",
          "x-go-name": "SecurityGroupID"
        },
        "vpcId": {
          "type": "string",
          "x-go-name": "VPCID"
        }
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/crd/kubermatic/v1"
    },
    "AWSDatacenterSpec": {
      "type": "object",
      "title": "AWSDatacenterSpec specifies a data center of Amazon Web Services.",
      "properties": {
        "region": {
          "type": "string",
          "x-go-name": "Region"
        }
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/api/v1"
    },
    "AWSNodeSpec": {
      "description": "AWSNodeSpec aws specific node settings",
      "type": "object",
      "required": [
        "instanceType",
        "diskSize",
        "volumeType"
      ],
      "properties": {
        "ami": {
          "description": "ami to use. Will be defaulted to a ami for your selected operating system and region. Only set this when you know what you do.",
          "type": "string",
          "x-go-name": "AMI"
        },
        "assignPublicIP": {
          "description": "This flag controls a property of the AWS instance. When set the AWS instance will get a public IP address\nassigned during launch overriding a possible setting in the used AWS subnet.",
          "type": "boolean",
          "x-go-name": "AssignPublicIP"
        },
        "availabilityZone": {
          "description": "Availiability zone in which to place the node. It is coupled with the subnet to which the node will belong.",
          "type": "string",
          "x-go-name": "AvailabilityZone"
        },
        "diskSize": {
          "description": "size of the volume in gb. Only one volume will be created",
          "type": "integer",
          "format": "int64",
          "x-go-name": "VolumeSize"
        },
        "instanceType": {
          "type": "string",
          "x-go-name": "InstanceType",
          "example": "t2.micro"
        },
        "subnetID": {
          "description": "The VPC subnet to which the node shall be connected.",
          "type": "string",
          "x-go-name": "SubnetID"
        },
        "tags": {
          "description": "additional instance tags",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-go-name": "Tags"
        },
        "volumeType": {
          "type": "string",
          "x-go-name": "VolumeType",
          "example": "gp2, io1, st1, sc1, standard"
        }
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/api/v1"
    },
    "AWSSize": {
      "type": "object",
      "title": "AWSSize represents a object of AWS size.",
      "properties": {
        "memory": {
          "type": "number",
          "format": "float",
          "x-go-name": "Memory"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "pretty_name": {
          "type": "string",
          "x-go-name": "PrettyName"
        },
        "price": {
          "type": "number",
          "format": "double",
          "x-go-name": "Price"
        },
        "vcpus": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "VCPUs"
        }
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/api/v1"
    },
    "AWSSizeList": {
      "type": "array",
      "title": "AWSSizeList represents an array of AWS sizes.",
      "items": {
        "$ref": "#/definitions/AWSSize"
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/api/v1"
    },
    "AWSSubnet": {
      "type": "object",
      "title": "AWSSubnet represents a object of AWS availability subnet.",
      "properties": {
        "availability_zone": {
          "type": "string",
          "x-go-name": "AvailabilityZone"
        },
        "availability_zone_id": {
          "type": "string",
          "x-go-name": "AvailabilityZoneID"
        },
        "available_ip_address_count": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "AvailableIPAddressCount"
        },
        "default": {
          "type": "boolean",
          "x-go-name": "DefaultForAz"
        },
        "id": {
          "type": "string",
          "x-go-name": "ID"
        },
        "ipv4cidr": {
          "type": "string",
          "x-go-name": "IPv4CIDR"
        },
        "ipv6cidr": {
          "type": "string",
          "x-go-name": "IPv6CIDR"
        },
        "isDefaultSubnet": {
          "type": "boolean",
          "x-go-name": "IsDefaultSubnet"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "state": {
          "type": "string",
          "x-go-name": "State"
        },
        "tags": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AWSTag"
          },
          "x-go-name": "Tags"
        }
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/api/v1"
    },
    "AWSSubnetList": {
      "type": "array",
      "title": "AWSSubnetList represents an array of AWS availability subnets.",
      "items": {
        "$ref": "#/definitions/AWSSubnet"
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/api/v1"
    },
    "AWSTag": {
      "type": "object",
      "title": "AWSTag represents a object of AWS tags.",
      "properties": {
        "key": {
          "type": "string",
          "x-go-name": "Key"
        },
        "value": {
          "type": "string",
          "x-go-name": "Value"
        }
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/api/v1"
    },
    "AWSVPC": {
      "type": "object",
      "title": "AWSVPC represents a object of AWS VPC.",
      "properties": {
        "cidrBlock": {
          "description": "The primary IPv4 CIDR block for the VPC.",
          "type": "string",
          "x-go-name": "CidrBlock"
        },
        "cidrBlockAssociationSet": {
          "description": "Information about the IPv4 CIDR blocks associated with the VPC.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/AWSVpcCidrBlockAssociation"
          },
          "x-go-name": "CidrBlockAssociationSet"
        },
        "dhcpOptionsId": {
          "description": "The ID of the set of DHCP options you've associated with the VPC (or default\nif the default options are associated with the VPC).",
          "type": "string",
          "x-go-name": "DhcpOptionsID"
        },
        "instanceTenancy": {
          "description": "The allowed tenancy of instances launched into the VPC.",
          "type": "string",
          "x-go-name": "InstanceTenancy"
        },
        "ipv6CidrBlockAssociationSet": {
          "description": "Information about the IPv6 CIDR blocks associated with the VPC.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/AWSVpcIpv6CidrBlockAssociation"
          },
          "x-go-name": "Ipv6CidrBlockAssociationSet"
        },
        "isDefault": {
          "description": "Indicates whether the VPC is the default VPC.",
          "type": "boolean",
          "x-go-name": "IsDefault"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "ownerId": {
          "description": "The ID of the AWS account that owns the VPC.",
          "type": "string",
          "x-go-name": "OwnerID"
        },
        "state": {
          "description": "The current state of the VPC.",
          "type": "string",
          "x-go-name": "State"
        },
        "tags": {
          "description": "Any tags assigned to the VPC.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/AWSTag"
          },
          "x-go-name": "Tags"
        },
        "vpcId": {
          "description": "The ID of the VPC.",
          "type": "string",
          "x-go-name": "VpcID"
        }
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/api/v1"
    },
    "AWSVPCList": {
      "type": "array",
      "title": "AWSVPCList represents an array of AWS VPC's.",
      "items": {
        "$ref": "#/definitions/AWSVPC"
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/api/v1"
    },
    "AWSVpcCidrBlockAssociation": {
      "type": "object",
      "title": "AWSVpcCidrBlockAssociation describes an IPv4 CIDR block associated with a VPC.",
      "properties": {
        "associationId": {
          "description": "The association ID for the IPv4 CIDR block.",
          "type": "string",
          "x-go-name": "AssociationID"
        },
        "cidrBlock": {
          "description": "The IPv4 CIDR block.",
          "type": "string",
          "x-go-name": "CidrBlock"
        },
        "state": {
          "description": "The state of the CIDR block.",
          "type": "string",
          "x-go-name": "State"
        },
        "statusMessage": {
          "description": "A message about the status of the CIDR block, if applicable.",
          "type": "string",
          "x-go-name": "StatusMessage"
        }
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/api/v1"
    },
    "AWSVpcIpv6CidrBlockAssociation": {
      "type": "object",
      "title": "AWSVpcIpv6CidrBlockAssociation describes an IPv6 CIDR block associated with a VPC.",
      "properties": {
        "associationId": {
          "description": "The association ID for the IPv4 CIDR block.",
          "type": "string",
          "x-go-name": "AssociationID"
        },
        "cidrBlock": {
          "description": "The IPv4 CIDR block.",
          "type": "string",
          "x-go-name": "CidrBlock"
        },
        "state": {
          "description": "The state of the CIDR block.",
          "type": "string",
          "x-go-name": "State"
        },
        "statusMessage": {
          "description": "A message about the status of the CIDR block, if applicable.",
          "type": "string",
          "x-go-name": "StatusMessage"
        }
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/api/v1"
    },
    "AccessibleAddons": {
      "type": "array",
      "title": "AccessibleAddons represents an array of addons that can be configured in the user clusters.",
      "items": {
        "type": "string"
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/api/v1"
    },
    "Addon": {
      "description": "Addon represents a predefined addon that users may install into their cluster",
      "type": "object",
      "properties": {
        "creationTimestamp": {
          "description": "CreationTimestamp is a timestamp representing the server time when this object was created.",
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreationTimestamp"
        },
        "deletionTimestamp": {
          "description": "DeletionTimestamp is a timestamp representing the server time when this object was deleted.",
          "type": "string",
          "format": "date-time",
          "x-go-name": "DeletionTimestamp"
        },
        "id": {
          "description": "ID unique value that identifies the resource generated by the server. Read-Only.",
          "type": "string",
          "x-go-name": "ID"
        },
        "name": {
          "description": "Name represents human readable name for the resource",
          "type": "string",
          "x-go-name": "Name"
        },
        "spec": {
          "$ref": "#/definitions/AddonSpec"
        }
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/api/v1"
    },
    "AddonSpec": {
      "description": "AddonSpec addon specification",
      "type": "object",
      "properties": {
        "isDefault": {
          "description": "IsDefault indicates whether the addon is default",
          "type": "boolean",
          "x-go-name": "IsDefault"
        },
        "variables": {
          "description": "Variables is free form data to use for parsing the manifest templates",
          "type": "object",
          "additionalProperties": {
            "type": "object"
          },
          "x-go-name": "Variables"
        }
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/api/v1"
    },
    "Admin": {
      "description": "Admin represents admin user",
      "type": "object",
      "properties": {
        "email": {
          "description": "Email address of the admin user",
          "type": "string",
          "x-go-name": "Email"
        },
        "isAdmin": {
          "description": "IsAdmin indicates admin role",
          "type": "boolean",
          "x-go-name": "IsAdmin"
        },
        "name": {
          "description": "Name of the admin user",
          "type": "string",
          "x-go-name": "Name"
        }
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/api/v1"
    },
    "AuditLoggingSettings": {
      "type": "object",
      "properties": {
        "enabled": {
          "type": "boolean",
          "x-go-name": "Enabled"
        }
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/crd/kubermatic/v1"
    },
    "AuthInfo": {
      "type": "object",
      "title": "AuthInfo contains information that describes identity information.  This is use to tell the kubernetes cluster who you are.",
      "properties": {
        "as": {
          "description": "Impersonate is the username to imperonate.  The name matches the flag.\n+optional",
          "type": "string",
          "x-go-name": "Impersonate"
        },
        "as-groups": {
          "description": "ImpersonateGroups is the groups to imperonate.\n+optional",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "ImpersonateGroups"
        },
        "as-user-extra": {
          "description": "ImpersonateUserExtra contains additional information for impersonated user.\n+optional",
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "x-go-name": "ImpersonateUserExtra"
        },
        "auth-provider": {
          "$ref": "#/definitions/AuthProviderConfig"
        },
        "client-certificate": {
          "description": "ClientCertificate is the path to a client cert file for TLS.\n+optional",
          "type": "string",
          "x-go-name": "ClientCertificate"
        },
        "client-certificate-data": {
          "description": "ClientCertificateData contains PEM-encoded data from a client cert file for TLS. Overrides ClientCertificate\n+optional",
          "type": "array",
          "items": {
            "type": "integer",
            "format": "uint8"
          },
          "x-go-name": "ClientCertificateData"
        },
        "client-key": {
          "description": "ClientKey is the path to a client key file for TLS.\n+optional",
          "type": "string",
          "x-go-name": "ClientKey"
        },
        "client-key-data": {
          "description": "ClientKeyData contains PEM-encoded data from a client key file for TLS. Overrides ClientKey\n+optional",
          "type": "array",
          "items": {
            "type": "integer",
            "format": "uint8"
          },
          "x-go-name": "ClientKeyData"
        },
        "exec": {
          "$ref": "#/definitions/ExecConfig"
        },
        "extensions": {
          "description": "Extensions holds additional information. This is useful for extenders so that reads and writes don't clobber unknown fields\n+optional",
          "type": "array",
          "items": {
            "$ref": "#/definitions/NamedExtension"
          },
          "x-go-name": "Extensions"
        },
        "password": {
          "description": "Password is the password for basic authentication to the kubernetes cluster.\n+optional",
          "type": "string",
          "x-go-name": "Password"
        },
        "token": {
          "description": "Token is the bearer token for authentication to the kubernetes cluster.\n+optional",
          "type": "string",
          "x-go-name": "Token"
        },
        "tokenFile": {
          "description": "TokenFile is a pointer to a file that contains a bearer token (as described above).  If both Token and TokenFile are present, Token takes precedence.\n+optional",
          "type": "string",
          "x-go-name": "TokenFile"
        },
        "username": {
          "description": "Username is the username for basic authentication to the kubernetes cluster.\n+optional",
          "type": "string",
          "x-go-name": "Username"
        }
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/vendor/k8s.io/client-go/tools/clientcmd/api/v1"
    },
    "AuthProviderConfig": {
      "type": "object",
      "title": "AuthProviderConfig holds the configuration for a specified auth provider.",
      "properties": {
        "config": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-go-name": "Config"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        }
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/vendor/k8s.io/client-go/tools/clientcmd/api/v1"
    },
    "AzureCloudSpec": {
      "type": "object",
      "title": "AzureCloudSpec specifies acceess credentials to Azure cloud.",
      "properties": {
        "availabilitySet": {
          "type": "string",
          "x-go-name": "AvailabilitySet"
        },
        "clientID": {
          "type": "string",
          "x-go-name": "ClientID"
        },
        "clientSecret": {
          "type": "string",
          "x-go-name": "ClientSecret"
        },
        "credentialsReference": {
          "$ref": "#/definitions/GlobalSecretKeySelector"
        },
        "resourceGroup": {
          "type": "string",
          "x-go-name": "ResourceGroup"
        },
        "routeTable": {
          "type": "string",
          "x-go-name": "RouteTableName"
        },
        "securityGroup": {
          "type": "string",
          "x-go-name": "SecurityGroup"
        },
        "subnet": {
          "type": "string",
          "x-go-name": "SubnetName"
        },
        "subscriptionID": {
          "type": "string",
          "x-go-name": "SubscriptionID"
        },
        "tenantID": {
          "type": "string",
          "x-go-name": "TenantID"
        },
        "vnet": {
          "type": "string",
          "x-go-name": "VNetName"
        }
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/crd/kubermatic/v1"
    },
    "AzureDatacenterSpec": {
      "type": "object",
      "title": "AzureDatacenterSpec specifies a datacenter of Azure.",
      "properties": {
        "location": {
          "type": "string",
          "x-go-name": "Location"
        }
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/api/v1"
    },
    "AzureNodeSpec": {
      "description": "AzureNodeSpec describes settings for an Azure node",
      "type": "object",
      "required": [
        "size"
      ],
      "properties": {
        "assignPublicIP": {
          "description": "should the machine have a publicly accessible IP address",
          "type": "boolean",
          "x-go-name": "AssignPublicIP"
        },
        "size": {
          "description": "VM size",
          "type": "string",
          "x-go-name": "Size"
        },
        "tags": {
          "description": "Additional metadata to set",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-go-name": "Tags"
        }
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/api/v1"
    },
    "AzureSize": {
      "type": "object",
      "title": "AzureSize is the object representing Azure VM sizes.",
      "properties": {
        "maxDataDiskCount": {
          "type": "integer",
          "format": "int32",
          "x-go-name": "MaxDataDiskCount"
        },
        "memoryInMB": {
          "type": "integer",
          "format": "int32",
          "x-go-name": "MemoryInMB"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "numberOfCores": {
          "type": "integer",
          "format": "int32",
          "x-go-name": "NumberOfCores"
        },
        "osDiskSizeInMB": {
          "type": "integer",
          "format": "int32",
          "x-go-name": "OsDiskSizeInMB"
        },
        "resourceDiskSizeInMB": {
          "type": "integer",
          "format": "int32",
          "x-go-name": "ResourceDiskSizeInMB"
        }
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/api/v1"
    },
    "AzureSizeList": {
      "type": "array",
      "title": "AzureSizeList represents an array of Azure VM sizes.",
      "items": {
        "$ref": "#/definitions/AzureSize"
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/api/v1"
    },
    "BringYourOwnCloudSpec": {
      "type": "object",
      "title": "BringYourOwnCloudSpec specifies access data for a bring your own cluster.",
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/crd/kubermatic/v1"
    },
    "BringYourOwnDatacenterSpec": {
      "type": "object",
      "title": "BringYourOwnDatacenterSpec specifies a data center with bring-your-own nodes.",
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/api/v1"
    },
    "CentOSSpec": {
      "description": "CentOSSpec contains CentOS specific settings",
      "type": "object",
      "properties": {
        "distUpgradeOnBoot": {
          "description": "do a dist-upgrade on boot and reboot it required afterwards",
          "type": "boolean",
          "x-go-name": "DistUpgradeOnBoot"
        }
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/api/v1"
    },
    "CleanupOptions": {
      "type": "object",
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Enforced": {
          "type": "boolean"
        }
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/crd/kubermatic/v1"
    },
    "CloudSpec": {
      "type": "object",
      "title": "CloudSpec mutually stores access data to a cloud provider.",
      "properties": {
        "aws": {
          "$ref": "#/definitions/AWSCloudSpec"
        },
        "azure": {
          "$ref": "#/definitions/AzureCloudSpec"
        },
        "bringyourown": {
          "$ref": "#/definitions/BringYourOwnCloudSpec"
        },
        "dc": {
          "description": "DatacenterName where the users 'cloud' lives in.",
          "type": "string",
          "x-go-name": "DatacenterName"
        },
        "digitalocean": {
          "$ref": "#/definitions/DigitaloceanCloudSpec"
        },
        "fake": {
          "$ref": "#/definitions/FakeCloudSpec"
        },
        "gcp": {
          "$ref": "#/definitions/GCPCloudSpec"
        },
        "hetzner": {
          "$ref": "#/definitions/HetznerCloudSpec"
        },
        "kubevirt": {
          "$ref": "#/definitions/KubevirtCloudSpec"
        },
        "openstack": {
          "$ref": "#/definitions/OpenstackCloudSpec"
        },
        "packet": {
          "$ref": "#/definitions/PacketCloudSpec"
        },
        "vsphere": {
          "$ref": "#/definitions/VSphereCloudSpec"
        }
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/crd/kubermatic/v1"
    },
    "Cluster": {
      "description": "Note:\nCluster has a custom MarshalJSON method defined\nand thus the output may vary",
      "type": "object",
      "title": "Cluster defines the cluster resource",
      "properties": {
        "creationTimestamp": {
          "description": "CreationTimestamp is a timestamp representing the server time when this object was created.",
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreationTimestamp"
        },
        "credential": {
          "type": "string",
          "x-go-name": "Credential"
        },
        "deletionTimestamp": {
          "description": "DeletionTimestamp is a timestamp representing the server time when this object was deleted.",
          "type": "string",
          "format": "date-time",
          "x-go-name": "DeletionTimestamp"
        },
        "id": {
          "description": "ID unique value that identifies the resource generated by the server. Read-Only.",
          "type": "string",
          "x-go-name": "ID"
        },
        "labels": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-go-name": "Labels"
        },
        "name": {
          "description": "Name represents human readable name for the resource",
          "type": "string",
          "x-go-name": "Name"
        },
        "spec": {
          "$ref": "#/definitions/ClusterSpec"
        },
        "status": {
          "$ref": "#/definitions/ClusterStatus"
        },
        "type": {
          "type": "string",
          "x-go-name": "Type"
        }
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/api/v1"
    },
    "ClusterHealth": {
      "type": "object",
      "title": "ClusterHealth stores health information about the cluster's components.",
      "properties": {
        "apiserver": {
          "$ref": "#/definitions/HealthStatus"
        },
        "cloudProviderInfrastructure": {
          "$ref": "#/definitions/HealthStatus"
        },
        "controller": {
          "$ref": "#/definitions/HealthStatus"
        },
        "etcd": {
          "$ref": "#/definitions/HealthStatus"
        },
        "machineController": {
          "$ref": "#/definitions/HealthStatus"
        },
        "scheduler": {
          "$ref": "#/definitions/HealthStatus"
        },
        "userClusterControllerManager": {
          "$ref": "#/definitions/HealthStatus"
        }
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/api/v1"
    },
    "ClusterList": {
      "description": "ClusterList represents a list of clusters",
      "type": "array",
      "items": {
        "$ref": "#/definitions/Cluster"
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/api/v1"
    },
    "ClusterMetrics": {
      "description": "ControlPlaneMetrics defines a metric for the user cluster control plane resources",
      "type": "object",
      "properties": {
        "cpuTotalMillicores": {
          "description": "CPUTotalMillicores in m cores",
          "type": "integer",
          "format": "int64",
          "x-go-name": "CPUTotalMillicores"
        },
        "memoryTotalBytes": {
          "description": "MemoryTotalBytes in bytes",
          "type": "integer",
          "format": "int64",
          "x-go-name": "MemoryTotalBytes"
        }
      },
      "x-go-name": "ControlPlaneMetrics",
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/api/v1"
    },
    "ClusterRole": {
      "description": "ClusterRole defines cluster RBAC role for the user cluster",
      "type": "object",
      "properties": {
        "creationTimestamp": {
          "description": "CreationTimestamp is a timestamp representing the server time when this object was created.",
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreationTimestamp"
        },
        "deletionTimestamp": {
          "description": "DeletionTimestamp is a timestamp representing the server time when this object was deleted.",
          "type": "string",
          "format": "date-time",
          "x-go-name": "DeletionTimestamp"
        },
        "id": {
          "description": "ID unique value that identifies the resource generated by the server. Read-Only.",
          "type": "string",
          "x-go-name": "ID"
        },
        "name": {
          "description": "Name represents human readable name for the resource",
          "type": "string",
          "x-go-name": "Name"
        },
        "rules": {
          "description": "Rules holds all the PolicyRules for this ClusterRole",
          "type": "array",
          "items": {
            "$ref": "#/definitions/PolicyRule"
          },
          "x-go-name": "Rules"
        }
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/api/v1"
    },
    "ClusterRoleBinding": {
      "type": "object",
      "title": "ClusterRoleBinding references a cluster role, but does not contain it.",
      "properties": {
        "creationTimestamp": {
          "description": "CreationTimestamp is a timestamp representing the server time when this object was created.",
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreationTimestamp"
        },
        "deletionTimestamp": {
          "description": "DeletionTimestamp is a timestamp representing the server time when this object was deleted.",
          "type": "string",
          "format": "date-time",
          "x-go-name": "DeletionTimestamp"
        },
        "id": {
          "description": "ID unique value that identifies the resource generated by the server. Read-Only.",
          "type": "string",
          "x-go-name": "ID"
        },
        "name": {
          "description": "Name represents human readable name for the resource",
          "type": "string",
          "x-go-name": "Name"
        },
        "roleRefName": {
          "type": "string",
          "x-go-name": "RoleRefName"
        },
        "subjects": {
          "description": "Subjects holds references to the objects the role applies to.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Subject"
          },
          "x-go-name": "Subjects"
        }
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/api/v1"
    },
    "ClusterSpec": {
      "description": "ClusterSpec defines the cluster specification",
      "type": "object",
      "properties": {
        "auditLogging": {
          "$ref": "#/definitions/AuditLoggingSettings"
        },
        "cloud": {
          "$ref": "#/definitions/CloudSpec"
        },
        "machineNetworks": {
          "description": "MachineNetworks optionally specifies the parameters for IPAM.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/MachineNetworkingConfig"
          },
          "x-go-name": "MachineNetworks"
        },
        "oidc": {
          "$ref": "#/definitions/OIDCSettings"
        },
        "openshift": {
          "$ref": "#/definitions/Openshift"
        },
        "usePodSecurityPolicyAdmissionPlugin": {
          "description": "If active the PodSecurityPolicy admission plugin is configured at the apiserver",
          "type": "boolean",
          "x-go-name": "UsePodSecurityPolicyAdmissionPlugin"
        },
        "version": {
          "$ref": "#/definitions/Semver"
        }
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/api/v1"
    },
    "ClusterStatus": {
      "description": "ClusterStatus defines the cluster status",
      "type": "object",
      "properties": {
        "url": {
          "description": "URL specifies the address at which the cluster is available",
          "type": "string",
          "x-go-name": "URL"
        },
        "version": {
          "$ref": "#/definitions/Semver"
        }
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/api/v1"
    },
    "ContainerLinuxSpec": {
      "description": "ContainerLinuxSpec ubuntu linux specific settings",
      "type": "object",
      "properties": {
        "disableAutoUpdate": {
          "description": "disable container linux auto-update feature",
          "type": "boolean",
          "x-go-name": "DisableAutoUpdate"
        }
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/api/v1"
    },
    "Context": {
      "description": "Context is a tuple of references to a cluster (how do I communicate with a kubernetes cluster), a user (how do I identify myself), and a namespace (what subset of resources do I want to work with)",
      "type": "object",
      "properties": {
        "cluster": {
          "description": "Cluster is the name of the cluster for this context",
          "type": "string",
          "x-go-name": "Cluster"
        },
        "extensions": {
          "description": "Extensions holds additional information. This is useful for extenders so that reads and writes don't clobber unknown fields\n+optional",
          "type": "array",
          "items": {
            "$ref": "#/definitions/NamedExtension"
          },
          "x-go-name": "Extensions"
        },
        "namespace": {
          "description": "Namespace is the default namespace to use on unspecified requests\n+optional",
          "type": "string",
          "x-go-name": "Namespace"
        },
        "user": {
          "description": "AuthInfo is the name of the authInfo for this context",
          "type": "string",
          "x-go-name": "AuthInfo"
        }
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/vendor/k8s.io/client-go/tools/clientcmd/api/v1"
    },
    "CreateClusterSpec": {
      "description": "CreateClusterSpec is the structure that is used to create cluster with its initial node deployment",
      "type": "object",
      "properties": {
        "cluster": {
          "$ref": "#/definitions/Cluster"
        },
        "nodeDeployment": {
          "$ref": "#/definitions/NodeDeployment"
        }
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/api/v1"
    },
    "CredentialList": {
      "type": "object",
      "title": "CredentialList represents a object for provider credential names.",
      "properties": {
        "names": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Names"
        }
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/api/v1"
    },
    "CustomLink": {
      "type": "object",
      "properties": {
        "icon": {
          "type": "string",
          "x-go-name": "Icon"
        },
        "label": {
          "type": "string",
          "x-go-name": "Label"
        },
        "location": {
          "type": "string",
          "x-go-name": "Location"
        },
        "url": {
          "type": "string",
          "x-go-name": "URL"
        }
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/crd/kubermatic/v1"
    },
    "CustomLinks": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/CustomLink"
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/crd/kubermatic/v1"
    },
    "Datacenter": {
      "type": "object",
      "title": "Datacenter is the object representing a Kubernetes infra datacenter.",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/LegacyObjectMeta"
        },
        "seed": {
          "type": "boolean",
          "x-go-name": "Seed"
        },
        "spec": {
          "$ref": "#/definitions/DatacenterSpec"
        }
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/api/v1"
    },
    "DatacenterList": {
      "description": "DatacenterList represents a list of datacenters",
      "type": "array",
      "items": {
        "$ref": "#/definitions/Datacenter"
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/api/v1"
    },
    "DatacenterSpec": {
      "type": "object",
      "title": "DatacenterSpec specifies the data for a datacenter.",
      "properties": {
        "aws": {
          "$ref": "#/definitions/AWSDatacenterSpec"
        },
        "azure": {
          "$ref": "#/definitions/AzureDatacenterSpec"
        },
        "bringyourown": {
          "$ref": "#/definitions/BringYourOwnDatacenterSpec"
        },
        "country": {
          "type": "string",
          "x-go-name": "Country"
        },
        "digitalocean": {
          "$ref": "#/definitions/DigitialoceanDatacenterSpec"
        },
        "gcp": {
          "$ref": "#/definitions/GCPDatacenterSpec"
        },
        "hetzner": {
          "$ref": "#/definitions/HetznerDatacenterSpec"
        },
        "kubevirt": {
          "$ref": "#/definitions/KubevirtDatacenterSpec"
        },
        "location": {
          "type": "string",
          "x-go-name": "Location"
        },
        "openstack": {
          "$ref": "#/definitions/OpenstackDatacenterSpec"
        },
        "packet": {
          "$ref": "#/definitions/PacketDatacenterSpec"
        },
        "provider": {
          "type": "string",
          "x-go-name": "Provider"
        },
        "requiredEmailDomain": {
          "description": "Deprecated. Automatically migrated to the RequiredEmailDomains field.",
          "type": "string",
          "x-go-name": "RequiredEmailDomain"
        },
        "requiredEmailDomains": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "RequiredEmailDomains"
        },
        "seed": {
          "type": "string",
          "x-go-name": "Seed"
        },
        "vsphere": {
          "$ref": "#/definitions/VSphereDatacenterSpec"
        }
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/api/v1"
    },
    "DigitaloceanCloudSpec": {
      "type": "object",
      "title": "DigitaloceanCloudSpec specifies access data to DigitalOcean.",
      "properties": {
        "credentialsReference": {
          "$ref": "#/definitions/GlobalSecretKeySelector"
        },
        "token": {
          "type": "string",
          "x-go-name": "Token"
        }
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/crd/kubermatic/v1"
    },
    "DigitaloceanNodeSpec": {
      "description": "DigitaloceanNodeSpec digitalocean node settings",
      "type": "object",
      "required": [
        "size"
      ],
      "properties": {
        "backups": {
          "description": "enable backups for the droplet",
          "type": "boolean",
          "x-go-name": "Backups"
        },
        "ipv6": {
          "description": "enable ipv6 for the droplet",
          "type": "boolean",
          "x-go-name": "IPv6"
        },
        "monitoring": {
          "description": "enable monitoring for the droplet",
          "type": "boolean",
          "x-go-name": "Monitoring"
        },
        "size": {
          "description": "droplet size slug",
          "type": "string",
          "x-go-name": "Size"
        },
        "tags": {
          "description": "additional droplet tags",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Tags"
        }
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/api/v1"
    },
    "DigitaloceanSize": {
      "type": "object",
      "title": "DigitaloceanSize is the object representing digitalocean sizes.",
      "properties": {
        "available": {
          "type": "boolean",
          "x-go-name": "Available"
        },
        "disk": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Disk"
        },
        "memory": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Memory"
        },
        "price_hourly": {
          "type": "number",
          "format": "double",
          "x-go-name": "PriceHourly"
        },
        "price_monthly": {
          "type": "number",
          "format": "double",
          "x-go-name": "PriceMonthly"
        },
        "regions": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Regions"
        },
        "slug": {
          "type": "string",
          "x-go-name": "Slug"
        },
        "transfer": {
          "type": "number",
          "format": "double",
          "x-go-name": "Transfer"
        },
        "vcpus": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "VCPUs"
        }
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/api/v1"
    },
    "DigitaloceanSizeList": {
      "type": "object",
      "title": "DigitaloceanSizeList represents a object of digitalocean sizes.",
      "properties": {
        "optimized": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DigitaloceanSize"
          },
          "x-go-name": "Optimized"
        },
        "standard": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DigitaloceanSize"
          },
          "x-go-name": "Standard"
        }
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/api/v1"
    },
    "DigitialoceanDatacenterSpec": {
      "type": "object",
      "title": "DigitialoceanDatacenterSpec specifies a datacenter of DigitalOcean.",
      "properties": {
        "region": {
          "type": "string",
          "x-go-name": "Region"
        }
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/api/v1"
    },
    "EmptyResponse": {
      "description": "EmptyResponse is a empty response",
      "type": "object",
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/handler"
    },
    "ErrorDetails": {
      "description": "ErrorDetails contains details about the error",
      "type": "object",
      "required": [
        "code",
        "message"
      ],
      "properties": {
        "code": {
          "description": "The error code",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Code"
        },
        "details": {
          "description": "Additional error messages",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Additional"
        },
        "message": {
          "description": "The error message",
          "type": "string",
          "x-go-name": "Message"
        }
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/handler"
    },
    "Event": {
      "type": "object",
      "title": "Event is a report of an event somewhere in the cluster.",
      "properties": {
        "count": {
          "description": "The number of times this event has occurred.",
          "type": "integer",
          "format": "int32",
          "x-go-name": "Count"
        },
        "creationTimestamp": {
          "description": "CreationTimestamp is a timestamp representing the server time when this object was created.",
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreationTimestamp"
        },
        "deletionTimestamp": {
          "description": "DeletionTimestamp is a timestamp representing the server time when this object was deleted.",
          "type": "string",
          "format": "date-time",
          "x-go-name": "DeletionTimestamp"
        },
        "id": {
          "description": "ID unique value that identifies the resource generated by the server. Read-Only.",
          "type": "string",
          "x-go-name": "ID"
        },
        "involvedObject": {
          "$ref": "#/definitions/ObjectReference"
        },
        "lastTimestamp": {
          "description": "The time at which the most recent occurrence of this event was recorded.",
          "type": "string",
          "format": "date-time",
          "x-go-name": "LastTimestamp"
        },
        "message": {
          "description": "A human-readable description of the status of this operation.",
          "type": "string",
          "x-go-name": "Message"
        },
        "name": {
          "description": "Name represents human readable name for the resource",
          "type": "string",
          "x-go-name": "Name"
        },
        "type": {
          "description": "Type of this event (i.e. normal or warning). New types could be added in the future.",
          "type": "string",
          "x-go-name": "Type"
        }
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/api/v1"
    },
    "ExecConfig": {
      "description": "See the client.authentiction.k8s.io API group for specifications of the exact input\nand output format",
      "type": "object",
      "title": "ExecConfig specifies a command to provide client credentials. The command is exec'd\nand outputs structured stdout holding credentials.",
      "properties": {
        "apiVersion": {
          "description": "Preferred input version of the ExecInfo. The returned ExecCredentials MUST use\nthe same encoding version as the input.",
          "type": "string",
          "x-go-name": "APIVersion"
        },
        "args": {
          "description": "Arguments to pass to the command when executing it.\n+optional",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Args"
        },
        "command": {
          "description": "Command to execute.",
          "type": "string",
          "x-go-name": "Command"
        },
        "env": {
          "description": "Env defines additional environment variables to expose to the process. These\nare unioned with the host's environment, as well as variables client-go uses\nto pass argument to the plugin.\n+optional",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExecEnvVar"
          },
          "x-go-name": "Env"
        }
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/vendor/k8s.io/client-go/tools/clientcmd/api/v1"
    },
    "ExecEnvVar": {
      "description": "ExecEnvVar is used for setting environment variables when executing an exec-based\ncredential plugin.",
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "value": {
          "type": "string",
          "x-go-name": "Value"
        }
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/vendor/k8s.io/client-go/tools/clientcmd/api/v1"
    },
    "FakeCloudSpec": {
      "type": "object",
      "title": "FakeCloudSpec specifies access data for a fake cloud.",
      "properties": {
        "token": {
          "type": "string",
          "x-go-name": "Token"
        }
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/crd/kubermatic/v1"
    },
    "GCPCloudSpec": {
      "type": "object",
      "title": "GCPCloudSpec specifies access data to GCP.",
      "properties": {
        "credentialsReference": {
          "$ref": "#/definitions/GlobalSecretKeySelector"
        },
        "network": {
          "type": "string",
          "x-go-name": "Network"
        },
        "serviceAccount": {
          "type": "string",
          "x-go-name": "ServiceAccount"
        },
        "subnetwork": {
          "type": "string",
          "x-go-name": "Subnetwork"
        }
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/crd/kubermatic/v1"
    },
    "GCPDatacenterSpec": {
      "type": "object",
      "title": "GCPDatacenterSpec specifies a datacenter of GCP.",
      "properties": {
        "region": {
          "type": "string",
          "x-go-name": "Region"
        },
        "regional": {
          "type": "boolean",
          "x-go-name": "Regional"
        },
        "zone_suffixes": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "ZoneSuffixes"
        }
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/api/v1"
    },
    "GCPDiskType": {
      "type": "object",
      "title": "GCPDiskType represents a object of GCP disk type.",
      "properties": {
        "description": {
          "type": "string",
          "x-go-name": "Description"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        }
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/api/v1"
    },
    "GCPDiskTypeList": {
      "type": "array",
      "title": "GCPDiskTypeList represents an array of GCP disk types.",
      "items": {
        "$ref": "#/definitions/GCPDiskType"
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/api/v1"
    },
    "GCPMachineSize": {
      "type": "object",
      "title": "GCPMachineSize represents a object of GCP machine size.",
      "properties": {
        "description": {
          "type": "string",
          "x-go-name": "Description"
        },
        "memory": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Memory"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "vcpus": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "VCPUs"
        }
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/api/v1"
    },
    "GCPMachineSizeList": {
      "type": "array",
      "title": "GCPMachineSizeList represents an array of GCP machine sizes.",
      "items": {
        "$ref": "#/definitions/GCPMachineSize"
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/api/v1"
    },
    "GCPNodeSpec": {
      "description": "GCPNodeSpec gcp specific node settings",
      "type": "object",
      "properties": {
        "diskSize": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "DiskSize"
        },
        "diskType": {
          "type": "string",
          "x-go-name": "DiskType"
        },
        "labels": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-go-name": "Labels"
        },
        "machineType": {
          "type": "string",
          "x-go-name": "MachineType"
        },
        "preemptible": {
          "type": "boolean",
          "x-go-name": "Preemptible"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Tags"
        },
        "zone": {
          "type": "string",
          "x-go-name": "Zone"
        }
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/api/v1"
    },
    "GCPZone": {
      "type": "object",
      "title": "GCPZone represents a object of GCP zone.",
      "properties": {
        "name": {
          "type": "string",
          "x-go-name": "Name"
        }
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/api/v1"
    },
    "GCPZoneList": {
      "type": "array",
      "title": "GCPZoneList represents an array of GCP zones.",
      "items": {
        "$ref": "#/definitions/GCPZone"
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/api/v1"
    },
    "GlobalObjectKeySelector": {
      "description": "GlobalObjectKeySelector is needed as we can not use v1.SecretKeySelector\nbecause it is not cross namespace",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "API version of the referent.\n+optional",
          "type": "string",
          "x-go-name": "APIVersion"
        },
        "fieldPath": {
          "description": "If referring to a piece of an object instead of an entire object, this string\nshould contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2].\nFor example, if the object reference is to a container within a pod, this would take on a value like:\n\"spec.containers{name}\" (where \"name\" refers to the name of the container that triggered\nthe event) or if no container name is specified \"spec.containers[2]\" (container with\nindex 2 in this pod). This syntax is chosen only to have some well-defined way of\nreferencing a part of an object.\nTODO: this design is not final and this field is subject to change in the future.\n+optional",
          "type": "string",
          "x-go-name": "FieldPath"
        },
        "key": {
          "type": "string",
          "x-go-name": "Key"
        },
        "kind": {
          "description": "Kind of the referent.\nMore info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds\n+optional",
          "type": "string",
          "x-go-name": "Kind"
        },
        "name": {
          "description": "Name of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\n+optional",
          "type": "string",
          "x-go-name": "Name"
        },
        "namespace": {
          "description": "Namespace of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/\n+optional",
          "type": "string",
          "x-go-name": "Namespace"
        },
        "resourceVersion": {
          "description": "Specific resourceVersion to which this reference is made, if any.\nMore info: https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency\n+optional",
          "type": "string",
          "x-go-name": "ResourceVersion"
        },
        "uid": {
          "$ref": "#/definitions/UID"
        }
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/vendor/github.com/kubermatic/machine-controller/pkg/providerconfig/types"
    },
    "GlobalSecretKeySelector": {
      "$ref": "#/definitions/GlobalObjectKeySelector"
    },
    "GlobalSettings": {
      "description": "GlobalSettings defines global settings",
      "$ref": "#/definitions/SettingSpec"
    },
    "HealthStatus": {
      "type": "integer",
      "format": "int64",
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/crd/kubermatic/v1"
    },
    "HetznerCloudSpec": {
      "type": "object",
      "title": "HetznerCloudSpec specifies access data to hetzner cloud.",
      "properties": {
        "credentialsReference": {
          "$ref": "#/definitions/GlobalSecretKeySelector"
        },
        "token": {
          "type": "string",
          "x-go-name": "Token"
        }
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/crd/kubermatic/v1"
    },
    "HetznerDatacenterSpec": {
      "type": "object",
      "title": "HetznerDatacenterSpec specifies a datacenter of Hetzner.",
      "properties": {
        "datacenter": {
          "type": "string",
          "x-go-name": "Datacenter"
        },
        "location": {
          "type": "string",
          "x-go-name": "Location"
        }
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/api/v1"
    },
    "HetznerNodeSpec": {
      "description": "HetznerNodeSpec Hetzner node settings",
      "type": "object",
      "required": [
        "type"
      ],
      "properties": {
        "type": {
          "description": "server type",
          "type": "string",
          "x-go-name": "Type"
        }
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/api/v1"
    },
    "HetznerSize": {
      "type": "object",
      "title": "HetznerSize is the object representing Hetzner sizes.",
      "properties": {
        "cores": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Cores"
        },
        "description": {
          "type": "string",
          "x-go-name": "Description"
        },
        "disk": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Disk"
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ID"
        },
        "memory": {
          "type": "number",
          "format": "float",
          "x-go-name": "Memory"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        }
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/api/v1"
    },
    "HetznerSizeList": {
      "type": "object",
      "title": "HetznerSizeList represents an array of Hetzner sizes.",
      "properties": {
        "dedicated": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/HetznerSize"
          },
          "x-go-name": "Dedicated"
        },
        "standard": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/HetznerSize"
          },
          "x-go-name": "Standard"
        }
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/api/v1"
    },
    "ImageList": {
      "description": "ImageList defines a map of operating system and the image to use",
      "type": "object",
      "additionalProperties": {
        "type": "string"
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/api/v1"
    },
    "Kubeconfig": {
      "description": "Kubeconfig is a clusters kubeconfig",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "Legacy field from pkg/api/types.go TypeMeta.\nTODO(jlowdermilk): remove this after eliminating downstream dependencies.\n+optional",
          "type": "string",
          "x-go-name": "APIVersion"
        },
        "clusters": {
          "description": "Clusters is a map of referencable names to cluster configs",
          "type": "array",
          "items": {
            "$ref": "#/definitions/NamedCluster"
          },
          "x-go-name": "Clusters"
        },
        "contexts": {
          "description": "Contexts is a map of referencable names to context configs",
          "type": "array",
          "items": {
            "$ref": "#/definitions/NamedContext"
          },
          "x-go-name": "Contexts"
        },
        "current-context": {
          "description": "CurrentContext is the name of the context that you would like to use by default",
          "type": "string",
          "x-go-name": "CurrentContext"
        },
        "extensions": {
          "description": "Extensions holds additional information. This is useful for extenders so that reads and writes don't clobber unknown fields\n+optional",
          "type": "array",
          "items": {
            "$ref": "#/definitions/NamedExtension"
          },
          "x-go-name": "Extensions"
        },
        "kind": {
          "description": "Legacy field from pkg/api/types.go TypeMeta.\nTODO(jlowdermilk): remove this after eliminating downstream dependencies.\n+optional",
          "type": "string",
          "x-go-name": "Kind"
        },
        "preferences": {
          "$ref": "#/definitions/Preferences"
        },
        "users": {
          "description": "AuthInfos is a map of referencable names to user configs",
          "type": "array",
          "items": {
            "$ref": "#/definitions/NamedAuthInfo"
          },
          "x-go-name": "AuthInfos"
        }
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/api/v1"
    },
    "KubermaticVersions": {
      "type": "object",
      "title": "KubermaticVersions describes the versions of running Kubermatic components.",
      "properties": {
        "api": {
          "description": "Version of the Kubermatic API server.",
          "type": "string",
          "x-go-name": "API"
        }
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/api/v1"
    },
    "KubevirtCloudSpec": {
      "type": "object",
      "title": "KubevirtCloudSpec specifies the access data to Kubevirt.",
      "properties": {
        "credentialsReference": {
          "$ref": "#/definitions/GlobalSecretKeySelector"
        },
        "kubeconfig": {
          "type": "string",
          "x-go-name": "Kubeconfig"
        }
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/crd/kubermatic/v1"
    },
    "KubevirtDatacenterSpec": {
      "type": "object",
      "title": "KubevirtDatacenterSpec specifies a datacenter of Kubevirt.",
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/api/v1"
    },
    "KubevirtNodeSpec": {
      "description": "KubevirtNodeSpec kubevirt specific node settings",
      "type": "object",
      "required": [
        "cpus",
        "memory",
        "namespace",
        "sourceURL",
        "storageClassName",
        "pvcSize"
      ],
      "properties": {
        "cpus": {
          "description": "CPUs states how many cpus the kubevirt node will have.",
          "type": "string",
          "x-go-name": "CPUs"
        },
        "memory": {
          "description": "Memory states the memory that kubevirt node will have.",
          "type": "string",
          "x-go-name": "Memory"
        },
        "namespace": {
          "description": "Namespace states in which namespace kubevirt node will be provisioned.",
          "type": "string",
          "x-go-name": "Namespace"
        },
        "pvcSize": {
          "description": "PVCSize states the size of the provisioned pvc per node.",
          "type": "string",
          "x-go-name": "PVCSize"
        },
        "sourceURL": {
          "description": "SourceURL states the url from which the imported image will be downloaded.",
          "type": "string",
          "x-go-name": "SourceURL"
        },
        "storageClassName": {
          "description": "StorageClassName states the storage class name for the provisioned PVCs.",
          "type": "string",
          "x-go-name": "StorageClassName"
        }
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/api/v1"
    },
    "LabelKeyList": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/api/v1"
    },
    "LegacyObjectMeta": {
      "description": "Deprecated: LegacyObjectMeta is deprecated use ObjectMeta instead.",
      "type": "object",
      "title": "LegacyObjectMeta is an object storing common metadata for persistable objects.",
      "properties": {
        "annotations": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-go-name": "Annotations"
        },
        "labels": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-go-name": "Labels"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "resourceVersion": {
          "type": "string",
          "x-go-name": "ResourceVersion"
        },
        "uid": {
          "type": "string",
          "x-go-name": "UID"
        }
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/api/v1"
    },
    "MachineDeploymentStatus": {
      "description": "[MachineDeploymentStatus]\nMachineDeploymentStatus defines the observed state of MachineDeployment",
      "type": "object",
      "properties": {
        "availableReplicas": {
          "description": "Total number of available machines (ready for at least minReadySeconds)\ntargeted by this deployment.\n+optional",
          "type": "integer",
          "format": "int32",
          "x-go-name": "AvailableReplicas"
        },
        "observedGeneration": {
          "description": "The generation observed by the deployment controller.\n+optional",
          "type": "integer",
          "format": "int64",
          "x-go-name": "ObservedGeneration"
        },
        "readyReplicas": {
          "description": "Total number of ready machines targeted by this deployment.\n+optional",
          "type": "integer",
          "format": "int32",
          "x-go-name": "ReadyReplicas"
        },
        "replicas": {
          "description": "Total number of non-terminated machines targeted by this deployment\n(their labels match the selector).\n+optional",
          "type": "integer",
          "format": "int32",
          "x-go-name": "Replicas"
        },
        "unavailableReplicas": {
          "description": "Total number of unavailable machines targeted by this deployment.\nThis is the total number of machines that are still required for\nthe deployment to have 100% available capacity. They may either\nbe machines that are running but not yet available or machines\nthat still have not been created.\n+optional",
          "type": "integer",
          "format": "int32",
          "x-go-name": "UnavailableReplicas"
        },
        "updatedReplicas": {
          "description": "Total number of non-terminated machines targeted by this deployment\nthat have the desired template spec.\n+optional",
          "type": "integer",
          "format": "int32",
          "x-go-name": "UpdatedReplicas"
        }
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/vendor/github.com/kubermatic/machine-controller/pkg/apis/cluster/v1alpha1"
    },
    "MachineNetworkingConfig": {
      "type": "object",
      "title": "MachineNetworkingConfig specifies the networking parameters used for IPAM.",
      "properties": {
        "cidr": {
          "type": "string",
          "x-go-name": "CIDR"
        },
        "dnsServers": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "DNSServers"
        },
        "gateway": {
          "type": "string",
          "x-go-name": "Gateway"
        }
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/crd/kubermatic/v1"
    },
    "MasterVersion": {
      "description": "MasterVersion describes a version of the master components",
      "type": "object",
      "properties": {
        "default": {
          "type": "boolean",
          "x-go-name": "Default"
        },
        "restrictedByKubeletVersion": {
          "description": "If true, then given version control plane version is not compatible\nwith one of the kubelets inside cluster and shouldn't be used.",
          "type": "boolean",
          "x-go-name": "RestrictedByKubeletVersion"
        },
        "version": {
          "$ref": "#/definitions/Version"
        }
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/api/v1"
    },
    "NamedAuthInfo": {
      "description": "NamedAuthInfo relates nicknames to auth information",
      "type": "object",
      "properties": {
        "name": {
          "description": "Name is the nickname for this AuthInfo",
          "type": "string",
          "x-go-name": "Name"
        },
        "user": {
          "$ref": "#/definitions/AuthInfo"
        }
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/vendor/k8s.io/client-go/tools/clientcmd/api/v1"
    },
    "NamedCluster": {
      "description": "NamedCluster relates nicknames to cluster information",
      "type": "object",
      "properties": {
        "cluster": {
          "$ref": "#/definitions/Cluster"
        },
        "name": {
          "description": "Name is the nickname for this Cluster",
          "type": "string",
          "x-go-name": "Name"
        }
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/vendor/k8s.io/client-go/tools/clientcmd/api/v1"
    },
    "NamedContext": {
      "description": "NamedContext relates nicknames to context information",
      "type": "object",
      "properties": {
        "context": {
          "$ref": "#/definitions/Context"
        },
        "name": {
          "description": "Name is the nickname for this Context",
          "type": "string",
          "x-go-name": "Name"
        }
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/vendor/k8s.io/client-go/tools/clientcmd/api/v1"
    },
    "NamedExtension": {
      "description": "NamedExtension relates nicknames to extension information",
      "type": "object",
      "properties": {
        "extension": {
          "$ref": "#/definitions/RawExtension"
        },
        "name": {
          "description": "Name is the nickname for this Extension",
          "type": "string",
          "x-go-name": "Name"
        }
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/vendor/k8s.io/client-go/tools/clientcmd/api/v1"
    },
    "Namespace": {
      "description": "Namespace defines namespace",
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "x-go-name": "Name"
        }
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/api/v1"
    },
    "Node": {
      "description": "Node represents a worker node that is part of a cluster",
      "type": "object",
      "properties": {
        "creationTimestamp": {
          "description": "CreationTimestamp is a timestamp representing the server time when this object was created.",
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreationTimestamp"
        },
        "deletionTimestamp": {
          "description": "DeletionTimestamp is a timestamp representing the server time when this object was deleted.",
          "type": "string",
          "format": "date-time",
          "x-go-name": "DeletionTimestamp"
        },
        "id": {
          "description": "ID unique value that identifies the resource generated by the server. Read-Only.",
          "type": "string",
          "x-go-name": "ID"
        },
        "name": {
          "description": "Name represents human readable name for the resource",
          "type": "string",
          "x-go-name": "Name"
        },
        "spec": {
          "$ref": "#/definitions/NodeSpec"
        },
        "status": {
          "$ref": "#/definitions/NodeStatus"
        }
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/api/v1"
    },
    "NodeAddress": {
      "type": "object",
      "title": "NodeAddress contains information for the node's address.",
      "properties": {
        "address": {
          "type": "string",
          "x-go-name": "Address",
          "example": "192.168.1.1, node1.my.dns"
        },
        "type": {
          "type": "string",
          "x-go-name": "Type",
          "example": "ExternalIP, InternalIP, InternalDNS, ExternalDNS"
        }
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/api/v1"
    },
    "NodeCloudSpec": {
      "type": "object",
      "title": "NodeCloudSpec represents the collection of cloud provider specific settings. Only one must be set at a time.",
      "properties": {
        "aws": {
          "$ref": "#/definitions/AWSNodeSpec"
        },
        "azure": {
          "$ref": "#/definitions/AzureNodeSpec"
        },
        "digitalocean": {
          "$ref": "#/definitions/DigitaloceanNodeSpec"
        },
        "gcp": {
          "$ref": "#/definitions/GCPNodeSpec"
        },
        "hetzner": {
          "$ref": "#/definitions/HetznerNodeSpec"
        },
        "kubevirt": {
          "$ref": "#/definitions/KubevirtNodeSpec"
        },
        "openstack": {
          "$ref": "#/definitions/OpenstackNodeSpec"
        },
        "packet": {
          "$ref": "#/definitions/PacketNodeSpec"
        },
        "vsphere": {
          "$ref": "#/definitions/VSphereNodeSpec"
        }
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/api/v1"
    },
    "NodeDeployment": {
      "description": "NodeDeployment represents a set of worker nodes that is part of a cluster",
      "type": "object",
      "properties": {
        "creationTimestamp": {
          "description": "CreationTimestamp is a timestamp representing the server time when this object was created.",
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreationTimestamp"
        },
        "deletionTimestamp": {
          "description": "DeletionTimestamp is a timestamp representing the server time when this object was deleted.",
          "type": "string",
          "format": "date-time",
          "x-go-name": "DeletionTimestamp"
        },
        "id": {
          "description": "ID unique value that identifies the resource generated by the server. Read-Only.",
          "type": "string",
          "x-go-name": "ID"
        },
        "name": {
          "description": "Name represents human readable name for the resource",
          "type": "string",
          "x-go-name": "Name"
        },
        "spec": {
          "$ref": "#/definitions/NodeDeploymentSpec"
        },
        "status": {
          "$ref": "#/definitions/MachineDeploymentStatus"
        }
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/api/v1"
    },
    "NodeDeploymentSpec": {
      "description": "NodeDeploymentSpec node deployment specification",
      "type": "object",
      "required": [
        "replicas",
        "template"
      ],
      "properties": {
        "paused": {
          "type": "boolean",
          "x-go-name": "Paused"
        },
        "replicas": {
          "type": "integer",
          "format": "int32",
          "x-go-name": "Replicas"
        },
        "template": {
          "$ref": "#/definitions/NodeSpec"
        }
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/api/v1"
    },
    "NodeMetric": {
      "description": "NodeMetric defines a metric for the given node",
      "type": "object",
      "properties": {
        "cpuAvailableMillicores": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "CPUAvailableMillicores"
        },
        "cpuTotalMillicores": {
          "description": "CPUTotalMillicores in m cores",
          "type": "integer",
          "format": "int64",
          "x-go-name": "CPUTotalMillicores"
        },
        "cpuUsedPercentage": {
          "description": "CPUUsedPercentage in percentage",
          "type": "integer",
          "format": "int64",
          "x-go-name": "CPUUsedPercentage"
        },
        "memoryAvailableBytes": {
          "description": "MemoryAvailableBytes available memory for node",
          "type": "integer",
          "format": "int64",
          "x-go-name": "MemoryAvailableBytes"
        },
        "memoryTotalBytes": {
          "description": "MemoryTotalBytes current memory usage in bytes",
          "type": "integer",
          "format": "int64",
          "x-go-name": "MemoryTotalBytes"
        },
        "memoryUsedPercentage": {
          "description": "MemoryUsedPercentage in percentage",
          "type": "integer",
          "format": "int64",
          "x-go-name": "MemoryUsedPercentage"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        }
      },
      "x-go-name": "NodesMetric",
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/api/v1"
    },
    "NodeResources": {
      "description": "NodeResources cpu and memory of a node",
      "type": "object",
      "properties": {
        "cpu": {
          "type": "string",
          "x-go-name": "CPU"
        },
        "memory": {
          "type": "string",
          "x-go-name": "Memory"
        }
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/api/v1"
    },
    "NodeSpec": {
      "description": "NodeSpec node specification",
      "type": "object",
      "required": [
        "cloud",
        "operatingSystem",
        "versions"
      ],
      "properties": {
        "cloud": {
          "$ref": "#/definitions/NodeCloudSpec"
        },
        "labels": {
          "description": "Map of string keys and values that can be used to organize and categorize (scope and select) objects.\nIt will be applied to Nodes allowing users run their apps on specific Node using labelSelector.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-go-name": "Labels"
        },
        "operatingSystem": {
          "$ref": "#/definitions/OperatingSystemSpec"
        },
        "sshUserName": {
          "type": "string",
          "x-go-name": "SSHUserName"
        },
        "taints": {
          "description": "List of taints to set on new nodes",
          "type": "array",
          "items": {
            "$ref": "#/definitions/TaintSpec"
          },
          "x-go-name": "Taints"
        },
        "versions": {
          "$ref": "#/definitions/NodeVersionInfo"
        }
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/api/v1"
    },
    "NodeStatus": {
      "type": "object",
      "title": "NodeStatus is information about the current status of a node.",
      "properties": {
        "addresses": {
          "description": "different addresses of a node",
          "type": "array",
          "items": {
            "$ref": "#/definitions/NodeAddress"
          },
          "x-go-name": "Addresses"
        },
        "allocatable": {
          "$ref": "#/definitions/NodeResources"
        },
        "capacity": {
          "$ref": "#/definitions/NodeResources"
        },
        "errorMessage": {
          "description": "in case of a error this will contain a detailed error explanation",
          "type": "string",
          "x-go-name": "ErrorMessage"
        },
        "errorReason": {
          "description": "in case of a error this will contain a short error message",
          "type": "string",
          "x-go-name": "ErrorReason"
        },
        "machineName": {
          "description": "name of the actual Machine object",
          "type": "string",
          "x-go-name": "MachineName"
        },
        "nodeInfo": {
          "$ref": "#/definitions/NodeSystemInfo"
        }
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/api/v1"
    },
    "NodeSystemInfo": {
      "type": "object",
      "title": "NodeSystemInfo is a set of versions/ids/uuids to uniquely identify the node.",
      "properties": {
        "architecture": {
          "type": "string",
          "x-go-name": "Architecture"
        },
        "containerRuntime": {
          "type": "string",
          "x-go-name": "ContainerRuntime"
        },
        "containerRuntimeVersion": {
          "type": "string",
          "x-go-name": "ContainerRuntimeVersion"
        },
        "kernelVersion": {
          "type": "string",
          "x-go-name": "KernelVersion"
        },
        "kubeletVersion": {
          "type": "string",
          "x-go-name": "KubeletVersion"
        },
        "operatingSystem": {
          "type": "string",
          "x-go-name": "OperatingSystem"
        }
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/api/v1"
    },
    "NodeVersionInfo": {
      "description": "NodeVersionInfo node version information",
      "type": "object",
      "properties": {
        "kubelet": {
          "type": "string",
          "x-go-name": "Kubelet"
        }
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/api/v1"
    },
    "OIDCSettings": {
      "type": "object",
      "properties": {
        "clientId": {
          "type": "string",
          "x-go-name": "ClientID"
        },
        "clientSecret": {
          "type": "string",
          "x-go-name": "ClientSecret"
        },
        "extraScopes": {
          "type": "string",
          "x-go-name": "ExtraScopes"
        },
        "groupsClaim": {
          "type": "string",
          "x-go-name": "GroupsClaim"
        },
        "issuerUrl": {
          "type": "string",
          "x-go-name": "IssuerURL"
        },
        "requiredClaim": {
          "type": "string",
          "x-go-name": "RequiredClaim"
        },
        "usernameClaim": {
          "type": "string",
          "x-go-name": "UsernameClaim"
        }
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/crd/kubermatic/v1"
    },
    "ObjectMeta": {
      "description": "ObjectMeta defines the set of fields that objects returned from the API have",
      "type": "object",
      "properties": {
        "creationTimestamp": {
          "description": "CreationTimestamp is a timestamp representing the server time when this object was created.",
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreationTimestamp"
        },
        "deletionTimestamp": {
          "description": "DeletionTimestamp is a timestamp representing the server time when this object was deleted.",
          "type": "string",
          "format": "date-time",
          "x-go-name": "DeletionTimestamp"
        },
        "id": {
          "description": "ID unique value that identifies the resource generated by the server. Read-Only.",
          "type": "string",
          "x-go-name": "ID"
        },
        "name": {
          "description": "Name represents human readable name for the resource",
          "type": "string",
          "x-go-name": "Name"
        }
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/api/v1"
    },
    "ObjectReference": {
      "type": "object",
      "title": "ObjectReference contains basic information about referred object.",
      "properties": {
        "name": {
          "description": "Name of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\n+optional",
          "type": "string",
          "x-go-name": "Name"
        },
        "namespace": {
          "description": "Namespace of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/\n+optional",
          "type": "string",
          "x-go-name": "Namespace"
        },
        "type": {
          "description": "Type of the referent.",
          "type": "string",
          "x-go-name": "Type"
        }
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/api/v1"
    },
    "Openshift": {
      "type": "object",
      "properties": {
        "imagePullSecret": {
          "type": "string",
          "x-go-name": "ImagePullSecret"
        }
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/crd/kubermatic/v1"
    },
    "OpenstackCloudSpec": {
      "type": "object",
      "title": "OpenstackCloudSpec specifies access data to an OpenStack cloud.",
      "properties": {
        "credentialsReference": {
          "$ref": "#/definitions/GlobalSecretKeySelector"
        },
        "domain": {
          "type": "string",
          "x-go-name": "Domain"
        },
        "floatingIpPool": {
          "description": "FloatingIPPool holds the name of the public network\nThe public network is reachable from the outside world\nand should provide the pool of IP addresses to choose from.\n\nWhen specified, all worker nodes will receive a public ip from this floating ip pool\n\nNote that the network is external if the \"External\" field is set to true",
          "type": "string",
          "x-go-name": "FloatingIPPool"
        },
        "network": {
          "description": "Network holds the name of the internal network\nWhen specified, all worker nodes will be attached to this network. If not specified, a network, subnet \u0026 router will be created\n\nNote that the network is internal if the \"External\" field is set to false",
          "type": "string",
          "x-go-name": "Network"
        },
        "password": {
          "type": "string",
          "x-go-name": "Password"
        },
        "routerID": {
          "type": "string",
          "x-go-name": "RouterID"
        },
        "securityGroups": {
          "type": "string",
          "x-go-name": "SecurityGroups"
        },
        "subnetID": {
          "type": "string",
          "x-go-name": "SubnetID"
        },
        "tenant": {
          "type": "string",
          "x-go-name": "Tenant"
        },
        "tenantID": {
          "type": "string",
          "x-go-name": "TenantID"
        },
        "username": {
          "type": "string",
          "x-go-name": "Username"
        }
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/crd/kubermatic/v1"
    },
    "OpenstackDatacenterSpec": {
      "type": "object",
      "title": "OpenstackDatacenterSpec specifies a generic bare metal datacenter.",
      "properties": {
        "auth_url": {
          "type": "string",
          "x-go-name": "AuthURL"
        },
        "availability_zone": {
          "type": "string",
          "x-go-name": "AvailabilityZone"
        },
        "enforce_floating_ip": {
          "type": "boolean",
          "x-go-name": "EnforceFloatingIP"
        },
        "images": {
          "$ref": "#/definitions/ImageList"
        },
        "region": {
          "type": "string",
          "x-go-name": "Region"
        }
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/api/v1"
    },
    "OpenstackNetwork": {
      "type": "object",
      "title": "OpenstackNetwork is the object representing a openstack network.",
      "properties": {
        "external": {
          "description": "External set if network is the external network",
          "type": "boolean",
          "x-go-name": "External"
        },
        "id": {
          "description": "Id uniquely identifies the current network",
          "type": "string",
          "x-go-name": "ID"
        },
        "name": {
          "description": "Name is the name of the network",
          "type": "string",
          "x-go-name": "Name"
        }
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/api/v1"
    },
    "OpenstackNodeSpec": {
      "description": "OpenstackNodeSpec openstack node settings",
      "type": "object",
      "required": [
        "flavor",
        "image"
      ],
      "properties": {
        "diskSize": {
          "description": "if set, the rootDisk will be a volume. If not, the rootDisk will be on ephemeral storage and its size will be derived from the flavor",
          "type": "integer",
          "format": "int64",
          "x-go-name": "RootDiskSizeGB"
        },
        "flavor": {
          "description": "instance flavor",
          "type": "string",
          "x-go-name": "Flavor"
        },
        "image": {
          "description": "image to use",
          "type": "string",
          "x-go-name": "Image"
        },
        "tags": {
          "description": "Additional metadata to set",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-go-name": "Tags"
        },
        "useFloatingIP": {
          "description": "Defines whether floating ip should be used",
          "type": "boolean",
          "x-go-name": "UseFloatingIP"
        }
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/api/v1"
    },
    "OpenstackSecurityGroup": {
      "type": "object",
      "title": "OpenstackSecurityGroup is the object representing a openstack security group.",
      "properties": {
        "id": {
          "description": "Id uniquely identifies the current security group",
          "type": "string",
          "x-go-name": "ID"
        },
        "name": {
          "description": "Name is the name of the security group",
          "type": "string",
          "x-go-name": "Name"
        }
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/api/v1"
    },
    "OpenstackSize": {
      "type": "object",
      "title": "OpenstackSize is the object representing openstack's sizes.",
      "properties": {
        "disk": {
          "description": "Disk is the amount of root disk, measured in GB",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Disk"
        },
        "isPublic": {
          "description": "IsPublic indicates whether the size is public (available to all projects) or scoped to a set of projects",
          "type": "boolean",
          "x-go-name": "IsPublic"
        },
        "memory": {
          "description": "MemoryTotalBytes is the amount of memory, measured in MB",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Memory"
        },
        "region": {
          "description": "Region specifies the geographic region in which the size resides",
          "type": "string",
          "x-go-name": "Region"
        },
        "slug": {
          "description": "Slug holds  the name of the size",
          "type": "string",
          "x-go-name": "Slug"
        },
        "swap": {
          "description": "Swap is the amount of swap space, measured in MB",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Swap"
        },
        "vcpus": {
          "description": "VCPUs indicates how many (virtual) CPUs are available for this flavor",
          "type": "integer",
          "format": "int64",
          "x-go-name": "VCPUs"
        }
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/api/v1"
    },
    "OpenstackSubnet": {
      "type": "object",
      "title": "OpenstackSubnet is the object representing a openstack subnet.",
      "properties": {
        "id": {
          "description": "Id uniquely identifies the subnet",
          "type": "string",
          "x-go-name": "ID"
        },
        "name": {
          "description": "Name is human-readable name for the subnet",
          "type": "string",
          "x-go-name": "Name"
        }
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/api/v1"
    },
    "OpenstackTenant": {
      "type": "object",
      "title": "OpenstackTenant is the object representing a openstack tenant.",
      "properties": {
        "id": {
          "description": "Id uniquely identifies the current tenant",
          "type": "string",
          "x-go-name": "ID"
        },
        "name": {
          "description": "Name is the name of the tenant",
          "type": "string",
          "x-go-name": "Name"
        }
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/api/v1"
    },
    "OperatingSystemSpec": {
      "type": "object",
      "title": "OperatingSystemSpec represents the collection of os specific settings. Only one must be set at a time.",
      "properties": {
        "centos": {
          "$ref": "#/definitions/CentOSSpec"
        },
        "containerLinux": {
          "$ref": "#/definitions/ContainerLinuxSpec"
        },
        "ubuntu": {
          "$ref": "#/definitions/UbuntuSpec"
        }
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/api/v1"
    },
    "PacketCPU": {
      "type": "object",
      "title": "PacketCPU represents an array of Packet CPUs. It is a part of PacketSize.",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Count"
        },
        "type": {
          "type": "string",
          "x-go-name": "Type"
        }
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/api/v1"
    },
    "PacketCloudSpec": {
      "type": "object",
      "title": "PacketCloudSpec specifies access data to a Packet cloud.",
      "properties": {
        "apiKey": {
          "type": "string",
          "x-go-name": "APIKey"
        },
        "billingCycle": {
          "type": "string",
          "x-go-name": "BillingCycle"
        },
        "credentialsReference": {
          "$ref": "#/definitions/GlobalSecretKeySelector"
        },
        "projectID": {
          "type": "string",
          "x-go-name": "ProjectID"
        }
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/crd/kubermatic/v1"
    },
    "PacketDatacenterSpec": {
      "type": "object",
      "title": "PacketDatacenterSpec specifies a datacenter of Packet.",
      "properties": {
        "facilities": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Facilities"
        }
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/api/v1"
    },
    "PacketDrive": {
      "type": "object",
      "title": "PacketDrive represents an array of Packet drives. It is a part of PacketSize.",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Count"
        },
        "size": {
          "type": "string",
          "x-go-name": "Size"
        },
        "type": {
          "type": "string",
          "x-go-name": "Type"
        }
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/api/v1"
    },
    "PacketNodeSpec": {
      "description": "PacketNodeSpec specifies packet specific node settings",
      "type": "object",
      "required": [
        "instanceType"
      ],
      "properties": {
        "instanceType": {
          "description": "InstanceType denotes the plan to which the device will be provisioned.",
          "type": "string",
          "x-go-name": "InstanceType"
        },
        "tags": {
          "description": "additional instance tags",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Tags"
        }
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/api/v1"
    },
    "PacketSize": {
      "type": "object",
      "title": "PacketSize is the object representing Packet VM sizes.",
      "properties": {
        "cpus": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PacketCPU"
          },
          "x-go-name": "CPUs"
        },
        "drives": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PacketDrive"
          },
          "x-go-name": "Drives"
        },
        "memory": {
          "type": "string",
          "x-go-name": "Memory"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        }
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/api/v1"
    },
    "PacketSizeList": {
      "type": "array",
      "title": "PacketSizeList represents an array of Packet VM sizes.",
      "items": {
        "$ref": "#/definitions/PacketSize"
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/api/v1"
    },
    "PolicyRule": {
      "description": "PolicyRule holds information that describes a policy rule, but does not contain information\nabout who the rule applies to or which namespace the rule applies to.",
      "type": "object",
      "properties": {
        "apiGroups": {
          "description": "APIGroups is the name of the APIGroup that contains the resources.  If multiple API groups are specified, any action requested against one of\nthe enumerated resources in any API group will be allowed.\n+optional",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "APIGroups"
        },
        "nonResourceURLs": {
          "description": "NonResourceURLs is a set of partial urls that a user should have access to.  *s are allowed, but only as the full, final step in the path\nSince non-resource URLs are not namespaced, this field is only applicable for ClusterRoles referenced from a ClusterRoleBinding.\nRules can either apply to API resources (such as \"pods\" or \"secrets\") or non-resource URL paths (such as \"/api\"),  but not both.\n+optional",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "NonResourceURLs"
        },
        "resourceNames": {
          "description": "ResourceNames is an optional white list of names that the rule applies to.  An empty set means that everything is allowed.\n+optional",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "ResourceNames"
        },
        "resources": {
          "description": "Resources is a list of resources this rule applies to.  ResourceAll represents all resources.\n+optional",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Resources"
        },
        "verbs": {
          "description": "Verbs is a list of Verbs that apply to ALL the ResourceKinds and AttributeRestrictions contained in this rule.  VerbAll represents all kinds.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Verbs"
        }
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/vendor/k8s.io/api/rbac/v1"
    },
    "Preferences": {
      "type": "object",
      "properties": {
        "colors": {
          "description": "+optional",
          "type": "boolean",
          "x-go-name": "Colors"
        },
        "extensions": {
          "description": "Extensions holds additional information. This is useful for extenders so that reads and writes don't clobber unknown fields\n+optional",
          "type": "array",
          "items": {
            "$ref": "#/definitions/NamedExtension"
          },
          "x-go-name": "Extensions"
        }
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/vendor/k8s.io/client-go/tools/clientcmd/api/v1"
    },
    "Project": {
      "description": "Project is a top-level container for a set of resources",
      "type": "object",
      "properties": {
        "creationTimestamp": {
          "description": "CreationTimestamp is a timestamp representing the server time when this object was created.",
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreationTimestamp"
        },
        "deletionTimestamp": {
          "description": "DeletionTimestamp is a timestamp representing the server time when this object was deleted.",
          "type": "string",
          "format": "date-time",
          "x-go-name": "DeletionTimestamp"
        },
        "id": {
          "description": "ID unique value that identifies the resource generated by the server. Read-Only.",
          "type": "string",
          "x-go-name": "ID"
        },
        "labels": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-go-name": "Labels"
        },
        "name": {
          "description": "Name represents human readable name for the resource",
          "type": "string",
          "x-go-name": "Name"
        },
        "owners": {
          "description": "Owners an optional owners list for the given project",
          "type": "array",
          "items": {
            "$ref": "#/definitions/User"
          },
          "x-go-name": "Owners"
        },
        "status": {
          "type": "string",
          "x-go-name": "Status"
        }
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/api/v1"
    },
    "ProjectGroup": {
      "description": "ProjectGroup is a helper data structure that\nstores the information about a project and a group prefix that a user belongs to",
      "type": "object",
      "properties": {
        "group": {
          "type": "string",
          "x-go-name": "GroupPrefix"
        },
        "id": {
          "type": "string",
          "x-go-name": "ID"
        }
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/api/v1"
    },
    "PublicAWSCloudSpec": {
      "type": "object",
      "title": "PublicAWSCloudSpec is a public counterpart of apiv1.AWSCloudSpec.",
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/api/v1"
    },
    "PublicAzureCloudSpec": {
      "type": "object",
      "title": "PublicAzureCloudSpec is a public counterpart of apiv1.AzureCloudSpec.",
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/api/v1"
    },
    "PublicBringYourOwnCloudSpec": {
      "type": "object",
      "title": "PublicBringYourOwnCloudSpec is a public counterpart of apiv1.BringYourOwnCloudSpec.",
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/api/v1"
    },
    "PublicCloudSpec": {
      "type": "object",
      "title": "PublicCloudSpec is a public counterpart of apiv1.CloudSpec.",
      "properties": {
        "aws": {
          "$ref": "#/definitions/PublicAWSCloudSpec"
        },
        "azure": {
          "$ref": "#/definitions/PublicAzureCloudSpec"
        },
        "bringyourown": {
          "$ref": "#/definitions/PublicBringYourOwnCloudSpec"
        },
        "dc": {
          "type": "string",
          "x-go-name": "DatacenterName"
        },
        "digitalocean": {
          "$ref": "#/definitions/PublicDigitaloceanCloudSpec"
        },
        "fake": {
          "$ref": "#/definitions/PublicFakeCloudSpec"
        },
        "gcp": {
          "$ref": "#/definitions/PublicGCPCloudSpec"
        },
        "hetzner": {
          "$ref": "#/definitions/PublicHetznerCloudSpec"
        },
        "kubevirt": {
          "$ref": "#/definitions/PublicKubevirtCloudSpec"
        },
        "openstack": {
          "$ref": "#/definitions/PublicOpenstackCloudSpec"
        },
        "packet": {
          "$ref": "#/definitions/PublicPacketCloudSpec"
        },
        "vsphere": {
          "$ref": "#/definitions/PublicVSphereCloudSpec"
        }
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/api/v1"
    },
    "PublicDigitaloceanCloudSpec": {
      "type": "object",
      "title": "PublicDigitaloceanCloudSpec is a public counterpart of apiv1.DigitaloceanCloudSpec.",
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/api/v1"
    },
    "PublicFakeCloudSpec": {
      "type": "object",
      "title": "PublicFakeCloudSpec is a public counterpart of apiv1.FakeCloudSpec.",
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/api/v1"
    },
    "PublicGCPCloudSpec": {
      "type": "object",
      "title": "PublicGCPCloudSpec is a public counterpart of apiv1.GCPCloudSpec.",
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/api/v1"
    },
    "PublicHetznerCloudSpec": {
      "type": "object",
      "title": "PublicHetznerCloudSpec is a public counterpart of apiv1.HetznerCloudSpec.",
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/api/v1"
    },
    "PublicKubevirtCloudSpec": {
      "type": "object",
      "title": "PublicKubevirtCloudSpec is a public counterpart of apiv1.KubevirtCloudSpec.",
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/api/v1"
    },
    "PublicOpenstackCloudSpec": {
      "type": "object",
      "title": "PublicOpenstackCloudSpec is a public counterpart of apiv1.OpenstackCloudSpec.",
      "properties": {
        "floatingIpPool": {
          "type": "string",
          "x-go-name": "FloatingIPPool"
        }
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/api/v1"
    },
    "PublicPacketCloudSpec": {
      "type": "object",
      "title": "PublicPacketCloudSpec is a public counterpart of apiv1.PacketCloudSpec.",
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/api/v1"
    },
    "PublicServiceAccountToken": {
      "description": "PublicServiceAccountToken represent an API service account token without secret fields",
      "type": "object",
      "properties": {
        "creationTimestamp": {
          "description": "CreationTimestamp is a timestamp representing the server time when this object was created.",
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreationTimestamp"
        },
        "deletionTimestamp": {
          "description": "DeletionTimestamp is a timestamp representing the server time when this object was deleted.",
          "type": "string",
          "format": "date-time",
          "x-go-name": "DeletionTimestamp"
        },
        "expiry": {
          "description": "Expiry is a timestamp representing the time when this token will expire.",
          "type": "string",
          "format": "date-time",
          "x-go-name": "Expiry"
        },
        "id": {
          "description": "ID unique value that identifies the resource generated by the server. Read-Only.",
          "type": "string",
          "x-go-name": "ID"
        },
        "name": {
          "description": "Name represents human readable name for the resource",
          "type": "string",
          "x-go-name": "Name"
        }
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/api/v1"
    },
    "PublicVSphereCloudSpec": {
      "type": "object",
      "title": "PublicVSphereCloudSpec is a public counterpart of apiv1.VSphereCloudSpec.",
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/api/v1"
    },
    "RawExtension": {
      "description": "To use this, make a field which has RawExtension as its type in your external, versioned\nstruct, and Object in your internal struct. You also need to register your\nvarious plugin types.\n\nInternal package:\ntype MyAPIObject struct {\nruntime.TypeMeta `json:\",inline\"`\nMyPlugin runtime.Object `json:\"myPlugin\"`\n}\ntype PluginA struct {\nAOption string `json:\"aOption\"`\n}\n\nExternal package:\ntype MyAPIObject struct {\nruntime.TypeMeta `json:\",inline\"`\nMyPlugin runtime.RawExtension `json:\"myPlugin\"`\n}\ntype PluginA struct {\nAOption string `json:\"aOption\"`\n}\n\nOn the wire, the JSON will look something like this:\n{\n\"kind\":\"MyAPIObject\",\n\"apiVersion\":\"v1\",\n\"myPlugin\": {\n\"kind\":\"PluginA\",\n\"aOption\":\"foo\",\n},\n}\n\nSo what happens? Decode first uses json or yaml to unmarshal the serialized data into\nyour external MyAPIObject. That causes the raw JSON to be stored, but not unpacked.\nThe next step is to copy (using pkg/conversion) into the internal struct. The runtime\npackage's DefaultScheme has conversion functions installed which will unpack the\nJSON stored in RawExtension, turning it into the correct object type, and storing it\nin the Object. (TODO: In the case where the object is of an unknown type, a\nruntime.Unknown object will be created and stored.)\n\n+k8s:deepcopy-gen=true\n+protobuf=true\n+k8s:openapi-gen=true",
      "type": "object",
      "title": "RawExtension is used to hold extensions in external versions.",
      "properties": {
        "Raw": {
          "description": "Raw is the underlying serialization of this object.\n\nTODO: Determine how to detect ContentType and ContentEncoding of 'Raw' data.",
          "type": "array",
          "items": {
            "type": "integer",
            "format": "uint8"
          }
        }
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/vendor/k8s.io/apimachinery/pkg/runtime"
    },
    "ResourceLabelMap": {
      "title": "ResourceLabelMap defines list of labels grouped by specific resource types.",
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/api/v1"
    },
    "ResourceType": {
      "type": "string",
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/api/v1"
    },
    "Role": {
      "description": "Role defines RBAC role for the user cluster",
      "type": "object",
      "properties": {
        "creationTimestamp": {
          "description": "CreationTimestamp is a timestamp representing the server time when this object was created.",
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreationTimestamp"
        },
        "deletionTimestamp": {
          "description": "DeletionTimestamp is a timestamp representing the server time when this object was deleted.",
          "type": "string",
          "format": "date-time",
          "x-go-name": "DeletionTimestamp"
        },
        "id": {
          "description": "ID unique value that identifies the resource generated by the server. Read-Only.",
          "type": "string",
          "x-go-name": "ID"
        },
        "name": {
          "description": "Name represents human readable name for the resource",
          "type": "string",
          "x-go-name": "Name"
        },
        "namespace": {
          "description": "Indicates the scope of this role.",
          "type": "string",
          "x-go-name": "Namespace"
        },
        "rules": {
          "description": "Rules holds all the PolicyRules for this Role",
          "type": "array",
          "items": {
            "$ref": "#/definitions/PolicyRule"
          },
          "x-go-name": "Rules"
        }
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/api/v1"
    },
    "RoleBinding": {
      "type": "object",
      "title": "RoleBinding references a role, but does not contain it.",
      "properties": {
        "creationTimestamp": {
          "description": "CreationTimestamp is a timestamp representing the server time when this object was created.",
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreationTimestamp"
        },
        "deletionTimestamp": {
          "description": "DeletionTimestamp is a timestamp representing the server time when this object was deleted.",
          "type": "string",
          "format": "date-time",
          "x-go-name": "DeletionTimestamp"
        },
        "id": {
          "description": "ID unique value that identifies the resource generated by the server. Read-Only.",
          "type": "string",
          "x-go-name": "ID"
        },
        "name": {
          "description": "Name represents human readable name for the resource",
          "type": "string",
          "x-go-name": "Name"
        },
        "namespace": {
          "description": "Indicates the scope of this binding.",
          "type": "string",
          "x-go-name": "Namespace"
        },
        "roleRefName": {
          "type": "string",
          "x-go-name": "RoleRefName"
        },
        "subjects": {
          "description": "Subjects holds references to the objects the role applies to.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Subject"
          },
          "x-go-name": "Subjects"
        }
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/api/v1"
    },
    "SSHKey": {
      "description": "SSHKey represents a ssh key",
      "type": "object",
      "properties": {
        "creationTimestamp": {
          "description": "CreationTimestamp is a timestamp representing the server time when this object was created.",
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreationTimestamp"
        },
        "deletionTimestamp": {
          "description": "DeletionTimestamp is a timestamp representing the server time when this object was deleted.",
          "type": "string",
          "format": "date-time",
          "x-go-name": "DeletionTimestamp"
        },
        "id": {
          "description": "ID unique value that identifies the resource generated by the server. Read-Only.",
          "type": "string",
          "x-go-name": "ID"
        },
        "name": {
          "description": "Name represents human readable name for the resource",
          "type": "string",
          "x-go-name": "Name"
        },
        "spec": {
          "$ref": "#/definitions/SSHKeySpec"
        }
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/api/v1"
    },
    "SSHKeySpec": {
      "description": "SSHKeySpec represents the details of a ssh key",
      "type": "object",
      "properties": {
        "fingerprint": {
          "type": "string",
          "x-go-name": "Fingerprint"
        },
        "publicKey": {
          "type": "string",
          "x-go-name": "PublicKey"
        }
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/api/v1"
    },
    "Semver": {
      "description": "Semver is struct that encapsulates semver.Semver struct so we can use it in API\n+k8s:deepcopy-gen=true",
      "type": "object",
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/semver"
    },
    "ServiceAccount": {
      "description": "ServiceAccount represent an API service account",
      "type": "object",
      "properties": {
        "creationTimestamp": {
          "description": "CreationTimestamp is a timestamp representing the server time when this object was created.",
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreationTimestamp"
        },
        "deletionTimestamp": {
          "description": "DeletionTimestamp is a timestamp representing the server time when this object was deleted.",
          "type": "string",
          "format": "date-time",
          "x-go-name": "DeletionTimestamp"
        },
        "group": {
          "description": "Group that a service account belongs to",
          "type": "string",
          "x-go-name": "Group"
        },
        "id": {
          "description": "ID unique value that identifies the resource generated by the server. Read-Only.",
          "type": "string",
          "x-go-name": "ID"
        },
        "name": {
          "description": "Name represents human readable name for the resource",
          "type": "string",
          "x-go-name": "Name"
        },
        "status": {
          "description": "Status describes three stages of ServiceAccount life including Active, Inactive and Terminating",
          "type": "string",
          "x-go-name": "Status"
        }
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/api/v1"
    },
    "ServiceAccountToken": {
      "description": "ServiceAccountToken represent an API service account token",
      "type": "object",
      "properties": {
        "creationTimestamp": {
          "description": "CreationTimestamp is a timestamp representing the server time when this object was created.",
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreationTimestamp"
        },
        "deletionTimestamp": {
          "description": "DeletionTimestamp is a timestamp representing the server time when this object was deleted.",
          "type": "string",
          "format": "date-time",
          "x-go-name": "DeletionTimestamp"
        },
        "expiry": {
          "description": "Expiry is a timestamp representing the time when this token will expire.",
          "type": "string",
          "format": "date-time",
          "x-go-name": "Expiry"
        },
        "id": {
          "description": "ID unique value that identifies the resource generated by the server. Read-Only.",
          "type": "string",
          "x-go-name": "ID"
        },
        "name": {
          "description": "Name represents human readable name for the resource",
          "type": "string",
          "x-go-name": "Name"
        },
        "token": {
          "description": "Token the JWT token",
          "type": "string",
          "x-go-name": "Token"
        }
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/api/v1"
    },
    "SettingSpec": {
      "type": "object",
      "properties": {
        "cleanupOptions": {
          "$ref": "#/definitions/CleanupOptions"
        },
        "clusterTypeOptions": {
          "type": "integer",
          "format": "int8",
          "x-go-name": "ClusterTypeOptions"
        },
        "customLinks": {
          "$ref": "#/definitions/CustomLinks"
        },
        "defaultNodeCount": {
          "type": "integer",
          "format": "int8",
          "x-go-name": "DefaultNodeCount"
        },
        "displayAPIDocs": {
          "type": "boolean",
          "x-go-name": "DisplayAPIDocs"
        },
        "displayDemoInfo": {
          "type": "boolean",
          "x-go-name": "DisplayDemoInfo"
        },
        "displayTermsOfService": {
          "type": "boolean",
          "x-go-name": "DisplayTermsOfService"
        }
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/crd/kubermatic/v1"
    },
    "Subject": {
      "description": "Right now we support \"User\" as a API group.",
      "type": "object",
      "title": "Subject contains a reference to the object or user identities a role binding applies to.",
      "properties": {
        "apiGroup": {
          "description": "APIGroup holds the API group of the referenced subject.\nDefaults to \"rbac.authorization.k8s.io\" for User and Group subjects.",
          "type": "string",
          "x-go-name": "APIGroup"
        },
        "kind": {
          "description": "Kind of object being referenced. Values defined by this API group are \"User\" and \"Group\".\nIf the Authorizer does not recognized the kind value, the Authorizer should report an error.",
          "type": "string",
          "x-go-name": "Kind"
        },
        "name": {
          "description": "Name of the object being referenced.",
          "type": "string",
          "x-go-name": "Name"
        }
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/api/v1"
    },
    "TaintSpec": {
      "description": "TaintSpec defines a node taint",
      "type": "object",
      "properties": {
        "effect": {
          "type": "string",
          "x-go-name": "Effect"
        },
        "key": {
          "type": "string",
          "x-go-name": "Key"
        },
        "value": {
          "type": "string",
          "x-go-name": "Value"
        }
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/api/v1"
    },
    "Time": {
      "description": "Time is a wrapper around time.Time which supports correct\nmarshaling JSON.  Wrappers are provided for many\nof the factory methods that the time package offers.",
      "type": "object",
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/api/v1"
    },
    "UID": {
      "description": "UID is a type that holds unique ID values, including UUIDs.  Because we\ndon't ONLY use UUIDs, this is an alias to string.  Being a type captures\nintent and helps make sure that UIDs and names do not get conflated.",
      "type": "string",
      "x-go-package": "github.com/kubermatic/kubermatic/api/vendor/k8s.io/apimachinery/pkg/types"
    },
    "UbuntuSpec": {
      "description": "UbuntuSpec ubuntu specific settings",
      "type": "object",
      "properties": {
        "distUpgradeOnBoot": {
          "description": "do a dist-upgrade on boot and reboot it required afterwards",
          "type": "boolean",
          "x-go-name": "DistUpgradeOnBoot"
        }
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/api/v1"
    },
    "User": {
      "description": "User represent an API user",
      "type": "object",
      "properties": {
        "creationTimestamp": {
          "description": "CreationTimestamp is a timestamp representing the server time when this object was created.",
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreationTimestamp"
        },
        "deletionTimestamp": {
          "description": "DeletionTimestamp is a timestamp representing the server time when this object was deleted.",
          "type": "string",
          "format": "date-time",
          "x-go-name": "DeletionTimestamp"
        },
        "email": {
          "description": "Email an email address of the user",
          "type": "string",
          "x-go-name": "Email"
        },
        "id": {
          "description": "ID unique value that identifies the resource generated by the server. Read-Only.",
          "type": "string",
          "x-go-name": "ID"
        },
        "isAdmin": {
          "description": "IsAdmin indicates admin role",
          "type": "boolean",
          "x-go-name": "IsAdmin"
        },
        "name": {
          "description": "Name represents human readable name for the resource",
          "type": "string",
          "x-go-name": "Name"
        },
        "projects": {
          "description": "Projects holds the list of project the user belongs to\nalong with the group names",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProjectGroup"
          },
          "x-go-name": "Projects"
        },
        "userSettings": {
          "$ref": "#/definitions/UserSettings"
        }
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/api/v1"
    },
    "UserSettings": {
      "description": "UserSettings represent an user settings",
      "type": "object",
      "properties": {
        "itemsPerPage": {
          "type": "integer",
          "format": "int8",
          "x-go-name": "ItemsPerPage"
        },
        "selectedProjectId": {
          "type": "string",
          "x-go-name": "SelectedProjectID"
        },
        "selectedTheme": {
          "type": "string",
          "x-go-name": "SelectedTheme"
        }
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/crd/kubermatic/v1"
    },
    "VSphereCloudSpec": {
      "type": "object",
      "title": "VSphereCloudSpec specifies access data to VSphere cloud.",
      "properties": {
        "credentialsReference": {
          "$ref": "#/definitions/GlobalSecretKeySelector"
        },
        "folder": {
          "type": "string",
          "x-go-name": "Folder"
        },
        "infraManagementUser": {
          "$ref": "#/definitions/VSphereCredentials"
        },
        "password": {
          "type": "string",
          "x-go-name": "Password"
        },
        "username": {
          "type": "string",
          "x-go-name": "Username"
        },
        "vmNetName": {
          "type": "string",
          "x-go-name": "VMNetName"
        }
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/crd/kubermatic/v1"
    },
    "VSphereCredentials": {
      "description": "VSphereCredentials credentials represents a credential for accessing vSphere",
      "type": "object",
      "properties": {
        "password": {
          "type": "string",
          "x-go-name": "Password"
        },
        "username": {
          "type": "string",
          "x-go-name": "Username"
        }
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/crd/kubermatic/v1"
    },
    "VSphereDatacenterSpec": {
      "type": "object",
      "title": "VSphereDatacenterSpec specifies a datacenter of VSphere.",
      "properties": {
        "cluster": {
          "type": "string",
          "x-go-name": "Cluster"
        },
        "datacenter": {
          "type": "string",
          "x-go-name": "Datacenter"
        },
        "datastore": {
          "type": "string",
          "x-go-name": "Datastore"
        },
        "endpoint": {
          "type": "string",
          "x-go-name": "Endpoint"
        },
        "templates": {
          "$ref": "#/definitions/ImageList"
        }
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/api/v1"
    },
    "VSphereFolder": {
      "type": "object",
      "title": "VSphereFolder is the object representing a vsphere folder.",
      "properties": {
        "path": {
          "description": "Path is the path of the folder",
          "type": "string",
          "x-go-name": "Path"
        }
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/api/v1"
    },
    "VSphereNetwork": {
      "type": "object",
      "title": "VSphereNetwork is the object representing a vsphere network.",
      "properties": {
        "absolutePath": {
          "description": "AbsolutePath is the absolute path inside vCenter",
          "type": "string",
          "x-go-name": "AbsolutePath"
        },
        "name": {
          "description": "Name is the name of the network",
          "type": "string",
          "x-go-name": "Name"
        },
        "relativePath": {
          "description": "RelativePath is the relative path inside the datacenter",
          "type": "string",
          "x-go-name": "RelativePath"
        },
        "type": {
          "description": "Type defines the type of network",
          "type": "string",
          "x-go-name": "Type"
        }
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/api/v1"
    },
    "VSphereNodeSpec": {
      "description": "VSphereNodeSpec VSphere node settings",
      "type": "object",
      "properties": {
        "cpus": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "CPUs"
        },
        "diskSizeGB": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "DiskSizeGB"
        },
        "memory": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Memory"
        },
        "template": {
          "type": "string",
          "x-go-name": "Template"
        }
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/api/v1"
    },
    "Version": {
      "type": "object",
      "title": "Version represents a single semantic version.",
      "x-go-package": "github.com/kubermatic/kubermatic/api/vendor/github.com/Masterminds/semver"
    },
    "errorResponse": {
      "description": "ErrorResponse is the default representation of an error",
      "type": "object",
      "properties": {
        "error": {
          "$ref": "#/definitions/ErrorDetails"
        }
      },
      "x-go-name": "ErrorResponse",
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/handler"
    }
  },
  "responses": {
    "empty": {
      "description": "EmptyResponse is a empty response"
    }
  }
}