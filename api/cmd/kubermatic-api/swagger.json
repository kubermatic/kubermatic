{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "description": "Kubermatic API\n\nThis describes possible operations which can be made against the Kubermatic API.",
    "title": "Kubermatic API.",
    "termsOfService": "there are no TOS at this moment, use at your own risk we take no responsibility",
    "version": "2.8"
  },
  "host": "cloud.kubermatic.io",
  "paths": {
    "/api/v1/dc": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "datacenter"
        ],
        "operationId": "listDatacenters",
        "responses": {
          "200": {
            "description": "DatacenterList",
            "schema": {
              "$ref": "#/definitions/DatacenterList"
            }
          },
          "default": {
            "$ref": "#/responses/errorResponse"
          }
        }
      }
    },
    "/api/v1/dc/{dc}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "datacenter"
        ],
        "operationId": "getDatacenter",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "DC",
            "name": "dc",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Datacenter",
            "schema": {
              "$ref": "#/definitions/Datacenter"
            }
          },
          "default": {
            "$ref": "#/responses/errorResponse"
          }
        }
      }
    },
    "/api/v1/kubeconfig": {
      "get": {
        "description": "Starts OIDC flow and generates kubeconfig, the generated config\ncontains OIDC provider authentication info",
        "produces": [
          "application/json"
        ],
        "operationId": "createOIDCKubeconfig",
        "parameters": [
          {
            "type": "string",
            "name": "ClusterID",
            "in": "query"
          },
          {
            "type": "string",
            "name": "ProjectID",
            "in": "query"
          },
          {
            "type": "string",
            "name": "UserID",
            "in": "query"
          },
          {
            "type": "string",
            "name": "Datacenter",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Kubeconfig",
            "schema": {
              "$ref": "#/definitions/Kubeconfig"
            }
          },
          "default": {
            "$ref": "#/responses/errorResponse"
          }
        }
      }
    },
    "/api/v1/me": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "users"
        ],
        "summary": "Returns information about the current user.",
        "operationId": "getCurrentUser",
        "responses": {
          "200": {
            "description": "User",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "401": {
            "$ref": "#/responses/empty"
          },
          "default": {
            "$ref": "#/responses/errorResponse"
          }
        }
      }
    },
    "/api/v1/projects": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "project"
        ],
        "summary": "Lists projects that an authenticated user is a member of.",
        "operationId": "listProjects",
        "responses": {
          "200": {
            "description": "Project",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Project"
              }
            }
          },
          "401": {
            "$ref": "#/responses/empty"
          },
          "409": {
            "$ref": "#/responses/empty"
          },
          "default": {
            "$ref": "#/responses/errorResponse"
          }
        }
      },
      "post": {
        "description": "Note that this endpoint can be consumed by every authenticated user.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "project"
        ],
        "summary": "Creates a brand new project.",
        "operationId": "createProject",
        "responses": {
          "201": {
            "description": "Project",
            "schema": {
              "$ref": "#/definitions/Project"
            }
          },
          "401": {
            "$ref": "#/responses/empty"
          },
          "409": {
            "$ref": "#/responses/empty"
          },
          "default": {
            "$ref": "#/responses/errorResponse"
          }
        }
      }
    },
    "/api/v1/projects/{project_id}": {
      "get": {
        "description": "Gets the project with the given ID",
        "produces": [
          "application/json"
        ],
        "tags": [
          "project"
        ],
        "operationId": "getProject",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Project",
            "schema": {
              "$ref": "#/definitions/Project"
            }
          },
          "401": {
            "$ref": "#/responses/empty"
          },
          "409": {
            "$ref": "#/responses/empty"
          },
          "default": {
            "$ref": "#/responses/errorResponse"
          }
        }
      },
      "put": {
        "description": "Updates the given project",
        "produces": [
          "application/json"
        ],
        "tags": [
          "project"
        ],
        "operationId": "updateProject",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "name": "name",
            "in": "query"
          }
        ],
        "responses": {
          "201": {
            "description": "Project",
            "schema": {
              "$ref": "#/definitions/Project"
            }
          },
          "400": {
            "$ref": "#/responses/empty"
          },
          "404": {
            "$ref": "#/responses/empty"
          },
          "500": {
            "$ref": "#/responses/empty"
          },
          "501": {
            "$ref": "#/responses/empty"
          },
          "default": {
            "$ref": "#/responses/errorResponse"
          }
        }
      },
      "delete": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "project"
        ],
        "summary": "Deletes the project with the given ID.",
        "operationId": "deleteProject",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/empty"
          },
          "401": {
            "$ref": "#/responses/empty"
          },
          "403": {
            "$ref": "#/responses/empty"
          },
          "default": {
            "$ref": "#/responses/errorResponse"
          }
        }
      }
    },
    "/api/v1/projects/{project_id}/dc/{dc}/clusters": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "project"
        ],
        "summary": "Lists clusters for the specified project.",
        "operationId": "listClusters",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "DC",
            "name": "dc",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ClusterList",
            "schema": {
              "$ref": "#/definitions/ClusterList"
            }
          },
          "401": {
            "$ref": "#/responses/empty"
          },
          "403": {
            "$ref": "#/responses/empty"
          },
          "default": {
            "$ref": "#/responses/errorResponse"
          }
        }
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "project"
        ],
        "summary": "Creates a cluster for the given project.",
        "operationId": "createCluster",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "DC",
            "name": "dc",
            "in": "path",
            "required": true
          },
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Cluster"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Cluster",
            "schema": {
              "$ref": "#/definitions/Cluster"
            }
          },
          "401": {
            "$ref": "#/responses/empty"
          },
          "403": {
            "$ref": "#/responses/empty"
          },
          "default": {
            "$ref": "#/responses/errorResponse"
          }
        }
      }
    },
    "/api/v1/projects/{project_id}/dc/{dc}/clusters/{cluster_id}": {
      "get": {
        "description": "Gets the cluster with the given name",
        "produces": [
          "application/json"
        ],
        "tags": [
          "project"
        ],
        "operationId": "getCluster",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "DC",
            "name": "dc",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "ClusterID",
            "name": "cluster_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Cluster",
            "schema": {
              "$ref": "#/definitions/Cluster"
            }
          },
          "401": {
            "$ref": "#/responses/empty"
          },
          "403": {
            "$ref": "#/responses/empty"
          },
          "default": {
            "$ref": "#/responses/errorResponse"
          }
        }
      },
      "delete": {
        "description": "Deletes the specified cluster",
        "produces": [
          "application/json"
        ],
        "tags": [
          "project"
        ],
        "operationId": "deleteCluster",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "DC",
            "name": "dc",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "ClusterID",
            "name": "cluster_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/empty"
          },
          "401": {
            "$ref": "#/responses/empty"
          },
          "403": {
            "$ref": "#/responses/empty"
          },
          "default": {
            "$ref": "#/responses/errorResponse"
          }
        }
      },
      "patch": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "project"
        ],
        "summary": "Patches the given cluster using JSON Merge Patch method (https://tools.ietf.org/html/rfc7396).",
        "operationId": "patchCluster",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "DC",
            "name": "dc",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "ClusterID",
            "name": "cluster_id",
            "in": "path",
            "required": true
          },
          {
            "name": "Patch",
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint8"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Cluster",
            "schema": {
              "$ref": "#/definitions/Cluster"
            }
          },
          "401": {
            "$ref": "#/responses/empty"
          },
          "403": {
            "$ref": "#/responses/empty"
          },
          "default": {
            "$ref": "#/responses/errorResponse"
          }
        }
      }
    },
    "/api/v1/projects/{project_id}/dc/{dc}/clusters/{cluster_id}/health": {
      "get": {
        "description": "Returns the cluster's component health status",
        "produces": [
          "application/json"
        ],
        "tags": [
          "project"
        ],
        "operationId": "getClusterHealth",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "DC",
            "name": "dc",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "ClusterID",
            "name": "cluster_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ClusterHealth",
            "schema": {
              "$ref": "#/definitions/ClusterHealth"
            }
          },
          "401": {
            "$ref": "#/responses/empty"
          },
          "403": {
            "$ref": "#/responses/empty"
          },
          "default": {
            "$ref": "#/responses/errorResponse"
          }
        }
      }
    },
    "/api/v1/projects/{project_id}/dc/{dc}/clusters/{cluster_id}/kubeconfig": {
      "get": {
        "produces": [
          "application/yaml"
        ],
        "tags": [
          "project"
        ],
        "summary": "Gets the kubeconfig for the specified cluster.",
        "operationId": "getClusterKubeconfig",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "DC",
            "name": "dc",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "ClusterID",
            "name": "cluster_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Kubeconfig",
            "schema": {
              "$ref": "#/definitions/Kubeconfig"
            }
          },
          "401": {
            "$ref": "#/responses/empty"
          },
          "403": {
            "$ref": "#/responses/empty"
          },
          "default": {
            "$ref": "#/responses/errorResponse"
          }
        }
      }
    },
    "/api/v1/projects/{project_id}/dc/{dc}/clusters/{cluster_id}/nodedeployments": {
      "get": {
        "description": "Lists node deployments that belong to the given cluster",
        "produces": [
          "application/json"
        ],
        "tags": [
          "project"
        ],
        "operationId": "listNodeDeployments",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "DC",
            "name": "dc",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "ClusterID",
            "name": "cluster_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "NodeDeployment",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/NodeDeployment"
              }
            }
          },
          "401": {
            "$ref": "#/responses/empty"
          },
          "403": {
            "$ref": "#/responses/empty"
          },
          "default": {
            "$ref": "#/responses/errorResponse"
          }
        }
      },
      "post": {
        "description": "Creates a node deployment that will belong to the given cluster",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "project"
        ],
        "operationId": "createNodeDeployment",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "DC",
            "name": "dc",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "ClusterID",
            "name": "cluster_id",
            "in": "path",
            "required": true
          },
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/NodeDeployment"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "NodeDeployment",
            "schema": {
              "$ref": "#/definitions/NodeDeployment"
            }
          },
          "401": {
            "$ref": "#/responses/empty"
          },
          "403": {
            "$ref": "#/responses/empty"
          },
          "default": {
            "$ref": "#/responses/errorResponse"
          }
        }
      }
    },
    "/api/v1/projects/{project_id}/dc/{dc}/clusters/{cluster_id}/nodedeployments/{nodedeployment_id}": {
      "get": {
        "description": "Patches a node deployment that is assigned to the given cluster. Please note that at the moment only\nnode deployment's spec can be updated by a patch, no other fields can be changed using this endpoint.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "project"
        ],
        "operationId": "patchNodeDeployment",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "DC",
            "name": "dc",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "ClusterID",
            "name": "cluster_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "NodeDeploymentID",
            "name": "nodedeployment_id",
            "in": "path",
            "required": true
          },
          {
            "name": "Patch",
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint8"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "NodeDeployment",
            "schema": {
              "$ref": "#/definitions/NodeDeployment"
            }
          },
          "401": {
            "$ref": "#/responses/empty"
          },
          "403": {
            "$ref": "#/responses/empty"
          },
          "default": {
            "$ref": "#/responses/errorResponse"
          }
        }
      },
      "delete": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "project"
        ],
        "summary": "Deletes the given node deployment that belongs to the cluster.",
        "operationId": "deleteNodeDeployment",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "DC",
            "name": "dc",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "ClusterID",
            "name": "cluster_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "NodeDeploymentID",
            "name": "nodedeployment_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/empty"
          },
          "401": {
            "$ref": "#/responses/empty"
          },
          "403": {
            "$ref": "#/responses/empty"
          },
          "default": {
            "$ref": "#/responses/errorResponse"
          }
        }
      }
    },
    "/api/v1/projects/{project_id}/dc/{dc}/clusters/{cluster_id}/nodedeployments/{nodedeployment_id}/nodes": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "project"
        ],
        "summary": "Lists nodes that belong to the given node deployment.",
        "operationId": "listNodeDeploymentNodes",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "DC",
            "name": "dc",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "ClusterID",
            "name": "cluster_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "NodeDeploymentID",
            "name": "nodedeployment_id",
            "in": "path",
            "required": true
          },
          {
            "type": "boolean",
            "x-go-name": "HideInitialConditions",
            "name": "hideInitialConditions",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Node",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Node"
              }
            }
          },
          "401": {
            "$ref": "#/responses/empty"
          },
          "403": {
            "$ref": "#/responses/empty"
          },
          "default": {
            "$ref": "#/responses/errorResponse"
          }
        }
      }
    },
    "/api/v1/projects/{project_id}/dc/{dc}/clusters/{cluster_id}/nodedeployments/{nodedeployment_id}/nodes/events": {
      "get": {
        "description": "If the value is 'normal' then normal events are returned. If the query parameter is missing method returns all events.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "project"
        ],
        "summary": "Lists node deployment events. If query parameter `type` is set to `warning` then only warning events are retrieved.",
        "operationId": "listNodeDeploymentNodesEvents",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "DC",
            "name": "dc",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "ClusterID",
            "name": "cluster_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "Type",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "NodeDeploymentID",
            "name": "nodedeployment_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Event",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Event"
              }
            }
          },
          "401": {
            "$ref": "#/responses/empty"
          },
          "403": {
            "$ref": "#/responses/empty"
          },
          "default": {
            "$ref": "#/responses/errorResponse"
          }
        }
      }
    },
    "/api/v1/projects/{project_id}/dc/{dc}/clusters/{cluster_id}/nodes": {
      "get": {
        "description": "This endpoint is deprecated, please create a Node Deployment instead.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "project"
        ],
        "summary": "Deprecated:\nLists nodes that belong to the given cluster",
        "operationId": "listNodesForClusterLegacy",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "DC",
            "name": "dc",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "ClusterID",
            "name": "cluster_id",
            "in": "path",
            "required": true
          },
          {
            "type": "boolean",
            "x-go-name": "HideInitialConditions",
            "name": "hideInitialConditions",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Node",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Node"
              }
            }
          },
          "401": {
            "$ref": "#/responses/empty"
          },
          "403": {
            "$ref": "#/responses/empty"
          },
          "default": {
            "$ref": "#/responses/errorResponse"
          }
        }
      },
      "post": {
        "description": "This endpoint is deprecated, please create a Node Deployment instead.\nUse POST /api/v1/projects/{project_id}/dc/{dc}/clusters/{cluster_id}/nodedeployments",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "project"
        ],
        "summary": "Deprecated:\nCreates a node that will belong to the given cluster",
        "operationId": "createNodeForClusterLegacy",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "DC",
            "name": "dc",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "ClusterID",
            "name": "cluster_id",
            "in": "path",
            "required": true
          },
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Node"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Node",
            "schema": {
              "$ref": "#/definitions/Node"
            }
          },
          "401": {
            "$ref": "#/responses/empty"
          },
          "403": {
            "$ref": "#/responses/empty"
          },
          "default": {
            "$ref": "#/responses/errorResponse"
          }
        }
      }
    },
    "/api/v1/projects/{project_id}/dc/{dc}/clusters/{cluster_id}/nodes/{node_id}": {
      "get": {
        "description": "This endpoint is deprecated, please create a Node Deployment instead.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "project"
        ],
        "summary": "Deprecated:\nGets a node that is assigned to the given cluster.",
        "operationId": "getNodeForClusterLegacy",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "DC",
            "name": "dc",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "ClusterID",
            "name": "cluster_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "NodeID",
            "name": "node_id",
            "in": "path",
            "required": true
          },
          {
            "type": "boolean",
            "x-go-name": "HideInitialConditions",
            "name": "hideInitialConditions",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Node",
            "schema": {
              "$ref": "#/definitions/Node"
            }
          },
          "401": {
            "$ref": "#/responses/empty"
          },
          "403": {
            "$ref": "#/responses/empty"
          },
          "default": {
            "$ref": "#/responses/errorResponse"
          }
        }
      },
      "delete": {
        "description": "This endpoint is deprecated, please create a Node Deployment instead.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "project"
        ],
        "summary": "Deprecated:\nDeletes the given node that belongs to the cluster.",
        "operationId": "deleteNodeForClusterLegacy",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "DC",
            "name": "dc",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "ClusterID",
            "name": "cluster_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "NodeID",
            "name": "node_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/empty"
          },
          "401": {
            "$ref": "#/responses/empty"
          },
          "403": {
            "$ref": "#/responses/empty"
          },
          "default": {
            "$ref": "#/responses/errorResponse"
          }
        }
      }
    },
    "/api/v1/projects/{project_id}/dc/{dc}/clusters/{cluster_id}/providers/azure/sizes": {
      "get": {
        "description": "Lists available VM sizes in an Azure region",
        "produces": [
          "application/json"
        ],
        "tags": [
          "azure"
        ],
        "operationId": "listAzureSizesNoCredentials",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "DC",
            "name": "dc",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "ClusterID",
            "name": "cluster_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "AzureSizeList",
            "schema": {
              "$ref": "#/definitions/AzureSizeList"
            }
          },
          "default": {
            "$ref": "#/responses/errorResponse"
          }
        }
      }
    },
    "/api/v1/projects/{project_id}/dc/{dc}/clusters/{cluster_id}/providers/digitalocean/sizes": {
      "get": {
        "description": "Lists sizes from digitalocean",
        "produces": [
          "application/json"
        ],
        "tags": [
          "digitalocean"
        ],
        "operationId": "listDigitaloceanSizesNoCredentials",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "DC",
            "name": "dc",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "ClusterID",
            "name": "cluster_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "DigitaloceanSizeList",
            "schema": {
              "$ref": "#/definitions/DigitaloceanSizeList"
            }
          },
          "default": {
            "$ref": "#/responses/errorResponse"
          }
        }
      }
    },
    "/api/v1/projects/{project_id}/dc/{dc}/clusters/{cluster_id}/providers/openstack/networks": {
      "get": {
        "description": "Lists networks from openstack",
        "produces": [
          "application/json"
        ],
        "tags": [
          "openstack"
        ],
        "operationId": "listOpenstackNetworksNoCredentials",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "DC",
            "name": "dc",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "ClusterID",
            "name": "cluster_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OpenstackNetwork",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/OpenstackNetwork"
              }
            }
          },
          "default": {
            "$ref": "#/responses/errorResponse"
          }
        }
      }
    },
    "/api/v1/projects/{project_id}/dc/{dc}/clusters/{cluster_id}/providers/openstack/securitygroups": {
      "get": {
        "description": "Lists security groups from openstack",
        "produces": [
          "application/json"
        ],
        "tags": [
          "openstack"
        ],
        "operationId": "listOpenstackSecurityGroupsNoCredentials",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "DC",
            "name": "dc",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "ClusterID",
            "name": "cluster_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OpenstackSecurityGroup",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/OpenstackSecurityGroup"
              }
            }
          },
          "default": {
            "$ref": "#/responses/errorResponse"
          }
        }
      }
    },
    "/api/v1/projects/{project_id}/dc/{dc}/clusters/{cluster_id}/providers/openstack/sizes": {
      "get": {
        "description": "Lists sizes from openstack",
        "produces": [
          "application/json"
        ],
        "tags": [
          "openstack"
        ],
        "operationId": "listOpenstackSizesNoCredentials",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "DC",
            "name": "dc",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "ClusterID",
            "name": "cluster_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OpenstackSize",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/OpenstackSize"
              }
            }
          },
          "default": {
            "$ref": "#/responses/errorResponse"
          }
        }
      }
    },
    "/api/v1/projects/{project_id}/dc/{dc}/clusters/{cluster_id}/providers/openstack/subnets": {
      "get": {
        "description": "Lists subnets from openstack",
        "produces": [
          "application/json"
        ],
        "tags": [
          "openstack"
        ],
        "operationId": "listOpenstackSubnetsNoCredentials",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "DC",
            "name": "dc",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "ClusterID",
            "name": "cluster_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "NetworkID",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OpenstackSubnet",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/OpenstackSubnet"
              }
            }
          },
          "default": {
            "$ref": "#/responses/errorResponse"
          }
        }
      }
    },
    "/api/v1/projects/{project_id}/dc/{dc}/clusters/{cluster_id}/providers/openstack/tenants": {
      "get": {
        "description": "Lists tenants from openstack",
        "produces": [
          "application/json"
        ],
        "tags": [
          "openstack"
        ],
        "operationId": "listOpenstackTenantsNoCredentials",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "DC",
            "name": "dc",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "ClusterID",
            "name": "cluster_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OpenstackTenant",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/OpenstackTenant"
              }
            }
          },
          "default": {
            "$ref": "#/responses/errorResponse"
          }
        }
      }
    },
    "/api/v1/projects/{project_id}/dc/{dc}/clusters/{cluster_id}/providers/vsphere/networks": {
      "get": {
        "description": "Lists networks from vsphere datacenter",
        "produces": [
          "application/json"
        ],
        "tags": [
          "vsphere"
        ],
        "operationId": "listVSphereNetworksNoCredentials",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "DC",
            "name": "dc",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "ClusterID",
            "name": "cluster_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "VSphereNetwork",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/VSphereNetwork"
              }
            }
          },
          "default": {
            "$ref": "#/responses/errorResponse"
          }
        }
      }
    },
    "/api/v1/projects/{project_id}/dc/{dc}/clusters/{cluster_id}/sshkeys": {
      "get": {
        "description": "Lists ssh keys that are assigned to the cluster\nThe returned collection is sorted by creation timestamp.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "project"
        ],
        "operationId": "listSSHKeysAssignedToCluster",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "DC",
            "name": "dc",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "ClusterID",
            "name": "cluster_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "SSHKey",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SSHKey"
              }
            }
          },
          "401": {
            "$ref": "#/responses/empty"
          },
          "403": {
            "$ref": "#/responses/empty"
          },
          "default": {
            "$ref": "#/responses/errorResponse"
          }
        }
      }
    },
    "/api/v1/projects/{project_id}/dc/{dc}/clusters/{cluster_id}/sshkeys/{key_id}": {
      "put": {
        "description": "Assigns an existing ssh key to the given cluster",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "project"
        ],
        "operationId": "assignSSHKeyToCluster",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "DC",
            "name": "dc",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "ClusterID",
            "name": "cluster_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "KeyID",
            "name": "key_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/responses/empty"
          },
          "401": {
            "$ref": "#/responses/empty"
          },
          "403": {
            "$ref": "#/responses/empty"
          },
          "default": {
            "$ref": "#/responses/errorResponse"
          }
        }
      },
      "delete": {
        "description": "Unassignes an ssh key from the given cluster",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "project"
        ],
        "operationId": "detachSSHKeyFromCluster",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "DC",
            "name": "dc",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "KeyID",
            "name": "key_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "ClusterID",
            "name": "cluster_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/empty"
          },
          "401": {
            "$ref": "#/responses/empty"
          },
          "403": {
            "$ref": "#/responses/empty"
          },
          "default": {
            "$ref": "#/responses/errorResponse"
          }
        }
      }
    },
    "/api/v1/projects/{project_id}/dc/{dc}/clusters/{cluster_id}/token": {
      "put": {
        "description": "Revokes the current admin token",
        "produces": [
          "application/json"
        ],
        "tags": [
          "project"
        ],
        "operationId": "revokeClusterAdminToken",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "DC",
            "name": "dc",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "ClusterID",
            "name": "cluster_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/empty"
          },
          "401": {
            "$ref": "#/responses/empty"
          },
          "403": {
            "$ref": "#/responses/empty"
          },
          "default": {
            "$ref": "#/responses/errorResponse"
          }
        }
      }
    },
    "/api/v1/projects/{project_id}/dc/{dc}/clusters/{cluster_id}/upgrades": {
      "get": {
        "description": "Gets possible cluster upgrades",
        "produces": [
          "application/json"
        ],
        "tags": [
          "project"
        ],
        "operationId": "getClusterUpgrades",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "DC",
            "name": "dc",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "ClusterID",
            "name": "cluster_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "MasterVersion",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MasterVersion"
              }
            }
          },
          "401": {
            "$ref": "#/responses/empty"
          },
          "403": {
            "$ref": "#/responses/empty"
          },
          "default": {
            "$ref": "#/responses/errorResponse"
          }
        }
      }
    },
    "/api/v1/projects/{project_id}/sshkeys": {
      "get": {
        "description": "The returned collection is sorted by creation timestamp.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "project"
        ],
        "summary": "Lists SSH Keys that belong to the given project.",
        "operationId": "listSSHKeys",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "SSHKey",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SSHKey"
              }
            }
          },
          "401": {
            "$ref": "#/responses/empty"
          },
          "403": {
            "$ref": "#/responses/empty"
          },
          "default": {
            "$ref": "#/responses/errorResponse"
          }
        }
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "project"
        ],
        "summary": "Adds the given SSH key to the specified project.",
        "operationId": "createSSHKey",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "SSHKey",
            "schema": {
              "$ref": "#/definitions/SSHKey"
            }
          },
          "401": {
            "$ref": "#/responses/empty"
          },
          "403": {
            "$ref": "#/responses/empty"
          },
          "default": {
            "$ref": "#/responses/errorResponse"
          }
        }
      }
    },
    "/api/v1/projects/{project_id}/sshkeys/{key_id}": {
      "delete": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "project"
        ],
        "summary": "Removes the given SSH Key from the system.",
        "operationId": "deleteSSHKey",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "SSHKeyID",
            "name": "key_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/empty"
          },
          "401": {
            "$ref": "#/responses/empty"
          },
          "403": {
            "$ref": "#/responses/empty"
          },
          "default": {
            "$ref": "#/responses/errorResponse"
          }
        }
      }
    },
    "/api/v1/projects/{project_id}/users": {
      "get": {
        "description": "Get list of users for the given project",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "users"
        ],
        "operationId": "getUsersForProject",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "User",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/User"
              }
            }
          },
          "401": {
            "$ref": "#/responses/empty"
          },
          "403": {
            "$ref": "#/responses/empty"
          },
          "default": {
            "$ref": "#/responses/errorResponse"
          }
        }
      },
      "post": {
        "description": "Adds the given user to the given project",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "users"
        ],
        "operationId": "addUserToProject",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          },
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "User",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "401": {
            "$ref": "#/responses/empty"
          },
          "403": {
            "$ref": "#/responses/empty"
          },
          "default": {
            "$ref": "#/responses/errorResponse"
          }
        }
      }
    },
    "/api/v1/projects/{project_id}/users/{user_id}": {
      "put": {
        "description": "Changes membership of the given user for the given project",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "users"
        ],
        "operationId": "editUserInProject",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          },
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          {
            "type": "string",
            "x-go-name": "UserID",
            "name": "user_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "User",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "401": {
            "$ref": "#/responses/empty"
          },
          "403": {
            "$ref": "#/responses/empty"
          },
          "default": {
            "$ref": "#/responses/errorResponse"
          }
        }
      },
      "delete": {
        "description": "Removes the given member from the project",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "users"
        ],
        "operationId": "deleteUserFromProject",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "UserID",
            "name": "user_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "User",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "401": {
            "$ref": "#/responses/empty"
          },
          "403": {
            "$ref": "#/responses/empty"
          },
          "default": {
            "$ref": "#/responses/errorResponse"
          }
        }
      }
    },
    "/api/v1/providers/azure/sizes": {
      "get": {
        "description": "Lists available VM sizes in an Azure region",
        "produces": [
          "application/json"
        ],
        "tags": [
          "azure"
        ],
        "operationId": "listAzureSizes",
        "responses": {
          "200": {
            "description": "AzureSizeList",
            "schema": {
              "$ref": "#/definitions/AzureSizeList"
            }
          },
          "default": {
            "$ref": "#/responses/errorResponse"
          }
        }
      }
    },
    "/api/v1/providers/digitalocean/sizes": {
      "get": {
        "description": "Lists sizes from digitalocean",
        "produces": [
          "application/json"
        ],
        "tags": [
          "digitalocean"
        ],
        "operationId": "listDigitaloceanSizes",
        "responses": {
          "200": {
            "description": "DigitaloceanSizeList",
            "schema": {
              "$ref": "#/definitions/DigitaloceanSizeList"
            }
          },
          "default": {
            "$ref": "#/responses/errorResponse"
          }
        }
      }
    },
    "/api/v1/providers/openstack/networks": {
      "get": {
        "description": "Lists networks from openstack",
        "produces": [
          "application/json"
        ],
        "tags": [
          "openstack"
        ],
        "operationId": "listOpenstackNetworks",
        "responses": {
          "200": {
            "description": "OpenstackNetwork",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/OpenstackNetwork"
              }
            }
          },
          "default": {
            "$ref": "#/responses/errorResponse"
          }
        }
      }
    },
    "/api/v1/providers/openstack/securitygroups": {
      "get": {
        "description": "Lists security groups from openstack",
        "produces": [
          "application/json"
        ],
        "tags": [
          "openstack"
        ],
        "operationId": "listOpenstackSecurityGroups",
        "responses": {
          "200": {
            "description": "OpenstackSecurityGroup",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/OpenstackSecurityGroup"
              }
            }
          },
          "default": {
            "$ref": "#/responses/errorResponse"
          }
        }
      }
    },
    "/api/v1/providers/openstack/sizes": {
      "get": {
        "description": "Lists sizes from openstack",
        "produces": [
          "application/json"
        ],
        "tags": [
          "openstack"
        ],
        "operationId": "listOpenstackSizes",
        "responses": {
          "200": {
            "description": "OpenstackSize",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/OpenstackSize"
              }
            }
          },
          "default": {
            "$ref": "#/responses/errorResponse"
          }
        }
      }
    },
    "/api/v1/providers/openstack/subnets": {
      "get": {
        "description": "Lists subnets from openstack",
        "produces": [
          "application/json"
        ],
        "tags": [
          "openstack"
        ],
        "operationId": "listOpenstackSubnets",
        "parameters": [
          {
            "type": "string",
            "name": "Username",
            "in": "query"
          },
          {
            "type": "string",
            "name": "Password",
            "in": "query"
          },
          {
            "type": "string",
            "name": "Domain",
            "in": "query"
          },
          {
            "type": "string",
            "name": "Tenant",
            "in": "query"
          },
          {
            "type": "string",
            "name": "DatacenterName",
            "in": "query"
          },
          {
            "type": "string",
            "name": "NetworkID",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OpenstackSubnet",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/OpenstackSubnet"
              }
            }
          },
          "default": {
            "$ref": "#/responses/errorResponse"
          }
        }
      }
    },
    "/api/v1/providers/openstack/tenants": {
      "get": {
        "description": "Lists tenants from openstack",
        "produces": [
          "application/json"
        ],
        "tags": [
          "openstack"
        ],
        "operationId": "listOpenstackTenants",
        "responses": {
          "200": {
            "description": "OpenstackTenant",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/OpenstackTenant"
              }
            }
          },
          "default": {
            "$ref": "#/responses/errorResponse"
          }
        }
      }
    },
    "/api/v1/providers/vsphere/networks": {
      "get": {
        "description": "Lists networks from vsphere datacenter",
        "produces": [
          "application/json"
        ],
        "tags": [
          "vsphere"
        ],
        "operationId": "listVSphereNetworks",
        "responses": {
          "200": {
            "description": "VSphereNetwork",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/VSphereNetwork"
              }
            }
          },
          "default": {
            "$ref": "#/responses/errorResponse"
          }
        }
      }
    },
    "/api/v1/versions": {
      "get": {
        "description": "Lists all versions which don't result in automatic updates",
        "produces": [
          "application/json"
        ],
        "tags": [
          "versions"
        ],
        "operationId": "getMasterVersions",
        "responses": {
          "200": {
            "description": "MasterVersion",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MasterVersion"
              }
            }
          },
          "default": {
            "$ref": "#/responses/errorResponse"
          }
        }
      }
    },
    "/api/v1alpha/projects/{project_id}/dc/{dc}/clusters/{cluster_id}/metrics": {
      "get": {
        "description": "Gets cluster metrics",
        "produces": [
          "application/json"
        ],
        "tags": [
          "project"
        ],
        "operationId": "getClusterMetrics",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "DC",
            "name": "dc",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "ClusterID",
            "name": "cluster_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ClusterMetric",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ClusterMetric"
              }
            }
          },
          "401": {
            "$ref": "#/responses/empty"
          },
          "403": {
            "$ref": "#/responses/empty"
          },
          "default": {
            "$ref": "#/responses/errorResponse"
          }
        }
      }
    }
  },
  "definitions": {
    "AWSCloudSpec": {
      "type": "object",
      "title": "AWSCloudSpec specifies access data to Amazon Web Services.",
      "properties": {
        "accessKeyId": {
          "type": "string",
          "x-go-name": "AccessKeyID"
        },
        "availabilityZone": {
          "type": "string",
          "x-go-name": "AvailabilityZone"
        },
        "instanceProfileName": {
          "type": "string",
          "x-go-name": "InstanceProfileName"
        },
        "roleName": {
          "type": "string",
          "x-go-name": "RoleName"
        },
        "routeTableId": {
          "type": "string",
          "x-go-name": "RouteTableID"
        },
        "secretAccessKey": {
          "type": "string",
          "x-go-name": "SecretAccessKey"
        },
        "securityGroupID": {
          "type": "string",
          "x-go-name": "SecurityGroupID"
        },
        "subnetId": {
          "type": "string",
          "x-go-name": "SubnetID"
        },
        "vpcId": {
          "type": "string",
          "x-go-name": "VPCID"
        }
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/crd/kubermatic/v1"
    },
    "AWSDatacenterSpec": {
      "type": "object",
      "title": "AWSDatacenterSpec specifies a data center of Amazon Web Services.",
      "properties": {
        "region": {
          "type": "string",
          "x-go-name": "Region"
        }
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/api/v1"
    },
    "AWSNodeSpec": {
      "description": "AWSNodeSpec aws specific node settings",
      "type": "object",
      "required": [
        "instanceType",
        "diskSize",
        "volumeType"
      ],
      "properties": {
        "ami": {
          "description": "ami to use. Will be defaulted to a ami for your selected operating system and region. Only set this when you know what you do.",
          "type": "string",
          "x-go-name": "AMI"
        },
        "diskSize": {
          "description": "size of the volume in gb. Only one volume will be created",
          "type": "integer",
          "format": "int64",
          "x-go-name": "VolumeSize"
        },
        "instanceType": {
          "type": "string",
          "x-go-name": "InstanceType",
          "example": "t2.micro"
        },
        "tags": {
          "description": "additional instance tags",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-go-name": "Tags"
        },
        "volumeType": {
          "type": "string",
          "x-go-name": "VolumeType",
          "example": "gp2, io1, st1, sc1, standard"
        }
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/api/v1"
    },
    "AuthInfo": {
      "type": "object",
      "title": "AuthInfo contains information that describes identity information.  This is use to tell the kubernetes cluster who you are.",
      "properties": {
        "as": {
          "description": "Impersonate is the username to imperonate.  The name matches the flag.\n+optional",
          "type": "string",
          "x-go-name": "Impersonate"
        },
        "as-groups": {
          "description": "ImpersonateGroups is the groups to imperonate.\n+optional",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "ImpersonateGroups"
        },
        "as-user-extra": {
          "description": "ImpersonateUserExtra contains additional information for impersonated user.\n+optional",
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "x-go-name": "ImpersonateUserExtra"
        },
        "auth-provider": {
          "$ref": "#/definitions/AuthProviderConfig"
        },
        "client-certificate": {
          "description": "ClientCertificate is the path to a client cert file for TLS.\n+optional",
          "type": "string",
          "x-go-name": "ClientCertificate"
        },
        "client-certificate-data": {
          "description": "ClientCertificateData contains PEM-encoded data from a client cert file for TLS. Overrides ClientCertificate\n+optional",
          "type": "array",
          "items": {
            "type": "integer",
            "format": "uint8"
          },
          "x-go-name": "ClientCertificateData"
        },
        "client-key": {
          "description": "ClientKey is the path to a client key file for TLS.\n+optional",
          "type": "string",
          "x-go-name": "ClientKey"
        },
        "client-key-data": {
          "description": "ClientKeyData contains PEM-encoded data from a client key file for TLS. Overrides ClientKey\n+optional",
          "type": "array",
          "items": {
            "type": "integer",
            "format": "uint8"
          },
          "x-go-name": "ClientKeyData"
        },
        "exec": {
          "$ref": "#/definitions/ExecConfig"
        },
        "extensions": {
          "description": "Extensions holds additional information. This is useful for extenders so that reads and writes don't clobber unknown fields\n+optional",
          "type": "array",
          "items": {
            "$ref": "#/definitions/NamedExtension"
          },
          "x-go-name": "Extensions"
        },
        "password": {
          "description": "Password is the password for basic authentication to the kubernetes cluster.\n+optional",
          "type": "string",
          "x-go-name": "Password"
        },
        "token": {
          "description": "Token is the bearer token for authentication to the kubernetes cluster.\n+optional",
          "type": "string",
          "x-go-name": "Token"
        },
        "tokenFile": {
          "description": "TokenFile is a pointer to a file that contains a bearer token (as described above).  If both Token and TokenFile are present, Token takes precedence.\n+optional",
          "type": "string",
          "x-go-name": "TokenFile"
        },
        "username": {
          "description": "Username is the username for basic authentication to the kubernetes cluster.\n+optional",
          "type": "string",
          "x-go-name": "Username"
        }
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/vendor/k8s.io/client-go/tools/clientcmd/api/v1"
    },
    "AuthProviderConfig": {
      "type": "object",
      "title": "AuthProviderConfig holds the configuration for a specified auth provider.",
      "properties": {
        "config": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-go-name": "Config"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        }
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/vendor/k8s.io/client-go/tools/clientcmd/api/v1"
    },
    "AzureCloudSpec": {
      "type": "object",
      "title": "AzureCloudSpec specifies acceess credentials to Azure cloud.",
      "properties": {
        "availabilitySet": {
          "type": "string",
          "x-go-name": "AvailabilitySet"
        },
        "clientID": {
          "type": "string",
          "x-go-name": "ClientID"
        },
        "clientSecret": {
          "type": "string",
          "x-go-name": "ClientSecret"
        },
        "resourceGroup": {
          "type": "string",
          "x-go-name": "ResourceGroup"
        },
        "routeTable": {
          "type": "string",
          "x-go-name": "RouteTableName"
        },
        "securityGroup": {
          "type": "string",
          "x-go-name": "SecurityGroup"
        },
        "subnet": {
          "type": "string",
          "x-go-name": "SubnetName"
        },
        "subscriptionID": {
          "type": "string",
          "x-go-name": "SubscriptionID"
        },
        "tenantID": {
          "type": "string",
          "x-go-name": "TenantID"
        },
        "vnet": {
          "type": "string",
          "x-go-name": "VNetName"
        }
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/crd/kubermatic/v1"
    },
    "AzureDatacenterSpec": {
      "type": "object",
      "title": "AzureDatacenterSpec specifies a datacenter of Azure.",
      "properties": {
        "location": {
          "type": "string",
          "x-go-name": "Location"
        }
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/api/v1"
    },
    "AzureNodeSpec": {
      "description": "AzureNodeSpec describes settings for an Azure node",
      "type": "object",
      "required": [
        "size"
      ],
      "properties": {
        "assignPublicIP": {
          "description": "should the machine have a publicly accessible IP address",
          "type": "boolean",
          "x-go-name": "AssignPublicIP"
        },
        "size": {
          "description": "VM size",
          "type": "string",
          "x-go-name": "Size"
        },
        "tags": {
          "description": "Additional metadata to set",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-go-name": "Tags"
        }
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/api/v1"
    },
    "AzureSize": {
      "type": "object",
      "title": "AzureSize is the object representing Azure VM sizes.",
      "properties": {
        "maxDataDiskCount": {
          "type": "integer",
          "format": "int32",
          "x-go-name": "MaxDataDiskCount"
        },
        "memoryInMB": {
          "type": "integer",
          "format": "int32",
          "x-go-name": "MemoryInMB"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "numberOfCores": {
          "type": "integer",
          "format": "int32",
          "x-go-name": "NumberOfCores"
        },
        "osDiskSizeInMB": {
          "type": "integer",
          "format": "int32",
          "x-go-name": "OsDiskSizeInMB"
        },
        "resourceDiskSizeInMB": {
          "type": "integer",
          "format": "int32",
          "x-go-name": "ResourceDiskSizeInMB"
        }
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/api/v1"
    },
    "AzureSizeList": {
      "type": "array",
      "title": "AzureSizeList represents an array of Azure VM sizes.",
      "items": {
        "$ref": "#/definitions/AzureSize"
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/api/v1"
    },
    "BringYourOwnCloudSpec": {
      "type": "object",
      "title": "BringYourOwnCloudSpec specifies access data for a bring your own cluster.",
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/crd/kubermatic/v1"
    },
    "BringYourOwnDatacenterSpec": {
      "type": "object",
      "title": "BringYourOwnDatacenterSpec specifies a data center with bring-your-own nodes.",
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/api/v1"
    },
    "CentOSSpec": {
      "description": "CentOSSpec contains CentOS specific settings",
      "type": "object",
      "properties": {
        "distUpgradeOnBoot": {
          "description": "do a dist-upgrade on boot and reboot it required afterwards",
          "type": "boolean",
          "x-go-name": "DistUpgradeOnBoot"
        }
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/api/v1"
    },
    "CloudSpec": {
      "type": "object",
      "title": "CloudSpec mutually stores access data to a cloud provider.",
      "properties": {
        "aws": {
          "$ref": "#/definitions/AWSCloudSpec"
        },
        "azure": {
          "$ref": "#/definitions/AzureCloudSpec"
        },
        "bringyourown": {
          "$ref": "#/definitions/BringYourOwnCloudSpec"
        },
        "dc": {
          "description": "DatacenterName where the users 'cloud' lives in.",
          "type": "string",
          "x-go-name": "DatacenterName"
        },
        "digitalocean": {
          "$ref": "#/definitions/DigitaloceanCloudSpec"
        },
        "fake": {
          "$ref": "#/definitions/FakeCloudSpec"
        },
        "hetzner": {
          "$ref": "#/definitions/HetznerCloudSpec"
        },
        "openstack": {
          "$ref": "#/definitions/OpenstackCloudSpec"
        },
        "vsphere": {
          "$ref": "#/definitions/VSphereCloudSpec"
        }
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/crd/kubermatic/v1"
    },
    "Cluster": {
      "description": "Note:\nCluster has a custom MarshalJSON method defined\nand thus the output may vary",
      "type": "object",
      "title": "Cluster defines the cluster resource",
      "properties": {
        "creationTimestamp": {
          "description": "CreationTimestamp is a timestamp representing the server time when this object was created.",
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreationTimestamp"
        },
        "deletionTimestamp": {
          "description": "DeletionTimestamp is a timestamp representing the server time when this object was deleted.",
          "type": "string",
          "format": "date-time",
          "x-go-name": "DeletionTimestamp"
        },
        "id": {
          "description": "ID unique value that identifies the resource generated by the server",
          "type": "string",
          "x-go-name": "ID"
        },
        "name": {
          "description": "Name represents human readable name for the resource",
          "type": "string",
          "x-go-name": "Name"
        },
        "spec": {
          "$ref": "#/definitions/ClusterSpec"
        },
        "status": {
          "$ref": "#/definitions/ClusterStatus"
        }
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/api/v1"
    },
    "ClusterHealth": {
      "type": "object",
      "title": "ClusterHealth stores health information about the cluster's components.",
      "properties": {
        "apiserver": {
          "type": "boolean",
          "x-go-name": "Apiserver"
        },
        "controller": {
          "type": "boolean",
          "x-go-name": "Controller"
        },
        "etcd": {
          "type": "boolean",
          "x-go-name": "Etcd"
        },
        "machineController": {
          "type": "boolean",
          "x-go-name": "MachineController"
        },
        "scheduler": {
          "type": "boolean",
          "x-go-name": "Scheduler"
        }
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/api/v1"
    },
    "ClusterList": {
      "description": "ClusterList represents a list of clusters",
      "type": "array",
      "items": {
        "$ref": "#/definitions/Cluster"
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/api/v1"
    },
    "ClusterMetric": {
      "description": "ClusterMetric defines a metric for the given cluster",
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "values": {
          "type": "array",
          "items": {
            "type": "number",
            "format": "double"
          },
          "x-go-name": "Values"
        }
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/api/v1"
    },
    "ClusterSpec": {
      "description": "ClusterSpec defines the cluster specification",
      "type": "object",
      "properties": {
        "cloud": {
          "$ref": "#/definitions/CloudSpec"
        },
        "machineNetworks": {
          "description": "MachineNetworks optionally specifies the parameters for IPAM.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/MachineNetworkingConfig"
          },
          "x-go-name": "MachineNetworks"
        },
        "version": {
          "$ref": "#/definitions/Semver"
        }
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/api/v1"
    },
    "ClusterStatus": {
      "description": "ClusterStatus defines the cluster status",
      "type": "object",
      "properties": {
        "url": {
          "description": "URL specifies the address at which the cluster is available",
          "type": "string",
          "x-go-name": "URL"
        },
        "version": {
          "$ref": "#/definitions/Semver"
        }
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/api/v1"
    },
    "ContainerLinuxSpec": {
      "description": "ContainerLinuxSpec ubuntu linux specific settings",
      "type": "object",
      "properties": {
        "disableAutoUpdate": {
          "description": "disable container linux auto-update feature",
          "type": "boolean",
          "x-go-name": "DisableAutoUpdate"
        }
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/api/v1"
    },
    "Context": {
      "description": "Context is a tuple of references to a cluster (how do I communicate with a kubernetes cluster), a user (how do I identify myself), and a namespace (what subset of resources do I want to work with)",
      "type": "object",
      "properties": {
        "cluster": {
          "description": "Cluster is the name of the cluster for this context",
          "type": "string",
          "x-go-name": "Cluster"
        },
        "extensions": {
          "description": "Extensions holds additional information. This is useful for extenders so that reads and writes don't clobber unknown fields\n+optional",
          "type": "array",
          "items": {
            "$ref": "#/definitions/NamedExtension"
          },
          "x-go-name": "Extensions"
        },
        "namespace": {
          "description": "Namespace is the default namespace to use on unspecified requests\n+optional",
          "type": "string",
          "x-go-name": "Namespace"
        },
        "user": {
          "description": "AuthInfo is the name of the authInfo for this context",
          "type": "string",
          "x-go-name": "AuthInfo"
        }
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/vendor/k8s.io/client-go/tools/clientcmd/api/v1"
    },
    "Datacenter": {
      "type": "object",
      "title": "Datacenter is the object representing a Kubernetes infra datacenter.",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/LegacyObjectMeta"
        },
        "seed": {
          "type": "boolean",
          "x-go-name": "Seed"
        },
        "spec": {
          "$ref": "#/definitions/DatacenterSpec"
        }
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/api/v1"
    },
    "DatacenterList": {
      "description": "DatacenterList represents a list of datacenters",
      "type": "array",
      "items": {
        "$ref": "#/definitions/Datacenter"
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/api/v1"
    },
    "DatacenterSpec": {
      "type": "object",
      "title": "DatacenterSpec specifies the data for a datacenter.",
      "properties": {
        "aws": {
          "$ref": "#/definitions/AWSDatacenterSpec"
        },
        "azure": {
          "$ref": "#/definitions/AzureDatacenterSpec"
        },
        "bringyourown": {
          "$ref": "#/definitions/BringYourOwnDatacenterSpec"
        },
        "country": {
          "type": "string",
          "x-go-name": "Country"
        },
        "digitalocean": {
          "$ref": "#/definitions/DigitialoceanDatacenterSpec"
        },
        "hetzner": {
          "$ref": "#/definitions/HetznerDatacenterSpec"
        },
        "location": {
          "type": "string",
          "x-go-name": "Location"
        },
        "openstack": {
          "$ref": "#/definitions/OpenstackDatacenterSpec"
        },
        "provider": {
          "type": "string",
          "x-go-name": "Provider"
        },
        "seed": {
          "type": "string",
          "x-go-name": "Seed"
        },
        "vsphere": {
          "$ref": "#/definitions/VSphereDatacenterSpec"
        }
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/api/v1"
    },
    "DigitaloceanCloudSpec": {
      "type": "object",
      "title": "DigitaloceanCloudSpec specifies access data to DigitalOcean.",
      "properties": {
        "token": {
          "type": "string",
          "x-go-name": "Token"
        }
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/crd/kubermatic/v1"
    },
    "DigitaloceanNodeSpec": {
      "description": "DigitaloceanNodeSpec digitalocean node settings",
      "type": "object",
      "required": [
        "size"
      ],
      "properties": {
        "backups": {
          "description": "enable backups for the droplet",
          "type": "boolean",
          "x-go-name": "Backups"
        },
        "ipv6": {
          "description": "enable ipv6 for the droplet",
          "type": "boolean",
          "x-go-name": "IPv6"
        },
        "monitoring": {
          "description": "enable monitoring for the droplet",
          "type": "boolean",
          "x-go-name": "Monitoring"
        },
        "size": {
          "description": "droplet size slug",
          "type": "string",
          "x-go-name": "Size"
        },
        "tags": {
          "description": "additional droplet tags",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Tags"
        }
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/api/v1"
    },
    "DigitaloceanSize": {
      "type": "object",
      "title": "DigitaloceanSize is the object representing digitalocean sizes.",
      "properties": {
        "available": {
          "type": "boolean",
          "x-go-name": "Available"
        },
        "disk": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Disk"
        },
        "memory": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Memory"
        },
        "price_hourly": {
          "type": "number",
          "format": "double",
          "x-go-name": "PriceHourly"
        },
        "price_monthly": {
          "type": "number",
          "format": "double",
          "x-go-name": "PriceMonthly"
        },
        "regions": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Regions"
        },
        "slug": {
          "type": "string",
          "x-go-name": "Slug"
        },
        "transfer": {
          "type": "number",
          "format": "double",
          "x-go-name": "Transfer"
        },
        "vcpus": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "VCPUs"
        }
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/api/v1"
    },
    "DigitaloceanSizeList": {
      "type": "object",
      "title": "DigitaloceanSizeList represents a object of digitalocean sizes.",
      "properties": {
        "optimized": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DigitaloceanSize"
          },
          "x-go-name": "Optimized"
        },
        "standard": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DigitaloceanSize"
          },
          "x-go-name": "Standard"
        }
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/api/v1"
    },
    "DigitialoceanDatacenterSpec": {
      "type": "object",
      "title": "DigitialoceanDatacenterSpec specifies a datacenter of DigitalOcean.",
      "properties": {
        "region": {
          "type": "string",
          "x-go-name": "Region"
        }
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/api/v1"
    },
    "ErrorDetails": {
      "description": "ErrorDetails contains details about the error",
      "type": "object",
      "required": [
        "code",
        "message"
      ],
      "properties": {
        "code": {
          "description": "The error code",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Code"
        },
        "details": {
          "description": "Additional error message",
          "type": "string",
          "x-go-name": "Additional"
        },
        "message": {
          "description": "The error message",
          "type": "string",
          "x-go-name": "Message"
        }
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/handler"
    },
    "Event": {
      "type": "object",
      "title": "Event is a report of an event somewhere in the cluster.",
      "properties": {
        "message": {
          "description": "A human-readable description of the status of this operation.",
          "type": "string",
          "x-go-name": "Message"
        },
        "type": {
          "description": "Type of this event (normal, warning), new types could be added in the future",
          "type": "string",
          "x-go-name": "Type"
        }
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/api/v1"
    },
    "EventList": {
      "type": "object",
      "title": "EventList is an events response structure.",
      "properties": {
        "events": {
          "description": "List of events",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Event"
          },
          "x-go-name": "Events"
        },
        "name": {
          "description": "The object name that those events are about.",
          "type": "string",
          "x-go-name": "Name"
        }
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/api/v1"
    },
    "ExecConfig": {
      "description": "See the client.authentiction.k8s.io API group for specifications of the exact input\nand output format",
      "type": "object",
      "title": "ExecConfig specifies a command to provide client credentials. The command is exec'd\nand outputs structured stdout holding credentials.",
      "properties": {
        "apiVersion": {
          "description": "Preferred input version of the ExecInfo. The returned ExecCredentials MUST use\nthe same encoding version as the input.",
          "type": "string",
          "x-go-name": "APIVersion"
        },
        "args": {
          "description": "Arguments to pass to the command when executing it.\n+optional",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Args"
        },
        "command": {
          "description": "Command to execute.",
          "type": "string",
          "x-go-name": "Command"
        },
        "env": {
          "description": "Env defines additional environment variables to expose to the process. These\nare unioned with the host's environment, as well as variables client-go uses\nto pass argument to the plugin.\n+optional",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExecEnvVar"
          },
          "x-go-name": "Env"
        }
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/vendor/k8s.io/client-go/tools/clientcmd/api/v1"
    },
    "ExecEnvVar": {
      "description": "ExecEnvVar is used for setting environment variables when executing an exec-based\ncredential plugin.",
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "value": {
          "type": "string",
          "x-go-name": "Value"
        }
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/vendor/k8s.io/client-go/tools/clientcmd/api/v1"
    },
    "FakeCloudSpec": {
      "type": "object",
      "title": "FakeCloudSpec specifies access data for a fake cloud.",
      "properties": {
        "token": {
          "type": "string",
          "x-go-name": "Token"
        }
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/crd/kubermatic/v1"
    },
    "HetznerCloudSpec": {
      "type": "object",
      "title": "HetznerCloudSpec specifies access data to hetzner cloud.",
      "properties": {
        "token": {
          "type": "string",
          "x-go-name": "Token"
        }
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/crd/kubermatic/v1"
    },
    "HetznerDatacenterSpec": {
      "type": "object",
      "title": "HetznerDatacenterSpec specifies a datacenter of Hetzner.",
      "properties": {
        "datacenter": {
          "type": "string",
          "x-go-name": "Datacenter"
        },
        "location": {
          "type": "string",
          "x-go-name": "Location"
        }
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/api/v1"
    },
    "HetznerNodeSpec": {
      "description": "HetznerNodeSpec Hetzner node settings",
      "type": "object",
      "required": [
        "type"
      ],
      "properties": {
        "type": {
          "description": "server type",
          "type": "string",
          "x-go-name": "Type"
        }
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/api/v1"
    },
    "ImageList": {
      "description": "ImageList defines a map of operating system and the image to use",
      "type": "object",
      "additionalProperties": {
        "type": "string"
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/api/v1"
    },
    "Kubeconfig": {
      "description": "Kubeconfig is a clusters kubeconfig",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "Legacy field from pkg/api/types.go TypeMeta.\nTODO(jlowdermilk): remove this after eliminating downstream dependencies.\n+optional",
          "type": "string",
          "x-go-name": "APIVersion"
        },
        "clusters": {
          "description": "Clusters is a map of referencable names to cluster configs",
          "type": "array",
          "items": {
            "$ref": "#/definitions/NamedCluster"
          },
          "x-go-name": "Clusters"
        },
        "contexts": {
          "description": "Contexts is a map of referencable names to context configs",
          "type": "array",
          "items": {
            "$ref": "#/definitions/NamedContext"
          },
          "x-go-name": "Contexts"
        },
        "current-context": {
          "description": "CurrentContext is the name of the context that you would like to use by default",
          "type": "string",
          "x-go-name": "CurrentContext"
        },
        "extensions": {
          "description": "Extensions holds additional information. This is useful for extenders so that reads and writes don't clobber unknown fields\n+optional",
          "type": "array",
          "items": {
            "$ref": "#/definitions/NamedExtension"
          },
          "x-go-name": "Extensions"
        },
        "kind": {
          "description": "Legacy field from pkg/api/types.go TypeMeta.\nTODO(jlowdermilk): remove this after eliminating downstream dependencies.\n+optional",
          "type": "string",
          "x-go-name": "Kind"
        },
        "preferences": {
          "$ref": "#/definitions/Preferences"
        },
        "users": {
          "description": "AuthInfos is a map of referencable names to user configs",
          "type": "array",
          "items": {
            "$ref": "#/definitions/NamedAuthInfo"
          },
          "x-go-name": "AuthInfos"
        }
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/api/v1"
    },
    "LegacyObjectMeta": {
      "description": "Deprecated: LegacyObjectMeta is deprecated use ObjectMeta instead.",
      "type": "object",
      "title": "LegacyObjectMeta is an object storing common metadata for persistable objects.",
      "properties": {
        "annotations": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-go-name": "Annotations"
        },
        "labels": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-go-name": "Labels"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "resourceVersion": {
          "type": "string",
          "x-go-name": "ResourceVersion"
        },
        "uid": {
          "type": "string",
          "x-go-name": "UID"
        }
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/api/v1"
    },
    "MachineDeploymentStatus": {
      "description": "[MachineDeploymentStatus]\nMachineDeploymentStatus defines the observed state of MachineDeployment",
      "type": "object",
      "properties": {
        "availableReplicas": {
          "description": "Total number of available machines (ready for at least minReadySeconds)\ntargeted by this deployment.\n+optional",
          "type": "integer",
          "format": "int32",
          "x-go-name": "AvailableReplicas"
        },
        "observedGeneration": {
          "description": "The generation observed by the deployment controller.\n+optional",
          "type": "integer",
          "format": "int64",
          "x-go-name": "ObservedGeneration"
        },
        "readyReplicas": {
          "description": "Total number of ready machines targeted by this deployment.\n+optional",
          "type": "integer",
          "format": "int32",
          "x-go-name": "ReadyReplicas"
        },
        "replicas": {
          "description": "Total number of non-terminated machines targeted by this deployment\n(their labels match the selector).\n+optional",
          "type": "integer",
          "format": "int32",
          "x-go-name": "Replicas"
        },
        "unavailableReplicas": {
          "description": "Total number of unavailable machines targeted by this deployment.\nThis is the total number of machines that are still required for\nthe deployment to have 100% available capacity. They may either\nbe machines that are running but not yet available or machines\nthat still have not been created.\n+optional",
          "type": "integer",
          "format": "int32",
          "x-go-name": "UnavailableReplicas"
        },
        "updatedReplicas": {
          "description": "Total number of non-terminated machines targeted by this deployment\nthat have the desired template spec.\n+optional",
          "type": "integer",
          "format": "int32",
          "x-go-name": "UpdatedReplicas"
        }
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/vendor/sigs.k8s.io/cluster-api/pkg/apis/cluster/v1alpha1"
    },
    "MachineNetworkingConfig": {
      "type": "object",
      "title": "MachineNetworkingConfig specifies the networking parameters used for IPAM.",
      "properties": {
        "cidr": {
          "type": "string",
          "x-go-name": "CIDR"
        },
        "dnsServers": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "DNSServers"
        },
        "gateway": {
          "type": "string",
          "x-go-name": "Gateway"
        }
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/crd/kubermatic/v1"
    },
    "MasterVersion": {
      "description": "MasterVersion describes a version of the master components",
      "type": "object",
      "properties": {
        "default": {
          "type": "boolean",
          "x-go-name": "Default"
        },
        "version": {
          "$ref": "#/definitions/Version"
        }
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/api/v1"
    },
    "NamedAuthInfo": {
      "description": "NamedAuthInfo relates nicknames to auth information",
      "type": "object",
      "properties": {
        "name": {
          "description": "Name is the nickname for this AuthInfo",
          "type": "string",
          "x-go-name": "Name"
        },
        "user": {
          "$ref": "#/definitions/AuthInfo"
        }
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/vendor/k8s.io/client-go/tools/clientcmd/api/v1"
    },
    "NamedCluster": {
      "description": "NamedCluster relates nicknames to cluster information",
      "type": "object",
      "properties": {
        "cluster": {
          "$ref": "#/definitions/Cluster"
        },
        "name": {
          "description": "Name is the nickname for this Cluster",
          "type": "string",
          "x-go-name": "Name"
        }
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/vendor/k8s.io/client-go/tools/clientcmd/api/v1"
    },
    "NamedContext": {
      "description": "NamedContext relates nicknames to context information",
      "type": "object",
      "properties": {
        "context": {
          "$ref": "#/definitions/Context"
        },
        "name": {
          "description": "Name is the nickname for this Context",
          "type": "string",
          "x-go-name": "Name"
        }
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/vendor/k8s.io/client-go/tools/clientcmd/api/v1"
    },
    "NamedExtension": {
      "description": "NamedExtension relates nicknames to extension information",
      "type": "object",
      "properties": {
        "extension": {
          "$ref": "#/definitions/RawExtension"
        },
        "name": {
          "description": "Name is the nickname for this Extension",
          "type": "string",
          "x-go-name": "Name"
        }
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/vendor/k8s.io/client-go/tools/clientcmd/api/v1"
    },
    "Node": {
      "description": "Node represents a worker node that is part of a cluster",
      "type": "object",
      "properties": {
        "creationTimestamp": {
          "description": "CreationTimestamp is a timestamp representing the server time when this object was created.",
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreationTimestamp"
        },
        "deletionTimestamp": {
          "description": "DeletionTimestamp is a timestamp representing the server time when this object was deleted.",
          "type": "string",
          "format": "date-time",
          "x-go-name": "DeletionTimestamp"
        },
        "id": {
          "description": "ID unique value that identifies the resource generated by the server",
          "type": "string",
          "x-go-name": "ID"
        },
        "name": {
          "description": "Name represents human readable name for the resource",
          "type": "string",
          "x-go-name": "Name"
        },
        "spec": {
          "$ref": "#/definitions/NodeSpec"
        },
        "status": {
          "$ref": "#/definitions/NodeStatus"
        }
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/api/v1"
    },
    "NodeAddress": {
      "type": "object",
      "title": "NodeAddress contains information for the node's address.",
      "properties": {
        "address": {
          "type": "string",
          "x-go-name": "Address",
          "example": "192.168.1.1, node1.my.dns"
        },
        "type": {
          "type": "string",
          "x-go-name": "Type",
          "example": "ExternalIP, InternalIP, InternalDNS, ExternalDNS"
        }
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/api/v1"
    },
    "NodeCloudSpec": {
      "type": "object",
      "title": "NodeCloudSpec represents the collection of cloud provider specific settings. Only one must be set at a time.",
      "properties": {
        "aws": {
          "$ref": "#/definitions/AWSNodeSpec"
        },
        "azure": {
          "$ref": "#/definitions/AzureNodeSpec"
        },
        "digitalocean": {
          "$ref": "#/definitions/DigitaloceanNodeSpec"
        },
        "hetzner": {
          "$ref": "#/definitions/HetznerNodeSpec"
        },
        "openstack": {
          "$ref": "#/definitions/OpenstackNodeSpec"
        },
        "vsphere": {
          "$ref": "#/definitions/VSphereNodeSpec"
        }
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/api/v1"
    },
    "NodeDeployment": {
      "description": "NodeDeployment represents a set of worker nodes that is part of a cluster",
      "type": "object",
      "properties": {
        "creationTimestamp": {
          "description": "CreationTimestamp is a timestamp representing the server time when this object was created.",
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreationTimestamp"
        },
        "deletionTimestamp": {
          "description": "DeletionTimestamp is a timestamp representing the server time when this object was deleted.",
          "type": "string",
          "format": "date-time",
          "x-go-name": "DeletionTimestamp"
        },
        "id": {
          "description": "ID unique value that identifies the resource generated by the server",
          "type": "string",
          "x-go-name": "ID"
        },
        "name": {
          "description": "Name represents human readable name for the resource",
          "type": "string",
          "x-go-name": "Name"
        },
        "spec": {
          "$ref": "#/definitions/NodeDeploymentSpec"
        },
        "status": {
          "$ref": "#/definitions/MachineDeploymentStatus"
        }
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/api/v1"
    },
    "NodeDeploymentSpec": {
      "description": "NodeDeploymentSpec node deployment specification",
      "type": "object",
      "required": [
        "replicas",
        "template"
      ],
      "properties": {
        "paused": {
          "type": "boolean",
          "x-go-name": "Paused"
        },
        "replicas": {
          "type": "integer",
          "format": "int32",
          "x-go-name": "Replicas"
        },
        "template": {
          "$ref": "#/definitions/NodeSpec"
        }
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/api/v1"
    },
    "NodeResources": {
      "description": "NodeResources cpu and memory of a node",
      "type": "object",
      "properties": {
        "cpu": {
          "type": "string",
          "x-go-name": "CPU"
        },
        "memory": {
          "type": "string",
          "x-go-name": "Memory"
        }
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/api/v1"
    },
    "NodeSpec": {
      "description": "NodeSpec node specification",
      "type": "object",
      "required": [
        "cloud",
        "operatingSystem",
        "versions"
      ],
      "properties": {
        "cloud": {
          "$ref": "#/definitions/NodeCloudSpec"
        },
        "operatingSystem": {
          "$ref": "#/definitions/OperatingSystemSpec"
        },
        "versions": {
          "$ref": "#/definitions/NodeVersionInfo"
        }
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/api/v1"
    },
    "NodeStatus": {
      "type": "object",
      "title": "NodeStatus is information about the current status of a node.",
      "properties": {
        "addresses": {
          "description": "different addresses of a node",
          "type": "array",
          "items": {
            "$ref": "#/definitions/NodeAddress"
          },
          "x-go-name": "Addresses"
        },
        "allocatable": {
          "$ref": "#/definitions/NodeResources"
        },
        "capacity": {
          "$ref": "#/definitions/NodeResources"
        },
        "errorMessage": {
          "description": "in case of a error this will contain a detailed error explanation",
          "type": "string",
          "x-go-name": "ErrorMessage"
        },
        "errorReason": {
          "description": "in case of a error this will contain a short error message",
          "type": "string",
          "x-go-name": "ErrorReason"
        },
        "machineName": {
          "description": "name of the actual Machine object",
          "type": "string",
          "x-go-name": "MachineName"
        },
        "nodeInfo": {
          "$ref": "#/definitions/NodeSystemInfo"
        }
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/api/v1"
    },
    "NodeSystemInfo": {
      "type": "object",
      "title": "NodeSystemInfo is a set of versions/ids/uuids to uniquely identify the node.",
      "properties": {
        "architecture": {
          "type": "string",
          "x-go-name": "Architecture"
        },
        "containerRuntime": {
          "type": "string",
          "x-go-name": "ContainerRuntime"
        },
        "containerRuntimeVersion": {
          "type": "string",
          "x-go-name": "ContainerRuntimeVersion"
        },
        "kernelVersion": {
          "type": "string",
          "x-go-name": "KernelVersion"
        },
        "kubeletVersion": {
          "type": "string",
          "x-go-name": "KubeletVersion"
        },
        "operatingSystem": {
          "type": "string",
          "x-go-name": "OperatingSystem"
        }
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/api/v1"
    },
    "NodeVersionInfo": {
      "description": "NodeVersionInfo node version information",
      "type": "object",
      "properties": {
        "kubelet": {
          "type": "string",
          "x-go-name": "Kubelet"
        }
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/api/v1"
    },
    "ObjectMeta": {
      "description": "ObjectMeta defines the set of fields that objects returned from the API have",
      "type": "object",
      "properties": {
        "creationTimestamp": {
          "description": "CreationTimestamp is a timestamp representing the server time when this object was created.",
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreationTimestamp"
        },
        "deletionTimestamp": {
          "description": "DeletionTimestamp is a timestamp representing the server time when this object was deleted.",
          "type": "string",
          "format": "date-time",
          "x-go-name": "DeletionTimestamp"
        },
        "id": {
          "description": "ID unique value that identifies the resource generated by the server",
          "type": "string",
          "x-go-name": "ID"
        },
        "name": {
          "description": "Name represents human readable name for the resource",
          "type": "string",
          "x-go-name": "Name"
        }
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/api/v1"
    },
    "OpenstackCloudSpec": {
      "type": "object",
      "title": "OpenstackCloudSpec specifies access data to an openstack cloud.",
      "properties": {
        "domain": {
          "type": "string",
          "x-go-name": "Domain"
        },
        "floatingIpPool": {
          "description": "FloatingIPPool holds the name of the public network\nThe public network is reachable from the outside world\nand should provide the pool of IP addresses to choose from.\n\nWhen specified, all worker nodes will receive a public ip from this floating ip pool\n\nNote that the network is external if the \"External\" field is set to true",
          "type": "string",
          "x-go-name": "FloatingIPPool"
        },
        "network": {
          "description": "Network holds the name of the internal network\nWhen specified, all worker nodes will be attached to this network. If not specified, a network, subnet \u0026 router will be created\n\nNote that the network is internal if the \"External\" field is set to false",
          "type": "string",
          "x-go-name": "Network"
        },
        "password": {
          "type": "string",
          "x-go-name": "Password"
        },
        "routerID": {
          "type": "string",
          "x-go-name": "RouterID"
        },
        "securityGroups": {
          "type": "string",
          "x-go-name": "SecurityGroups"
        },
        "subnetID": {
          "type": "string",
          "x-go-name": "SubnetID"
        },
        "tenant": {
          "type": "string",
          "x-go-name": "Tenant"
        },
        "username": {
          "type": "string",
          "x-go-name": "Username"
        }
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/crd/kubermatic/v1"
    },
    "OpenstackDatacenterSpec": {
      "type": "object",
      "title": "OpenstackDatacenterSpec specifies a generic bare metal datacenter.",
      "properties": {
        "auth_url": {
          "type": "string",
          "x-go-name": "AuthURL"
        },
        "availability_zone": {
          "type": "string",
          "x-go-name": "AvailabilityZone"
        },
        "enforce_floating_ip": {
          "type": "boolean",
          "x-go-name": "EnforceFloatingIP"
        },
        "images": {
          "$ref": "#/definitions/ImageList"
        },
        "region": {
          "type": "string",
          "x-go-name": "Region"
        }
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/api/v1"
    },
    "OpenstackNetwork": {
      "type": "object",
      "title": "OpenstackNetwork is the object representing a openstack network.",
      "properties": {
        "external": {
          "description": "External set if network is the external network",
          "type": "boolean",
          "x-go-name": "External"
        },
        "id": {
          "description": "Id uniquely identifies the current network",
          "type": "string",
          "x-go-name": "ID"
        },
        "name": {
          "description": "Name is the name of the network",
          "type": "string",
          "x-go-name": "Name"
        }
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/api/v1"
    },
    "OpenstackNodeSpec": {
      "description": "OpenstackNodeSpec openstack node settings",
      "type": "object",
      "required": [
        "flavor",
        "image"
      ],
      "properties": {
        "flavor": {
          "description": "instance flavor",
          "type": "string",
          "x-go-name": "Flavor"
        },
        "image": {
          "description": "image to use",
          "type": "string",
          "x-go-name": "Image"
        },
        "tags": {
          "description": "Additional metadata to set",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-go-name": "Tags"
        },
        "useFloatingIP": {
          "description": "Defines whether floating ip should be used",
          "type": "boolean",
          "x-go-name": "UseFloatingIP"
        }
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/api/v1"
    },
    "OpenstackSecurityGroup": {
      "type": "object",
      "title": "OpenstackSecurityGroup is the object representing a openstack security group.",
      "properties": {
        "id": {
          "description": "Id uniquely identifies the current security group",
          "type": "string",
          "x-go-name": "ID"
        },
        "name": {
          "description": "Name is the name of the security group",
          "type": "string",
          "x-go-name": "Name"
        }
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/api/v1"
    },
    "OpenstackSize": {
      "type": "object",
      "title": "OpenstackSize is the object representing openstack's sizes.",
      "properties": {
        "disk": {
          "description": "Disk is the amount of root disk, measured in GB",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Disk"
        },
        "isPublic": {
          "description": "IsPublic indicates whether the size is public (available to all projects) or scoped to a set of projects",
          "type": "boolean",
          "x-go-name": "IsPublic"
        },
        "memory": {
          "description": "Memory is the amount of memory, measured in MB",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Memory"
        },
        "region": {
          "description": "Region specifies the geographic region in which the size resides",
          "type": "string",
          "x-go-name": "Region"
        },
        "slug": {
          "description": "Slug holds  the name of the size",
          "type": "string",
          "x-go-name": "Slug"
        },
        "swap": {
          "description": "Swap is the amount of swap space, measured in MB",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Swap"
        },
        "vcpus": {
          "description": "VCPUs indicates how many (virtual) CPUs are available for this flavor",
          "type": "integer",
          "format": "int64",
          "x-go-name": "VCPUs"
        }
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/api/v1"
    },
    "OpenstackSubnet": {
      "type": "object",
      "title": "OpenstackSubnet is the object representing a openstack subnet.",
      "properties": {
        "id": {
          "description": "Id uniquely identifies the subnet",
          "type": "string",
          "x-go-name": "ID"
        },
        "name": {
          "description": "Name is human-readable name for the subnet",
          "type": "string",
          "x-go-name": "Name"
        }
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/api/v1"
    },
    "OpenstackTenant": {
      "type": "object",
      "title": "OpenstackTenant is the object representing a openstack tenant.",
      "properties": {
        "id": {
          "description": "Id uniquely identifies the current tenant",
          "type": "string",
          "x-go-name": "ID"
        },
        "name": {
          "description": "Name is the name of the tenant",
          "type": "string",
          "x-go-name": "Name"
        }
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/api/v1"
    },
    "OperatingSystemSpec": {
      "type": "object",
      "title": "OperatingSystemSpec represents the collection of os specific settings. Only one must be set at a time.",
      "properties": {
        "centos": {
          "$ref": "#/definitions/CentOSSpec"
        },
        "containerLinux": {
          "$ref": "#/definitions/ContainerLinuxSpec"
        },
        "ubuntu": {
          "$ref": "#/definitions/UbuntuSpec"
        }
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/api/v1"
    },
    "Preferences": {
      "type": "object",
      "properties": {
        "colors": {
          "description": "+optional",
          "type": "boolean",
          "x-go-name": "Colors"
        },
        "extensions": {
          "description": "Extensions holds additional information. This is useful for extenders so that reads and writes don't clobber unknown fields\n+optional",
          "type": "array",
          "items": {
            "$ref": "#/definitions/NamedExtension"
          },
          "x-go-name": "Extensions"
        }
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/vendor/k8s.io/client-go/tools/clientcmd/api/v1"
    },
    "Project": {
      "description": "Project is a top-level container for a set of resources",
      "type": "object",
      "properties": {
        "creationTimestamp": {
          "description": "CreationTimestamp is a timestamp representing the server time when this object was created.",
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreationTimestamp"
        },
        "deletionTimestamp": {
          "description": "DeletionTimestamp is a timestamp representing the server time when this object was deleted.",
          "type": "string",
          "format": "date-time",
          "x-go-name": "DeletionTimestamp"
        },
        "id": {
          "description": "ID unique value that identifies the resource generated by the server",
          "type": "string",
          "x-go-name": "ID"
        },
        "name": {
          "description": "Name represents human readable name for the resource",
          "type": "string",
          "x-go-name": "Name"
        },
        "status": {
          "type": "string",
          "x-go-name": "Status"
        }
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/api/v1"
    },
    "ProjectGroup": {
      "description": "ProjectGroup is a helper data structure that\nstores the information about a project and a group prefix that a user belongs to",
      "type": "object",
      "properties": {
        "group": {
          "type": "string",
          "x-go-name": "GroupPrefix"
        },
        "id": {
          "type": "string",
          "x-go-name": "ID"
        }
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/api/v1"
    },
    "PublicAWSCloudSpec": {
      "type": "object",
      "title": "PublicAWSCloudSpec is a public counterpart of apiv1.AWSCloudSpec.",
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/api/v1"
    },
    "PublicAzureCloudSpec": {
      "type": "object",
      "title": "PublicAzureCloudSpec is a public counterpart of apiv1.AzureCloudSpec.",
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/api/v1"
    },
    "PublicBringYourOwnCloudSpec": {
      "type": "object",
      "title": "PublicBringYourOwnCloudSpec is a public counterpart of apiv1.BringYourOwnCloudSpec.",
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/api/v1"
    },
    "PublicCloudSpec": {
      "type": "object",
      "title": "PublicCloudSpec is a public counterpart of apiv1.CloudSpec.",
      "properties": {
        "aws": {
          "$ref": "#/definitions/PublicAWSCloudSpec"
        },
        "azure": {
          "$ref": "#/definitions/PublicAzureCloudSpec"
        },
        "bringyourown": {
          "$ref": "#/definitions/PublicBringYourOwnCloudSpec"
        },
        "dc": {
          "type": "string",
          "x-go-name": "DatacenterName"
        },
        "digitalocean": {
          "$ref": "#/definitions/PublicDigitaloceanCloudSpec"
        },
        "fake": {
          "$ref": "#/definitions/PublicFakeCloudSpec"
        },
        "hetzner": {
          "$ref": "#/definitions/PublicHetznerCloudSpec"
        },
        "openstack": {
          "$ref": "#/definitions/PublicOpenstackCloudSpec"
        },
        "vsphere": {
          "$ref": "#/definitions/PublicVSphereCloudSpec"
        }
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/api/v1"
    },
    "PublicDigitaloceanCloudSpec": {
      "type": "object",
      "title": "PublicDigitaloceanCloudSpec is a public counterpart of apiv1.DigitaloceanCloudSpec.",
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/api/v1"
    },
    "PublicFakeCloudSpec": {
      "type": "object",
      "title": "PublicFakeCloudSpec is a public counterpart of apiv1.FakeCloudSpec.",
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/api/v1"
    },
    "PublicHetznerCloudSpec": {
      "type": "object",
      "title": "PublicHetznerCloudSpec is a public counterpart of apiv1.HetznerCloudSpec.",
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/api/v1"
    },
    "PublicOpenstackCloudSpec": {
      "type": "object",
      "title": "PublicOpenstackCloudSpec is a public counterpart of apiv1.OpenstackCloudSpec.",
      "properties": {
        "floatingIpPool": {
          "type": "string",
          "x-go-name": "FloatingIPPool"
        }
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/api/v1"
    },
    "PublicVSphereCloudSpec": {
      "type": "object",
      "title": "PublicVSphereCloudSpec is a public counterpart of apiv1.VSphereCloudSpec.",
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/api/v1"
    },
    "RawExtension": {
      "description": "To use this, make a field which has RawExtension as its type in your external, versioned\nstruct, and Object in your internal struct. You also need to register your\nvarious plugin types.\n\nInternal package:\ntype MyAPIObject struct {\nruntime.TypeMeta `json:\",inline\"`\nMyPlugin runtime.Object `json:\"myPlugin\"`\n}\ntype PluginA struct {\nAOption string `json:\"aOption\"`\n}\n\nExternal package:\ntype MyAPIObject struct {\nruntime.TypeMeta `json:\",inline\"`\nMyPlugin runtime.RawExtension `json:\"myPlugin\"`\n}\ntype PluginA struct {\nAOption string `json:\"aOption\"`\n}\n\nOn the wire, the JSON will look something like this:\n{\n\"kind\":\"MyAPIObject\",\n\"apiVersion\":\"v1\",\n\"myPlugin\": {\n\"kind\":\"PluginA\",\n\"aOption\":\"foo\",\n},\n}\n\nSo what happens? Decode first uses json or yaml to unmarshal the serialized data into\nyour external MyAPIObject. That causes the raw JSON to be stored, but not unpacked.\nThe next step is to copy (using pkg/conversion) into the internal struct. The runtime\npackage's DefaultScheme has conversion functions installed which will unpack the\nJSON stored in RawExtension, turning it into the correct object type, and storing it\nin the Object. (TODO: In the case where the object is of an unknown type, a\nruntime.Unknown object will be created and stored.)\n\n+k8s:deepcopy-gen=true\n+protobuf=true\n+k8s:openapi-gen=true",
      "type": "object",
      "title": "RawExtension is used to hold extensions in external versions.",
      "properties": {
        "Raw": {
          "description": "Raw is the underlying serialization of this object.\n\nTODO: Determine how to detect ContentType and ContentEncoding of 'Raw' data.",
          "type": "array",
          "items": {
            "type": "integer",
            "format": "uint8"
          }
        }
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/vendor/k8s.io/apimachinery/pkg/runtime"
    },
    "SSHKey": {
      "description": "SSHKey represents a ssh key",
      "type": "object",
      "properties": {
        "creationTimestamp": {
          "description": "CreationTimestamp is a timestamp representing the server time when this object was created.",
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreationTimestamp"
        },
        "deletionTimestamp": {
          "description": "DeletionTimestamp is a timestamp representing the server time when this object was deleted.",
          "type": "string",
          "format": "date-time",
          "x-go-name": "DeletionTimestamp"
        },
        "id": {
          "description": "ID unique value that identifies the resource generated by the server",
          "type": "string",
          "x-go-name": "ID"
        },
        "name": {
          "description": "Name represents human readable name for the resource",
          "type": "string",
          "x-go-name": "Name"
        },
        "spec": {
          "$ref": "#/definitions/SSHKeySpec"
        }
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/api/v1"
    },
    "SSHKeySpec": {
      "description": "SSHKeySpec represents the details of a ssh key",
      "type": "object",
      "properties": {
        "fingerprint": {
          "type": "string",
          "x-go-name": "Fingerprint"
        },
        "publicKey": {
          "type": "string",
          "x-go-name": "PublicKey"
        }
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/api/v1"
    },
    "Semver": {
      "description": "Semver is struct that encapsulates semver.Semver struct so we can use it in API\n+k8s:deepcopy-gen=true",
      "type": "object",
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/semver"
    },
    "Time": {
      "description": "Time is a wrapper around time.Time which supports correct\nmarshaling JSON.  Wrappers are provided for many\nof the factory methods that the time package offers.",
      "type": "object",
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/api/v1"
    },
    "UbuntuSpec": {
      "description": "UbuntuSpec ubuntu specific settings",
      "type": "object",
      "properties": {
        "distUpgradeOnBoot": {
          "description": "do a dist-upgrade on boot and reboot it required afterwards",
          "type": "boolean",
          "x-go-name": "DistUpgradeOnBoot"
        }
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/api/v1"
    },
    "User": {
      "description": "User represent an API user",
      "type": "object",
      "properties": {
        "creationTimestamp": {
          "description": "CreationTimestamp is a timestamp representing the server time when this object was created.",
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreationTimestamp"
        },
        "deletionTimestamp": {
          "description": "DeletionTimestamp is a timestamp representing the server time when this object was deleted.",
          "type": "string",
          "format": "date-time",
          "x-go-name": "DeletionTimestamp"
        },
        "email": {
          "description": "Email an email address of the user",
          "type": "string",
          "x-go-name": "Email"
        },
        "id": {
          "description": "ID unique value that identifies the resource generated by the server",
          "type": "string",
          "x-go-name": "ID"
        },
        "name": {
          "description": "Name represents human readable name for the resource",
          "type": "string",
          "x-go-name": "Name"
        },
        "projects": {
          "description": "Projects holds the list of project the user belongs to\nalong with the group names",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProjectGroup"
          },
          "x-go-name": "Projects"
        }
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/api/v1"
    },
    "VSphereCloudSpec": {
      "type": "object",
      "title": "VSphereCloudSpec specifies access data to VSphere cloud.",
      "properties": {
        "infraManagementUser": {
          "$ref": "#/definitions/VSphereCredentials"
        },
        "password": {
          "type": "string",
          "x-go-name": "Password"
        },
        "username": {
          "type": "string",
          "x-go-name": "Username"
        },
        "vmNetName": {
          "type": "string",
          "x-go-name": "VMNetName"
        }
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/crd/kubermatic/v1"
    },
    "VSphereCredentials": {
      "description": "VSphereCredentials credentials represents a credential for accessing vSphere",
      "type": "object",
      "properties": {
        "password": {
          "type": "string",
          "x-go-name": "Password"
        },
        "username": {
          "type": "string",
          "x-go-name": "Username"
        }
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/crd/kubermatic/v1"
    },
    "VSphereDatacenterSpec": {
      "type": "object",
      "title": "VSphereDatacenterSpec specifies a datacenter of VSphere.",
      "properties": {
        "cluster": {
          "type": "string",
          "x-go-name": "Cluster"
        },
        "datacenter": {
          "type": "string",
          "x-go-name": "Datacenter"
        },
        "datastore": {
          "type": "string",
          "x-go-name": "Datastore"
        },
        "endpoint": {
          "type": "string",
          "x-go-name": "Endpoint"
        },
        "templates": {
          "$ref": "#/definitions/ImageList"
        }
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/api/v1"
    },
    "VSphereNetwork": {
      "type": "object",
      "title": "VSphereNetwork is the object representing a vsphere network.",
      "properties": {
        "name": {
          "description": "Name is the name of the network",
          "type": "string",
          "x-go-name": "Name"
        }
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/api/v1"
    },
    "VSphereNodeSpec": {
      "description": "VSphereNodeSpec VSphere node settings",
      "type": "object",
      "properties": {
        "cpus": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "CPUs"
        },
        "memory": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Memory"
        },
        "template": {
          "type": "string",
          "x-go-name": "Template"
        },
        "templateNetName": {
          "type": "string",
          "x-go-name": "TemplateNetName"
        }
      },
      "x-go-package": "github.com/kubermatic/kubermatic/api/pkg/api/v1"
    },
    "Version": {
      "type": "object",
      "title": "Version represents a single semantic version.",
      "x-go-package": "github.com/kubermatic/kubermatic/api/vendor/github.com/Masterminds/semver"
    }
  },
  "responses": {
    "empty": {
      "description": "EmptyResponse is a empty response"
    },
    "errorResponse": {
      "description": "ErrorResponse is the default representation of an error",
      "schema": {
        "$ref": "#/definitions/ErrorDetails"
      }
    }
  }
}