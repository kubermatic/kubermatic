apiVersion: "nodeset.k8s.io/v1alpha1"
kind: NodeClass
metadata:
  name: {{ .Name }}
nodeController: kube-machine
config:
  dockerMachineFlags:
    amazonec2-access-key: "{{ .Cluster.Spec.Cloud.AWS.AccessKeyID }}"
    amazonec2-secret-key: "{{ .Cluster.Spec.Cloud.AWS.SecretAccessKey }}"
    amazonec2-region: "{{ .Datacenter.Spec.AWS.Region }}"
    amazonec2-zone: "{{ .Datacenter.Spec.AWS.ZoneCharacter }}"
    amazonec2-iam-instance-profile: "{{ .Cluster.Spec.Cloud.AWS.InstanceProfileName }}"
    amazonec2-security-group: "{{ .Cluster.Spec.Cloud.AWS.SecurityGroup }}"
    amazonec2-subnet-id: "{{ .Cluster.Spec.Cloud.AWS.SubnetID }}"
    amazonec2-vpc-id: "{{ .Cluster.Spec.Cloud.AWS.VPCID }}"
    amazonec2-open-port: "22,10250"
    amazonec2-ssh-user: "{{ default .NodeSpec.OperatingSystem.SSHUser "core" }}"
    amazonec2-root-size: "{{ .NodeSpec.AWS.RootSize }}"
    amazonec2-volume-type: "{{ default .NodeSpec.AWS.VolumeType "gp2" }}"
    amazonec2-device-name: "/dev/xvda"
    amazonec2-instance-type: "{{ .NodeSpec.AWS.InstanceType }}"
    amazonec2-ami: "{{ default .NodeSpec.AWS.AMI .Datacenter.Spec.AWS.AMI }}"
  provider: "amazonec2"
  provisioning:
    users:
      - name: "apiserver"
        ssh_keys:
          - "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQC496PqMk7zZuQKXpzcgl3g92LNZMcgEgkfnj4BNoa2CRs5f4wrHMt1Ii78CgY3Ziqw4y191v6IJ3Fby2gT26YWIaK6qSF35sXmjyG/MH+Iu96wIn7JcjlnTkizofGE7zOkRmEtMYcyOVbgnwEH4UNj1W1aalton5JCAqz8kFpKE7sp/2NpxZMqgO68NaqYSd0nDXdwM9HX1grWVF88lBXEJ5YSF03sEpnsOyw0QHhXHyNwHOpfL/wCG0/8OWel1dcXOeQKVVp5V045er0AyIFJVwHSTQCnfyKYCf5i0cLci4+61iSS1hBSl2qBqz6z6mdLy8O7XSP9kPoyQarnQguFO+DHOG8IyTP/Kk3PC/+yR8xGfhFxqM8fGdSdrRwpIgjGH0/7or1vbbUvp52evRMZIdT1YfndahRxafo0iZ36o+VgX1W5oWiZ8Bws/zrV2PCqrmuEbFYSpLati3XvxRQG+Om5p7dzdXx1mb86wqyNe4xpZ2gVInaUYINnwcUmLiaOtCHh4tE/RBMqjcRY7i75gl29H8nbDFwWHGLTULix1W+1FH0XyPiL831XdECYSlw8h+kJW/fYtlynTgeYSLSrIA0atEblf1ui0BPnd8imFX7h8mlUhPgxpfxasI+EQj+m4xjeJUalHTvFuE1wqls8A7A6+J8HP/Ol9cOlDFxexw== henrik@loodse.com"
          - "{{ .Cluster.Status.ApiserverSSHKey.PublicKey | apiBytesToString }} apiserver@{{ .Cluster.Address.ExternalName }}"
        sudo: true
    commands:
      - "sudo systemctl start download-kubelet.service"
      - "sudo systemctl start setup-network-environment.service"
      - "sudo systemctl enable kubelet && sudo systemctl start kubelet"
    files:
      - path: "/etc/kubernetes/bootstrap.kubeconfig"
        permissions: "0640"
        owner: "root"
        content: |-
{{ .Kubeconfig | indent 10 }}
      - path: "/etc/systemd/system/download-kubelet.service"
        permissions: "0640"
        owner: "root"
        content: |-
          [Unit]
          Description=Download Kubelet and requirements
          After=network.target

          [Service]
          Type=oneshot
          ExecStartPre=/usr/bin/mkdir -p /opt/bin /opt/cni/bin /etc/cni/net.d /var/run/kubernetes /var/lib/kubelet /etc/kubernetes/manifests /var/log/containers
          ExecStartPre=/bin/bash -c "/usr/bin/curl -L -o /tmp/cni-amd64.tgz https://github.com/containernetworking/cni/releases/download/v0.5.2/cni-amd64-v0.5.2.tgz && tar -xvf /tmp/cni-amd64.tgz -C /opt/cni/bin/"
          ExecStartPre=/usr/bin/curl -L -o /opt/bin/socat https://s3-eu-west-1.amazonaws.com/kubermatic/coreos/socat
          ExecStartPre=/usr/bin/chmod +x /opt/bin/socat
          ExecStart=/usr/bin/curl -L -o /opt/bin/kubelet https://storage.googleapis.com/kubelet/kubelet.v1.6.7
          ExecStartPost=/usr/bin/chmod +x /opt/bin/kubelet
          RemainAfterExit=true

          [Install]
          WantedBy=multi-user.target

      - path: "/etc/systemd/system/setup-network-environment.service"
        permissions: "0640"
        owner: "root"
        content: |-
          [Unit]
          Description=Setup Network Environment
          Documentation=https://github.com/kelseyhightower/setup-network-environment
          Requires=network.target
          After=network.target

          [Service]
          ExecStartPre=-/usr/bin/mkdir -p /opt/bin
          ExecStartPre=/usr/bin/wget -N -P /opt/bin https://github.com/kelseyhightower/setup-network-environment/releases/download/v1.0.0/setup-network-environment

          ExecStartPre=/usr/bin/chmod +x /opt/bin/setup-network-environment
          ExecStart=/opt/bin/setup-network-environment
          RemainAfterExit=yes
          Type=oneshot

      - path: "/etc/systemd/system/kubelet.service"
        permissions: "0640"
        owner: "root"
        content: |-
          [Unit]
          Description=Kubelet
          Requires=network.target download-kubelet.service setup-network-environment.service
          After=network.target download-kubelet.service setup-network-environment.service

          [Service]
          Restart=always
          RestartSec=10
          Environment="PATH=/sbin:/bin:/usr/sbin:/usr/bin:/opt/bin"
          EnvironmentFile=/etc/network-environment
          ExecStart=/opt/bin/kubelet \
            --api-servers={{.Cluster.Address.URL}} \
            --container-runtime=docker \
            --allow-privileged=true \
            --pod-manifest-path=/etc/kubernetes/manifests \
            --cni-conf-dir=/etc/cni/net.d \
            --network-plugin=cni \
            --node-ip=${DEFAULT_IPV4} \
            --cluster-dns=10.10.10.10 \
            --cluster_domain=cluster.local \
            --kubeconfig=/etc/kubernetes/kubeconfig \
            --experimental-bootstrap-kubeconfig=/etc/kubernetes/bootstrap.kubeconfig \
            --cert-dir=/etc/kubernetes/

          [Install]
          WantedBy=multi-user.target
