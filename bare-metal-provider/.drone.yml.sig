eyJhbGciOiJIUzI1NiJ9.d29ya3NwYWNlOgogIGJhc2U6IC9nbwogIHBhdGg6IHNyYy9naXRodWIuY29tL2t1YmVybWF0aWMvYmFyZS1tZXRhbC1wcm92aWRlcgoKcGlwZWxpbmU6CiAgc2Z0cF9jYWNoZV9yZXN0b3JlOgogICAgc2VydmVyOiAxMC41MC4wLjEwOjIyCiAgICBpbWFnZTogcGx1Z2lucy9zZnRwLWNhY2hlCiAgICBwYXRoOiAvaG9tZS9kcm9uZS1zZnRwLWNhY2hlL2NhY2hlCiAgICByZXN0b3JlOiB0cnVlCiAgICBtb3VudDoKICAgICAgLSBnbGlkZS1ob21lCgogIGluc3RhbGxfZGVwZW5kZW5jaWVzOgogICAgaW1hZ2U6IGdvbGFuZzoxLjgKICAgIGNvbW1hbmRzOgogICAgICAtIG1rZGlyIC1wIGdsaWRlLWhvbWUKICAgICAgLSBnbyBnZXQgLXUgZ2l0aHViLmNvbS9NYXN0ZXJtaW5kcy9nbGlkZQogICAgICAtIGdsaWRlIC0taG9tZSBnbGlkZS1ob21lLyBpbnN0YWxsIC0tc3RyaXAtdmVuZG9yCgogIHNmdHBfY2FjaGVfc2F2ZToKICAgIHNlcnZlcjogMTAuNTAuMC4xMDoyMgogICAgaW1hZ2U6IHBsdWdpbnMvc2Z0cC1jYWNoZQogICAgcGF0aDogL2hvbWUvZHJvbmUtc2Z0cC1jYWNoZS9jYWNoZQogICAgcmVidWlsZDogdHJ1ZQogICAgbW91bnQ6CiAgICAgIC0gZ2xpZGUtaG9tZQoKICByZW1vdmVfZ2xpZGU6CiAgICBpbWFnZTogZ29sYW5nOjEuOAogICAgY29tbWFuZHM6CiAgICAgIC0gcm0gLXJmIGdsaWRlLWhvbWUKCiAgYnVpbGQ6CiAgICBpbWFnZTogZ29sYW5nOjEuOAogICAgY29tbWFuZHM6CiAgICAgIC0gQ0dPX0VOQUJMRUQ9MCBHT0JVSUxEPSJnbyBidWlsZCIgbWFrZSBidWlsZAoKICBsaW50OgogICAgaW1hZ2U6IGdvbGFuZzoxLjgKICAgIGNvbW1hbmRzOgogICAgICAtIGdvIGdldCBnaXRodWIuY29tL2FsZWN0aG9tYXMvZ29tZXRhbGludGVyCiAgICAgIC0gZ29tZXRhbGludGVyIC0taW5zdGFsbAogICAgICAtIG1ha2UgY2hlY2sKCiAgdGVzdDoKICAgIGltYWdlOiBnb2xhbmc6MS44CiAgICBjb21tYW5kczoKICAgICAgLSBtYWtlIHRlc3QKCiAgcHVzaF9hbHdheXM6CiAgICBpbWFnZTogcGx1Z2lucy9kb2NrZXIKICAgIHJlcG86IGt1YmVybWF0aWMvYmFyZS1tZXRhbC1wcm92aWRlcgogICAgdGFnczoKICAgICAgLSBkZXYKICAgICAgLSAke0RST05FX0NPTU1JVF9TSEF9CgogIHB1c2hfbGF0ZXN0OgogICAgaW1hZ2U6IHBsdWdpbnMvZG9ja2VyCiAgICByZXBvOiBrdWJlcm1hdGljL2JhcmUtbWV0YWwtcHJvdmlkZXIKICAgIHRhZ3M6IGxhdGVzdAogICAgd2hlbjoKICAgICAgYnJhbmNoOiBtYXN0ZXIKCiAgcHVzaF90YWdnZWRfdmVyc2lvbjoKICAgIGltYWdlOiBwbHVnaW5zL2RvY2tlcgogICAgcmVwbzoga3ViZXJtYXRpYy9iYXJlLW1ldGFsLXByb3ZpZGVyCiAgICB0YWdzOiAke0RST05FX1RBRyMjdn0KICAgIHdoZW46CiAgICAgIGV2ZW50OiB0YWcK.MpMpJ2i44Rbc4MUTGP_vjJ9421LrFXpSUWtFryXiT44