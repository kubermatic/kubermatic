apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  labels:
    k8s-app: "{{.Values.k8sapp}}-{{.Values.version}}"
    kubernetes.io/cluster-service: "true"
    version: {{.Values.version}}
  name: {{.Values.k8sapp}}
  namespace: kube-system
spec:
  replicas: {{.Values.replicas}}
  selector:
    matchLabels:
      k8s-app: {{.Values.k8sapp}}
      version: {{.Values.version}}
  template:
    metadata:
      labels:
        k8s-app: {{.Values.k8sapp}}
        version: {{.Values.version}}
        cagby.io/color: {{.Values.color}}
        kubernetes.io/cluster-service: "true"
    spec:
      containers:
        - name: kubedns
          image: {{.Values.kubedns_image}}
          resources:
            # TODO: Set memory limits when we've profiled the container for large
            # clusters, then set request = limit to keep this container in
            # guaranteed class. Currently, this container falls into the
            # "burstable" category so the kubelet doesn't backoff from restarting it.
            limits:
              cpu: {{.Values.kubedns_cpu_lim}}
              memory: {{.Values.kubedns_mem_lim}}
            requests:
              cpu: {{.Values.kubedns_cpu_req}}
              memory: {{.Values.kubedns_mem_req}}
          livenessProbe:
            httpGet:
              path: /healthz
              port: {{.Values.healthz_port}}
              scheme: HTTP
            initialDelaySeconds: {{.Values.healthz_delay}}
            timeoutSeconds: {{.Values.healthz_timeout}}
            successThreshold: {{.Values.healthz_success_thresh}}
            failureThreshold: {{.Values.healthz_failure_thresh}}
          readinessProbe:
            httpGet:
              path: /readiness
              port: {{.Values.readiness_port}}
              scheme: HTTP
            # we poll on pod startup for the Kubernetes master service and
            # only setup the /readiness HTTP server once that's available.
            initialDelaySeconds: {{.Values.readiness_delay}}
            timeoutSeconds: {{.Values.readiness_timeout}}
          args:
          # command = "/kube-dns"
          - --domain={{.Values.dns_domain}}.
          - --dns-port=10053
          # TODO: pillar['federations_domain_map'] = "- --federations=myfederation=federation.test"
          #    where `myfederation` is the name of the federation
          #    and `federation.test` is the domain name registered for the federation.
          ports:
          - containerPort: 10053
            name: dns-local
            protocol: UDP
          - containerPort: 10053
            name: dns-tcp-local
            protocol: TCP
        - name: dnsmasq
          image: {{.Values.dnsmasq_image}}
          args:
          - --cache-size=1000
          - --no-resolv
          - --server=127.0.0.1#10053
          ports:
          - containerPort: {{.Values.dnsmasq_port}}
            name: dns
            protocol: UDP
          - containerPort: {{.Values.dnsmasq_port}}
            name: dns-tcp
            protocol: TCP
        - name: dnsmasq-metrics
          image: {{.Values.dnsmasq_metrics_images}}
          livenessProbe:
            httpGet:
              path: /metrics
              port: 10054
              scheme: HTTP
            initialDelaySeconds: 60
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 5
          args:
          - --v=2
          - --logtostderr
          ports:
          - containerPort: 10054
            name: metrics
            protocol: TCP
          resources:
            requests:
              memory: {{.Values.dnsmasq_metrics__mem_req}}
        - name: healthz
          image: {{.Values.healthz_image}}
          resources:
            # keep request = limit to keep this container in guaranteed class
            limits:
              cpu: {{.Values.healthz_cpu_lim}}
              memory: {{.Values.healthz_mem_lim}}
            requests:
              cpu: {{.Values.healthz_cpu_req}}
              memory: {{.Values.healthz_mem_req}}
          args:
            - -cmd=nslookup kubernetes.default.svc.{{.Values.dns_domain}} 127.0.0.1 >/dev/null
            - -port={{.Values.healthz_port}}
            - -quiet
          ports:
            - containerPort: {{.Values.healthz_port}}
              protocol: TCP
      dnsPolicy: Default  # Don't use cluster DNS.
