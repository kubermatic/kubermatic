# Copyright 2020 The Kubermatic Kubernetes Platform contributors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: '{{ template "name" . }}'
spec:
  replicas: {{ .Values.prometheus.replicas }}
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: {{ template "name" . }}
  serviceName: '{{ template "name" . }}'
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: {{ template "name" . }} # deprecated
        app.kubernetes.io/name: prometheus
        app.kubernetes.io/instance: {{ template "name" . }}
        {{- if .Values.prometheus.podLabels}}
        {{ toYaml .Values.prometheus.podLabels | nindent 8 }}
        {{- end}}
      annotations:
        prometheus.io/scrape: 'true'
        prometheus.io/port: '9090'
        kubermatic.io/chart: prometheus
        cluster-autoscaler.kubernetes.io/safe-to-evict-local-volumes: backup
        {{- if .Values.prometheus.backup.enabled }}
        backup.velero.io/backup-volumes: backup
        pre.hook.backup.velero.io/container: backup
        pre.hook.backup.velero.io/timeout: '{{ .Values.prometheus.backup.timeout | default "60m" }}'
        pre.hook.backup.velero.io/command: '["/bin/sh", "-c", "rm -rf /prometheus/snapshots/* && curl -s -XPOST \"http://127.0.0.1:9090/api/v1/admin/tsdb/snapshot?skip_head=true\" && rsync --archive /prometheus/snapshots/*/ /backup"]'
        {{- end }}
    spec:
      {{- if .Values.prometheus.imagePullSecrets }}
      imagePullSecrets: {{- toYaml .Values.prometheus.imagePullSecrets | nindent 8 }}
      {{- end }}
      containers:
      - name: prometheus
        image: '{{ .Values.prometheus.image.repository }}:{{ .Values.prometheus.version | default .Values.prometheus.image.tag }}'
        command: [/bin/sh]
        args:
        - -c
        - |
          set -euo pipefail

          echo "Cleaning up block compaction leftovers..."
          find /var/prometheus/data -type d -name '*.tmp' -maxdepth 1 -print -exec rm -r {} \;

          echo "Starting Prometheus..."
          exec /bin/prometheus \
            --config.file=/etc/prometheus/config/prometheus.yaml \
            --storage.tsdb.no-lockfile \
            --storage.tsdb.path=/var/prometheus/data \
            --storage.tsdb.retention.time={{ .Values.prometheus.tsdb.retentionTime | default "24h" }} \
            {{- if .Values.prometheus.tsdb.compressWAL }}
            --storage.tsdb.wal-compression \
            {{- end }}
            --web.enable-lifecycle \
            --web.enable-admin-api \
            --web.external-url=https://{{ .Values.prometheus.host | trim }} \
            {{- range $key, $value := .Values.prometheus.extraArgs }}
            --{{ $key }}={{ $value }} \
            {{- end }}
      {{- if .Values.prometheus.env }}
        env:
{{ toYaml .Values.prometheus.env | indent 10}}
      {{- end }}
        ports:
        - containerPort: 9090
          name: web
        livenessProbe:
          failureThreshold: 6
          httpGet:
            path: /-/healthy
            port: web
          initialDelaySeconds: 15
          periodSeconds: 5
          successThreshold: 1
          timeoutSeconds: 5
        readinessProbe:
          failureThreshold: 120
          httpGet:
            path: /-/ready
            port: web
          initialDelaySeconds: 15
          periodSeconds: 5
          successThreshold: 1
          timeoutSeconds: 5
        resources:
{{ toYaml .Values.prometheus.containers.prometheus.resources | indent 10 }}
        volumeMounts:
        - name: config
          mountPath: /etc/prometheus/config/
          readOnly: false
        - name: rules
          mountPath: /etc/prometheus/rules/
          readOnly: false
        - name: db
          mountPath: /var/prometheus/data
          readOnly: false
          subPath: prometheus-db
        {{- if .Values.prometheus.volumes }}
        {{- range .Values.prometheus.volumes }}
        - name: {{ .name }}
          mountPath: {{ .mountPath }}
          readOnly: true
        {{- end }}
        {{- end }}

      - name: reloader
        image: '{{ .Values.prometheus.configReloaderImage.repository }}:{{ .Values.prometheus.configReloaderImage.tag }}'
        imagePullPolicy: {{ .Values.prometheus.configReloaderImage.pullPolicy }}
        args:
        - --volume-dir=/etc/prometheus/config
        - --volume-dir=/etc/prometheus/rules
        - --webhook-url=http://localhost:9090/-/reload
        resources:
{{ toYaml .Values.prometheus.containers.reloader.resources | indent 10 }}
        volumeMounts:
        - name: config
          mountPath: /etc/prometheus/config/
          readOnly: false
        - name: rules
          mountPath: /etc/prometheus/rules/
          readOnly: false
        {{- if .Values.prometheus.volumes }}
        {{- range .Values.prometheus.volumes }}
        - name: {{ .name }}
          mountPath: {{ .mountPath }}
          readOnly: true
        {{- end }}
        {{- end }}

      {{- if .Values.prometheus.backup.enabled }}
      - name: backup
        image: '{{ .Values.prometheus.backup.image.repository }}:{{ .Values.prometheus.backup.image.tag }}'
        args:
        - /bin/sh
        - -c
        - while true; do sleep 1h; done
        volumeMounts:
        - name: db
          mountPath: /prometheus
          readOnly: false
          subPath: prometheus-db
        - name: backup
          mountPath: /backup
          readOnly: false
        securityContext:
          runAsNonRoot: false
          runAsUser: 0
        resources:
{{ toYaml .Values.prometheus.containers.backup.resources | indent 10 }}
      {{- end }}

  {{- if .Values.prometheus.sidecarContainers }}
    {{- range $name, $spec :=  .Values.prometheus.sidecarContainers }}
      - name: {{ $name }}
      {{- if kindIs "string" $spec }}
        {{- tpl $spec $ | nindent 8 }}
      {{- else }}
        {{- toYaml $spec | nindent 8 }}
      {{- end }}
    {{- end }}
  {{- end }}
      serviceAccountName: '{{ template "name" . }}'
      securityContext:
        fsGroup: 2000
        runAsNonRoot: true
        runAsUser: 1000
      volumes:
      - name: config
        configMap:
          name: '{{ template "name" . }}-config'
      - name: rules
        configMap:
          name: '{{ template "name" . }}-rules'
      {{- if .Values.prometheus.volumes }}
      {{- range .Values.prometheus.volumes }}
      - name: {{ .name }}
        {{- if .configMap }}
        configMap:
          name: {{ .configMap }}
        {{- else }}
        secret:
          secretName: {{ .secretName }}
        {{- end }}
      {{- end }}
      {{- end }}
      {{- if .Values.prometheus.backup.enabled }}
      - name: backup
        emptyDir: {}
      {{- end }}
      nodeSelector:
{{ toYaml .Values.prometheus.nodeSelector | indent 8 }}
      affinity:
{{ (tpl (toYaml .Values.prometheus.affinity) .) | fromYaml | toYaml | indent 8 }}
      tolerations:
{{ toYaml .Values.prometheus.tolerations | indent 8 }}
  volumeClaimTemplates:
  - metadata:
      name: db
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: {{ .Values.prometheus.storageSize }}
      {{- with .Values.prometheus.storageClass }}
      storageClassName: {{ . }}
      {{- end }}

---
{{ if .Capabilities.APIVersions.Has "policy/v1" }}
apiVersion: policy/v1
{{ else }}
apiVersion: policy/v1beta1
{{ end }}
kind: PodDisruptionBudget
metadata:
  name: '{{ template "name" . }}'
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app: '{{ template "name" . }}'
