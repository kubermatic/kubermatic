# Copyright 2020 The Kubermatic Kubernetes Platform contributors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

grafana:
  # Admin login credentials, only relevant if the `disable_login_form` option
  # further down is set to false. Using an identity aware proxy like
  # Keycloak-Gatekeeper (see iap chart) is strongly recommended though.
  user: admin
  password: '' # generate a strong random password

  replicas: 1
  image:
    repository: docker.io/grafana/grafana
    tag: 7.4.3
  utilImage:
    repository: quay.io/kubermatic/util
    tag: 1.4.1
  pluginImage:
    repository: quay.io/kubermatic/grafana-plugins
    tag: 1.3.0
  resources:
    requests:
      cpu: 100m
      memory: 48Mi
    limits:
      cpu: 200m
      memory: 128Mi

  nodeSelector: {}
  affinity:
    podAntiAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
      - podAffinityTerm:
          labelSelector:
            matchLabels:
              app: grafana
          topologyKey: kubernetes.io/hostname
        weight: 100
  tolerations: []

  # Control where the provisioning files are located.
  # If you want to *not* use the predefined ones, this
  # allows you to specify your own directory without
  # having to touch the existing files. If you only want
  # to add new elements, you can just place your YAML files
  # into the directories.
  provisioning:
    dashboards:
      source: provisioning/dashboards/*

      # You can specify additional dashboard sources inline as well.
      #extra:
      #- folder: "Initech Resources"
      #  name: "initech"
      #  options:
      #    path: /grafana-dashboard-definitions/initech
      #  org_id: 1
      #  type: file

    datasources:
      # Kubernetes Service names to configure as data sources.
      # Names can take the form of `service[.namespace=Release.Namespace][:port=9090]`
      # and the service name itself must be unique.
      prometheusServices:
      - prometheus
      # - prometheus-thanos-query:10902

      lokiServices: []
      # - loki

      # read datasources from this path in the Helm chart; this is
      # evaluated during deployment, not during Grafana runtime!
      source: provisioning/datasources/*

      # If you have more datasources from additional volumes,
      # specify their mount paths here to have them copied to
      # /etc/grafana/provisioning/datasources. Files will get
      # a prefix to ensure that identical filenames from
      # multiple paths do not overwrite each other.
      paths:
      - /etc/grafana/provisioning/default-datasources

      # You can specify additional datasources inline as well.
      #extra:
      #- name: influxdb
      #  type: influxdb
      #  access: proxy
      #  org_id: 1
      #  url: http://influxdb.monitoring.svc.cluster.local:9090
      #  version: 1
      #  editable: false

    # override Grafana configuration flags
    configuration:
      # change this to "Editor" to allow OAuth-authenticated users
      # to add and edit the dashboards
      auto_assign_org_role: Viewer

      # Set this to false if you do not have an identity-aware proxy
      # in front of Grafana and would still like to login with the
      # credentials defined above.
      disable_login_form: true

      # Set this to true to allow Viewers to
      # edit existing dashboards and explore datasources.
      # Viewers will still not be able to save these changes back
      # but they will be able to see other metrics than exposed by
      # the dashboards.
      viewers_can_edit: false

  # If you manage your dashboards via your own configmaps,
  # you can add them here to have them automatically be
  # mounted in Grafana. For each volume, specify either a
  # configMap name or a secretName, never both.
  #volumes:
  #- name: initech-public-dashboards
  #  mountPath: /initech/public-dashboards
  #  configMap: initech-dashboards-configmap
  #- name: initech-secret-dashboards
  #  mountPath: /initech/secret-dashboards
  #  secretName: initech-dashboards-secret
