# Copyright 2020 The Kubermatic Kubernetes Platform contributors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

apiVersion: apps/v1
kind: Deployment
metadata:
  name: kube-state-metrics
spec:
  selector:
    matchLabels:
      app: kube-state-metrics
  replicas: 1
  template:
    metadata:
      labels:
        app: kube-state-metrics
        app.kubernetes.io/component: exporter
        app.kubernetes.io/name: kube-state-metrics
        app.kubernetes.io/version: '{{ .Values.kubeStateMetrics.image.tag }}'
      annotations:
        prometheus.io/scrape: 'true'
        prometheus.io/port: '8080'
        kubermatic.io/chart: kube-state-metrics
        fluentbit.io/parser: glog
        cluster-autoscaler.kubernetes.io/safe-to-evict-local-volumes: tmp
    spec:
      serviceAccountName: kube-state-metrics
      automountServiceAccountToken: true
      {{- if .Values.kubeStateMetrics.imagePullSecrets }}
      imagePullSecrets: {{- toYaml .Values.kubeStateMetrics.imagePullSecrets | nindent 8 }}
      {{- end }}
      containers:
      - name: kube-state-metrics
        image: '{{ .Values.kubeStateMetrics.image.repository }}:{{ .Values.kubeStateMetrics.image.tag }}'
        args:
        - --metric-labels-allowlist=pods=[app.kubernetes.io/name,app.kubernetes.io/component,app.kubernetes.io/instance,component,part-of,app,unit],deployments=[app.kubernetes.io/name,app.kubernetes.io/component,app.kubernetes.io/instance],persistentvolumeclaims=[excluded-from-alerts]
        {{- if .Values.kubeStateMetrics.customResourceState.enabled }}
        - --custom-resource-state-config-file=/etc/customresourcestate/config.yaml
        {{- end }}
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        {{- if .Values.kubeStateMetrics.customResourceState.enabled }}
        - name: customresourcestate-config
          mountPath: /etc/customresourcestate
          readOnly: true
        {{- end }}
        ports:
        - containerPort: 8080
          name: http-metrics
        - containerPort: 8081
          name: telemetry
        readinessProbe:
          httpGet:
            path: /
            port: 8080
          initialDelaySeconds: 5
          timeoutSeconds: 5
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8080
          initialDelaySeconds: 5
          timeoutSeconds: 5
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsUser: 65534
          runAsGroup: 65534
          runAsNonRoot: true
          seccompProfile:
            type: RuntimeDefault
        resources:
{{ toYaml .Values.kubeStateMetrics.resources | indent 10 }}

      - name: addon-resizer
        image: {{ .Values.kubeStateMetrics.resizer.image.repository }}:{{ .Values.kubeStateMetrics.resizer.image.tag }}
        command:
          - /pod_nanny
          - --container=kube-state-metrics
          - --cpu=100m
          - --extra-cpu=2m
          - --memory=150Mi
          - --extra-memory=30Mi
          - --threshold=5
          - --deployment=kube-state-metrics
          - --pod=$(MY_POD_NAME)
          - --namespace=$(MY_POD_NAMESPACE)
          - --healthcheck-address=:8088
        env:
        - name: MY_POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: MY_POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        livenessProbe:
          httpGet:
            path: /health-check
            port: 8088
          initialDelaySeconds: 10
          periodSeconds: 10
        resources:
{{ toYaml .Values.kubeStateMetrics.resizer.resources | indent 10 }}
      volumes:
        - name: tmp
          emptyDir: {}
{{- if .Values.kubeStateMetrics.customResourceState.enabled }}
        - name: customresourcestate-config
          configMap:
            name: kube-state-metrics-customresourcestate-config
{{- end }}
      nodeSelector:
{{ toYaml .Values.kubeStateMetrics.nodeSelector | indent 8 }}
      affinity:
{{ toYaml .Values.kubeStateMetrics.affinity | indent 8 }}
      tolerations:
{{ toYaml .Values.kubeStateMetrics.tolerations | indent 8 }}
---
{{ if .Capabilities.APIVersions.Has "policy/v1" }}
apiVersion: policy/v1
{{ else }}
apiVersion: policy/v1beta1
{{ end }}
kind: PodDisruptionBudget
metadata:
  name: kube-state-metrics
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app: kube-state-metrics
