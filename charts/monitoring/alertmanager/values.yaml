# Copyright 2020 The Kubermatic Kubernetes Platform contributors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

alertmanager:
  image:
    repository: quay.io/prometheus/alertmanager
    tag: v0.27.0
    pullPolicy: IfNotPresent
  configReloaderImage:
    repository: ghcr.io/jimmidyson/configmap-reload
    tag: v0.12.0
    pullPolicy: IfNotPresent
  # list of image pull secret references, e.g.
  # imagePullSecrets:
  #   - name: quay-io-pull-secret
  #   - name: docker-io-pull-secret
  imagePullSecrets: []

  host: ""
  replicas: 3
  storageSize: 100Mi
  storageClass: kubermatic-fast
  sidecarContainers: {}
    # specify additional sidecars in format {"name": container_spec}
    # sidecar-name:
    #  args: ["command", "args", "here"]
    #  image: some/image:latest
  sidecarServicePorts: {}
    # specify ports to expose in a service in format {"name": port_spec}
    # port-name:
    #   port: 8080
    #   protocol: TCP
    #   targetPort: 8080

  config:
    global:
      slack_api_url: https://hooks.slack.com/services/YOUR_KEYS_HERE
    route:
      receiver: default
      repeat_interval: 1h
      group_by: [alertname, namespace, seed_cluster, cluster]
      routes:
      - receiver: blackhole
        match:
          severity: none
    receivers:
    - name: blackhole
    - name: default
      slack_configs:
      - channel: '#alerting'
        send_resolved: true
    inhibit_rules:
    # do not alert about anything going wrong inside paused clusters
    - source_match: { alertname: KubermaticClusterPaused }
      equal: [seed_cluster, cluster]
    # if etcd is down, it brings down everything else as well
    - source_match_re: { alertname: EtcdDown, cluster: .+ }
      equal: [seed_cluster, cluster]
    # if a user-cluster apiserver is down, ignore other components failing
    - source_match_re: { alertname: KubernetesApiserverDown, cluster: .+ }
      equal: [seed_cluster, cluster]
    # if a user-cluster OpenVPN server is dead, we cannot connect to the nodes anymore
    - source_match_re: { alertname: OpenVPNServerDown, cluster: .+ }
      target_match_re: { alertname: (CAdvisorDown|KubernetesNodeDown) }
      equal: [seed_cluster, cluster]

  resources:
    alertmanager:
      requests:
        cpu: 100m
        memory: 32Mi
      limits:
        cpu: 200m
        memory: 48Mi
    reloader:
      requests:
        cpu: 50m
        memory: 24Mi
      limits:
        cpu: 150m
        memory: 32Mi
  nodeSelector: {}
  affinity:
    podAntiAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
      - podAffinityTerm:
          labelSelector:
            matchLabels:
              app: '{{ template "name" . }}'
          topologyKey: kubernetes.io/hostname
        weight: 100
  tolerations: []
