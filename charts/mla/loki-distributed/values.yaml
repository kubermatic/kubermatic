# Copyright 2022 The Kubermatic Kubernetes Platform contributors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# For complete values available, see the values.yaml of upstream chart - please use correct tag
# e.g. https://github.com/grafana/helm-charts/blob/loki-distributed-0.78.0/charts/loki-distributed/values.yaml

loki-distributed:
  loki:
    structuredConfig:
      auth_enabled: true  # must for multi-tenant configuration
      analytics:
        reporting_enabled: false
      compactor:
        shared_store: aws
        working_directory: /tmp/loki/compactor
      ingester:
        lifecycler:
          ring:
            replication_factor: 3
      limits_config:
        reject_old_samples: false
      ruler:
        enable_api: true
        storage:
          type: s3
          s3:
            bucketnames: "loki-ruler"
            endpoint: "minio:9000"
            s3forcepathstyle: true
            insecure: true
        alertmanager_url: http://_http-metrics._tcp.cortex-alertmanager-headless/api/prom/alertmanager/
      table_manager:
        creation_grace_period: 3h
        poll_interval: 10m

    schemaConfig:
      configs:
      - from: "2021-02-01"
        store: boltdb-shipper
        object_store: aws
        schema: v11
        index:
          prefix: loki_index_
          period: 24h
        chunks:
          period: 360h
          prefix: loki_chunk_
    storageConfig:
      boltdb_shipper:
        shared_store: aws
      aws:
        bucketnames: "loki"
        endpoint: "minio:9000"
        s3forcepathstyle: true
        insecure: true

  ingester:
    replicas: 3
    podAnnotations:
      prometheus.io/scrape: "true"
      prometheus.io/port: "3100"
    extraArgs:
      - -s3.access-key-id=$(rootUser)
      - -s3.secret-access-key=$(rootPassword)
    extraEnvFrom:
      - secretRef:
          name: minio
    # required for pdb
    maxUnavailable: 1
    persistence:
      enabled: true
      claims:
      - name: data
        size: 10Gi
        storageClass: "kubermatic-fast"
  distributor:
    replicas: 2
    # required for pdb
    maxUnavailable: 1
    podAnnotations:
      prometheus.io/scrape: "true"
      prometheus.io/port: "3100"
  querier:
    replicas: 1
    podAnnotations:
      prometheus.io/scrape: "true"
      prometheus.io/port: "3100"
    extraArgs:
      - -s3.access-key-id=$(rootUser)
      - -s3.secret-access-key=$(rootPassword)
    extraEnvFrom:
      - secretRef:
          name: minio
    persistence:
      enabled: true
      storageClass: "kubermatic-fast"
  queryFrontend:
    podAnnotations:
      prometheus.io/scrape: "true"
      prometheus.io/port: "3100"
  # Configuration for the table-manager
  tableManager:
    enabled: true
    podAnnotations:
      prometheus.io/scrape: "true"
      prometheus.io/port: "3100"
      cluster-autoscaler.kubernetes.io/safe-to-evict-local-volumes: data
    extraArgs:
      - -s3.access-key-id=$(rootUser)
      - -s3.secret-access-key=$(rootPassword)
    extraEnvFrom:
      - secretRef:
          name: minio
  gateway:
    enabled: false
  compactor:
    enabled: true
    podAnnotations:
      prometheus.io/scrape: "true"
      prometheus.io/port: "3100"
      cluster-autoscaler.kubernetes.io/safe-to-evict-local-volumes: data,temp
    extraArgs:
      - -s3.access-key-id=$(rootUser)
      - -s3.secret-access-key=$(rootPassword)
    extraEnvFrom:
      - secretRef:
          name: minio
  ruler:
    enabled: true
    podAnnotations:
      prometheus.io/scrape: "true"
      prometheus.io/port: "3100"
      cluster-autoscaler.kubernetes.io/safe-to-evict-local-volumes: data,tmp
    extraArgs:
      - -ruler.storage.s3.access-key-id=$(rootUser)
      - -ruler.storage.s3.secret-access-key=$(rootPassword)
      - -s3.access-key-id=$(rootUser)
      - -s3.secret-access-key=$(rootPassword)
      - -ruler.alertmanager-discovery
    extraEnvFrom:
      - secretRef:
          name: minio
  memcachedExporter:
    enabled: true
  memcachedChunks:
    enabled: true
    podAnnotations:
      prometheus.io/scrape: "true"
      prometheus.io/port: "9150"
  memcachedFrontend:
    enabled: true
    podAnnotations:
      prometheus.io/scrape: "true"
      prometheus.io/port: "9150"
  memcachedIndexQueries:
    enabled: true
    podAnnotations:
      prometheus.io/scrape: "true"
      prometheus.io/port: "9150"
  memcachedIndexWrites:
    enabled: true
    podAnnotations:
      prometheus.io/scrape: "true"
      prometheus.io/port: "9150"
