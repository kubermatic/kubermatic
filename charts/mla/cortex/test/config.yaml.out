---
# Source: cortex/charts/cortex/templates/alertmanager/alertmanager-poddisruptionbudget.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: release-name-cortex-alertmanager
  namespace: default
  labels:
    helm.sh/chart: cortex-2.1.0
    app.kubernetes.io/name: cortex
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "v1.14.1"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: alertmanager
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: cortex
      app.kubernetes.io/instance: release-name
      app.kubernetes.io/component: alertmanager
  maxUnavailable: 1
---
# Source: cortex/charts/cortex/templates/distributor/distributor-poddisruptionbudget.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: release-name-cortex-distributor
  namespace: default
  labels:
    helm.sh/chart: cortex-2.1.0
    app.kubernetes.io/name: cortex
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "v1.14.1"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: distributor
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: cortex
      app.kubernetes.io/instance: release-name
      app.kubernetes.io/component: distributor
  maxUnavailable: 1
---
# Source: cortex/charts/cortex/templates/ingester/ingester-poddisruptionbudget.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: release-name-cortex-ingester
  namespace: default
  labels:
    helm.sh/chart: cortex-2.1.0
    app.kubernetes.io/name: cortex
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "v1.14.1"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: ingester
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: cortex
      app.kubernetes.io/instance: release-name
      app.kubernetes.io/component: ingester
  maxUnavailable: 1
---
# Source: cortex/charts/cortex/templates/querier/querier-poddisruptionbudget.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: release-name-cortex-querier
  namespace: default
  labels:
    helm.sh/chart: cortex-2.1.0
    app.kubernetes.io/name: cortex
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "v1.14.1"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: querier
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: cortex
      app.kubernetes.io/instance: release-name
      app.kubernetes.io/component: querier
  maxUnavailable: 1
---
# Source: cortex/charts/cortex/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: release-name-cortex
  namespace: default
  labels:
    helm.sh/chart: cortex-2.1.0
    app.kubernetes.io/name: cortex
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "v1.14.1"
    app.kubernetes.io/managed-by: Helm
  annotations:
    {}
automountServiceAccountToken: true
---
# Source: cortex/charts/cortex/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: release-name-cortex
  namespace: default
  labels:
    helm.sh/chart: cortex-2.1.0
    app.kubernetes.io/name: cortex
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "v1.14.1"
    app.kubernetes.io/managed-by: Helm
data:
  cortex.yaml: YWxlcnRtYW5hZ2VyOgogIGRhdGFfZGlyOiAvZGF0YS9jb3J0ZXgvYWxlcnQtZGF0YQogIGVuYWJsZV9hcGk6IHRydWUKICBleHRlcm5hbF91cmw6IC9hcGkvcHJvbS9hbGVydG1hbmFnZXIKYWxlcnRtYW5hZ2VyX3N0b3JhZ2U6CiAgczM6CiAgICBidWNrZXRfbmFtZTogYWxlcnRtYW5hZ2VyCiAgICBlbmRwb2ludDogbWluaW86OTAwMAogICAgaW5zZWN1cmU6IHRydWUKYXBpOgogIHByb21ldGhldXNfaHR0cF9wcmVmaXg6IC9wcm9tZXRoZXVzCiAgcmVzcG9uc2VfY29tcHJlc3Npb25fZW5hYmxlZDogdHJ1ZQphdXRoX2VuYWJsZWQ6IHRydWUKYmxvY2tzX3N0b3JhZ2U6CiAgYnVja2V0X3N0b3JlOgogICAgYnVja2V0X2luZGV4OgogICAgICBlbmFibGVkOiB0cnVlCiAgICBpZ25vcmVfZGVsZXRpb25fbWFya19kZWxheTogMWgKICAgIHN5bmNfZGlyOiAvZGF0YQogIHMzOgogICAgYnVja2V0X25hbWU6IGNvcnRleAogICAgZW5kcG9pbnQ6IG1pbmlvOjkwMDAKICAgIGluc2VjdXJlOiB0cnVlCiAgdHNkYjoKICAgIGNsb3NlX2lkbGVfdHNkYl90aW1lb3V0OiAzNjVtCiAgICBkaXI6IC9kYXRhCiAgICBmbHVzaF9ibG9ja3Nfb25fc2h1dGRvd246IHRydWUKICAgIHJldGVudGlvbl9wZXJpb2Q6IDM2NW0KICAgIHdhbF9jb21wcmVzc2lvbl9lbmFibGVkOiB0cnVlCmNvbXBhY3RvcjoKICBkYXRhX2RpcjogL2RhdGEvY29ydGV4L2NvbXBhY3RvcgogIHNoYXJkaW5nX2VuYWJsZWQ6IHRydWUKICBzaGFyZGluZ19yaW5nOgogICAga3ZzdG9yZToKICAgICAgc3RvcmU6IG1lbWJlcmxpc3QKZGlzdHJpYnV0b3I6CiAgaGFfdHJhY2tlcjoKICAgIGVuYWJsZV9oYV90cmFja2VyOiB0cnVlCiAgICBrdnN0b3JlOgogICAgICBjb25zdWw6CiAgICAgICAgaG9zdDogY29uc3VsLWNvbnN1bC1zZXJ2ZXI6ODUwMAogICAgICBzdG9yZTogY29uc3VsCiAgcG9vbDoKICAgIGhlYWx0aF9jaGVja19pbmdlc3RlcnM6IHRydWUKICByaW5nOgogICAga3ZzdG9yZToKICAgICAgc3RvcmU6IG1lbWJlcmxpc3QKICBzaGFyZF9ieV9hbGxfbGFiZWxzOiB0cnVlCmZyb250ZW5kOgogIGxvZ19xdWVyaWVzX2xvbmdlcl90aGFuOiAxMHMKaW5nZXN0ZXI6CiAgbGlmZWN5Y2xlcjoKICAgIGZpbmFsX3NsZWVwOiAzMHMKICAgIGpvaW5fYWZ0ZXI6IDEwcwogICAgbnVtX3Rva2VuczogNTEyCiAgICBvYnNlcnZlX3BlcmlvZDogMTBzCiAgICByaW5nOgogICAgICBrdnN0b3JlOgogICAgICAgIHN0b3JlOiBtZW1iZXJsaXN0CiAgICAgIHJlcGxpY2F0aW9uX2ZhY3RvcjogMwppbmdlc3Rlcl9jbGllbnQ6CiAgZ3JwY19jbGllbnRfY29uZmlnOgogICAgbWF4X3JlY3ZfbXNnX3NpemU6IDEwNDg1NzYwCiAgICBtYXhfc2VuZF9tc2dfc2l6ZTogMTA0ODU3NjAKbGltaXRzOgogIGFjY2VwdF9oYV9zYW1wbGVzOiB0cnVlCiAgZW5mb3JjZV9tZXRyaWNfbmFtZTogdHJ1ZQogIG1heF9sYWJlbF9uYW1lc19wZXJfc2VyaWVzOiA0MAogIG1heF9xdWVyeV9sb29rYmFjazogMHMKICByZWplY3Rfb2xkX3NhbXBsZXM6IHRydWUKICByZWplY3Rfb2xkX3NhbXBsZXNfbWF4X2FnZTogMTY4aAptZW1iZXJsaXN0OgogIGJpbmRfcG9ydDogNzk0NgogIGpvaW5fbWVtYmVyczoKICAtIGNvcnRleC1pbmdlc3Rlci1oZWFkbGVzcwpxdWVyaWVyOgogIGFjdGl2ZV9xdWVyeV90cmFja2VyX2RpcjogL2RhdGEvYWN0aXZlLXF1ZXJ5LXRyYWNrZXIKICBxdWVyeV9pbmdlc3RlcnNfd2l0aGluOiAzNjVtCiAgcXVlcnlfc3RvcmVfYWZ0ZXI6IDM2MG0KICBzdG9yZV9nYXRld2F5X2FkZHJlc3NlczogfC0KICAgIApxdWVyeV9yYW5nZToKICBhbGlnbl9xdWVyaWVzX3dpdGhfc3RlcDogdHJ1ZQogIGNhY2hlX3Jlc3VsdHM6IHRydWUKICByZXN1bHRzX2NhY2hlOgogICAgY2FjaGU6CiAgICAgIG1lbWNhY2hlZDoKICAgICAgICBleHBpcmF0aW9uOiAxaAogICAgICBtZW1jYWNoZWRfY2xpZW50OgogICAgICAgIHRpbWVvdXQ6IDFzCiAgc3BsaXRfcXVlcmllc19ieV9pbnRlcnZhbDogMjRoCnJ1bGVyOgogIGVuYWJsZV9hbGVydG1hbmFnZXJfZGlzY292ZXJ5OiB0cnVlCiAgZW5hYmxlX2FwaTogdHJ1ZQogIHJpbmc6CiAgICBrdnN0b3JlOgogICAgICBzdG9yZTogbWVtYmVybGlzdApydWxlcl9zdG9yYWdlOgogIHMzOgogICAgYnVja2V0X25hbWU6IGNvcnRleC1ydWxlcgogICAgZW5kcG9pbnQ6IG1pbmlvOjkwMDAKICAgIGluc2VjdXJlOiB0cnVlCnJ1bnRpbWVfY29uZmlnOgogIGZpbGU6IC9ldGMvY29ydGV4LXJ1bnRpbWUtY2ZnL3J1bnRpbWUtY29uZmlnLnlhbWwKICBwZXJpb2Q6IDEwcwpzZXJ2ZXI6CiAgZ3JwY19saXN0ZW5fcG9ydDogOTA5NQogIGdycGNfc2VydmVyX21heF9jb25jdXJyZW50X3N0cmVhbXM6IDEwMDAwCiAgZ3JwY19zZXJ2ZXJfbWF4X3JlY3ZfbXNnX3NpemU6IDEwNDg1NzYwCiAgZ3JwY19zZXJ2ZXJfbWF4X3NlbmRfbXNnX3NpemU6IDEwNDg1NzYwCiAgaHR0cF9saXN0ZW5fcG9ydDogODA4MApzdG9yYWdlOgogIGVuZ2luZTogYmxvY2tzCnN0b3JlX2dhdGV3YXk6CiAgc2hhcmRpbmdfZW5hYmxlZDogdHJ1ZQogIHNoYXJkaW5nX3Jpbmc6CiAgICBrdnN0b3JlOgogICAgICBzdG9yZTogbWVtYmVybGlzdAogICAgcmVwbGljYXRpb25fZmFjdG9yOiAy
---
# Source: cortex/charts/cortex/charts/memcached-blocks-index/templates/metrics-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-memcached-blocks-index-metrics
  namespace: default
  labels:
    app.kubernetes.io/name: memcached-blocks-index
    helm.sh/chart: memcached-blocks-index-6.3.12
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: metrics
  annotations:
    prometheus.io/port: '9150'
    prometheus.io/scrape: "true"
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: metrics
      port: 9150
      targetPort: metrics
  selector:
    app.kubernetes.io/name: memcached-blocks-index
    app.kubernetes.io/instance: release-name
---
# Source: cortex/charts/cortex/charts/memcached-blocks-index/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-memcached-blocks-index
  namespace: default
  labels:
    app.kubernetes.io/name: memcached-blocks-index
    helm.sh/chart: memcached-blocks-index-6.3.12
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
  annotations:
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: memcache
      port: 11211
      targetPort: memcache
      nodePort: null
  selector:
    app.kubernetes.io/name: memcached-blocks-index
    app.kubernetes.io/instance: release-name
---
# Source: cortex/charts/cortex/charts/memcached-blocks-metadata/templates/metrics-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-memcached-blocks-metadata-metrics
  namespace: default
  labels:
    app.kubernetes.io/name: memcached-blocks-metadata
    helm.sh/chart: memcached-blocks-metadata-6.3.12
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: metrics
  annotations:
    prometheus.io/port: '9150'
    prometheus.io/scrape: "true"
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: metrics
      port: 9150
      targetPort: metrics
  selector:
    app.kubernetes.io/name: memcached-blocks-metadata
    app.kubernetes.io/instance: release-name
---
# Source: cortex/charts/cortex/charts/memcached-blocks-metadata/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-memcached-blocks-metadata
  namespace: default
  labels:
    app.kubernetes.io/name: memcached-blocks-metadata
    helm.sh/chart: memcached-blocks-metadata-6.3.12
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
  annotations:
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: memcache
      port: 11211
      targetPort: memcache
      nodePort: null
  selector:
    app.kubernetes.io/name: memcached-blocks-metadata
    app.kubernetes.io/instance: release-name
---
# Source: cortex/charts/cortex/charts/memcached-blocks/templates/metrics-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-memcached-blocks-metrics
  namespace: default
  labels:
    app.kubernetes.io/name: memcached-blocks
    helm.sh/chart: memcached-blocks-6.3.12
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: metrics
  annotations:
    prometheus.io/port: '9150'
    prometheus.io/scrape: "true"
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: metrics
      port: 9150
      targetPort: metrics
  selector:
    app.kubernetes.io/name: memcached-blocks
    app.kubernetes.io/instance: release-name
---
# Source: cortex/charts/cortex/charts/memcached-blocks/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-memcached-blocks
  namespace: default
  labels:
    app.kubernetes.io/name: memcached-blocks
    helm.sh/chart: memcached-blocks-6.3.12
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
  annotations:
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: memcache
      port: 11211
      targetPort: memcache
      nodePort: null
  selector:
    app.kubernetes.io/name: memcached-blocks
    app.kubernetes.io/instance: release-name
---
# Source: cortex/charts/cortex/templates/alertmanager/alertmanager-svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-cortex-alertmanager-headless
  namespace: default
  labels:
    helm.sh/chart: cortex-2.1.0
    app.kubernetes.io/name: cortex
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "v1.14.1"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: alertmanager
  annotations:
    {}
spec:
  type: ClusterIP
  clusterIP: None
  publishNotReadyAddresses: true
  ports:
    - port: 8080
      protocol: TCP
      name: http-metrics
      targetPort: http-metrics
  selector:
    app.kubernetes.io/name: cortex
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/component: alertmanager
---
# Source: cortex/charts/cortex/templates/alertmanager/alertmanager-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-cortex-alertmanager
  namespace: default
  labels:
    helm.sh/chart: cortex-2.1.0
    app.kubernetes.io/name: cortex
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "v1.14.1"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: alertmanager
  annotations:
    {}
spec:
  type: ClusterIP
  ports:
    - port: 8080
      protocol: TCP
      name: http-metrics
      targetPort: http-metrics
  selector:
    app.kubernetes.io/name: cortex
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/component: alertmanager
---
# Source: cortex/charts/cortex/templates/compactor/compactor-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-cortex-compactor
  namespace: default
  labels:
    helm.sh/chart: cortex-2.1.0
    app.kubernetes.io/name: cortex
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "v1.14.1"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: compactor
  annotations:
    {}
spec:
  type: ClusterIP
  ports:
    - port: 8080
      protocol: TCP
      name: http-metrics
      targetPort: http-metrics
  selector:
    app.kubernetes.io/name: cortex
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/component: compactor
---
# Source: cortex/charts/cortex/templates/distributor/distributor-svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-cortex-distributor-headless
  namespace: default
  labels:
    helm.sh/chart: cortex-2.1.0
    app.kubernetes.io/name: cortex
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "v1.14.1"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: distributor
  annotations:
    {}
spec:
  type: ClusterIP
  clusterIP: None
  publishNotReadyAddresses: true
  ports:
    - port: 9095
      protocol: TCP
      name: grpc
      targetPort: grpc
  selector:
    app.kubernetes.io/name: cortex
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/component: distributor
---
# Source: cortex/charts/cortex/templates/distributor/distributor-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-cortex-distributor
  namespace: default
  labels:
    helm.sh/chart: cortex-2.1.0
    app.kubernetes.io/name: cortex
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "v1.14.1"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: distributor
  annotations:
    {}
spec:
  type: ClusterIP
  ports:
    - port: 8080
      protocol: TCP
      name: http-metrics
      targetPort: http-metrics
  selector:
    app.kubernetes.io/name: cortex
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/component: distributor
---
# Source: cortex/charts/cortex/templates/ingester/ingester-svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-cortex-ingester-headless
  namespace: default
  labels:
    helm.sh/chart: cortex-2.1.0
    app.kubernetes.io/name: cortex
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "v1.14.1"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: ingester
  annotations:
    {}
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - port: 9095
      protocol: TCP
      name: grpc
      targetPort: grpc
  selector:
    app.kubernetes.io/name: cortex
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/component: ingester
---
# Source: cortex/charts/cortex/templates/ingester/ingester-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-cortex-ingester
  namespace: default
  labels:
    helm.sh/chart: cortex-2.1.0
    app.kubernetes.io/name: cortex
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "v1.14.1"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: ingester
  annotations:
    {}
spec:
  type: ClusterIP
  ports:
    - port: 8080
      protocol: TCP
      name: http-metrics
      targetPort: http-metrics
  selector:
    app.kubernetes.io/name: cortex
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/component: ingester
---
# Source: cortex/charts/cortex/templates/querier/querier-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-cortex-querier
  namespace: default
  labels:
    helm.sh/chart: cortex-2.1.0
    app.kubernetes.io/name: cortex
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "v1.14.1"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: querier
  annotations:
    {}
spec:
  type: ClusterIP
  ports:
    - port: 8080
      protocol: TCP
      name: http-metrics
      targetPort: http-metrics
  selector:
    app.kubernetes.io/name: cortex
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/component: querier
---
# Source: cortex/charts/cortex/templates/query-frontend/query-frontend-svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-cortex-query-frontend-headless
  namespace: default
  labels:
    helm.sh/chart: cortex-2.1.0
    app.kubernetes.io/name: cortex
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "v1.14.1"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: query-frontend
  annotations:
    {}
spec:
  type: ClusterIP
  clusterIP: None
  publishNotReadyAddresses: true
  ports:
    - port: 9095
      protocol: TCP
      name: grpc
      targetPort: grpc
  selector:
    app.kubernetes.io/name: cortex
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/component: query-frontend
---
# Source: cortex/charts/cortex/templates/query-frontend/query-frontend-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-cortex-query-frontend
  namespace: default
  labels:
    helm.sh/chart: cortex-2.1.0
    app.kubernetes.io/name: cortex
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "v1.14.1"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: query-frontend
  annotations:
    {}
spec:
  type: ClusterIP
  ports:
    - port: 8080
      protocol: TCP
      name: http-metrics
      targetPort: http-metrics
  selector:
    app.kubernetes.io/name: cortex
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/component: query-frontend
---
# Source: cortex/charts/cortex/templates/ruler/ruler-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-cortex-ruler
  namespace: default
  labels:
    helm.sh/chart: cortex-2.1.0
    app.kubernetes.io/name: cortex
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "v1.14.1"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: ruler
  annotations:
    {}
spec:
  type: ClusterIP
  ports:
    - port: 8080
      protocol: TCP
      name: http-metrics
      targetPort: http-metrics
  selector:
    app.kubernetes.io/name: cortex
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/component: ruler
---
# Source: cortex/charts/cortex/templates/store-gateway/store-gateway-svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-cortex-store-gateway-headless
  namespace: default
  labels:
    helm.sh/chart: cortex-2.1.0
    app.kubernetes.io/name: cortex
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "v1.14.1"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: store-gateway
  annotations:
    {}
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - port: 9095
      protocol: TCP
      name: grpc
      targetPort: grpc
  selector:
    app.kubernetes.io/name: cortex
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/component: store-gateway
---
# Source: cortex/charts/cortex/templates/store-gateway/store-gateway-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-cortex-store-gateway
  namespace: default
  labels:
    helm.sh/chart: cortex-2.1.0
    app.kubernetes.io/name: cortex
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "v1.14.1"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: store-gateway
  annotations:
    {}
spec:
  type: ClusterIP
  ports:
    - port: 8080
      protocol: TCP
      name: http-metrics
      targetPort: http-metrics
  selector:
    app.kubernetes.io/name: cortex
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/component: store-gateway
---
# Source: cortex/charts/cortex/templates/svc-memberlist-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-cortex-memberlist
  namespace: default
  labels:
    helm.sh/chart: cortex-2.1.0
    app.kubernetes.io/name: cortex
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "v1.14.1"
    app.kubernetes.io/managed-by: Helm
  annotations:
    {}
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - port: 7946
      protocol: TCP
      name: gossip
      targetPort: gossip
  selector:
    app.kubernetes.io/name: cortex
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/part-of: memberlist
---
# Source: cortex/templates/cortex-alertmanager-headless-kkp.yaml
# Copyright 2022 The Kubermatic Kubernetes Platform contributors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# This is a KKP-specific headless alertmanager service, used to work around
# the Cortex helm chart bug in chart versions below v1.0.0

apiVersion: v1
kind: Service
metadata:
  name: cortex-alertmanager-headless-kkp
spec:
  clusterIP: None
  internalTrafficPolicy: Cluster
  ports:
  - name: http-metrics
    port: 8080
    protocol: TCP
    targetPort: http-metrics
  publishNotReadyAddresses: true
  selector:
    app.kubernetes.io/component: alertmanager
    app.kubernetes.io/instance: cortex
    app.kubernetes.io/name: cortex
  sessionAffinity: None
  type: ClusterIP
---
# Source: cortex/charts/cortex/templates/distributor/distributor-dep.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-cortex-distributor
  namespace: default
  labels:
    helm.sh/chart: cortex-2.1.0
    app.kubernetes.io/name: cortex
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "v1.14.1"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: distributor
    app.kubernetes.io/part-of: memberlist
  annotations:
    {}
spec:
  replicas: 2
  selector:
    matchLabels:
      app.kubernetes.io/name: cortex
      app.kubernetes.io/instance: release-name
      app.kubernetes.io/component: distributor
  strategy:
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      labels:
        helm.sh/chart: cortex-2.1.0
        app.kubernetes.io/name: cortex
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/version: "v1.14.1"
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: distributor
        app.kubernetes.io/part-of: memberlist
      annotations:
        checksum/config: 911b5b6fe52178872afd166bae86cf360898db35141c02e32be23c24954673df
        cluster-autoscaler.kubernetes.io/safe-to-evict-local-volumes: storage
        prometheus.io/port: "8080"
        prometheus.io/scrape: "true"
    spec:
      serviceAccountName: release-name-cortex
      initContainers:
        []
      containers:
        - name: distributor
          image: "quay.io/cortexproject/cortex:v1.14.1"
          imagePullPolicy: IfNotPresent
          args:
            - "-target=distributor"
            - "-config.file=/etc/cortex/cortex.yaml"
          volumeMounts:
            - mountPath: /etc/cortex-runtime-cfg
              name: cortex-runtime-config
            - name: config
              mountPath: /etc/cortex
            - name: runtime-config
              mountPath: /etc/cortex-runtime-config
            - name: storage
              mountPath: "/data"
              subPath: 
          ports:
            - name: http-metrics
              containerPort: 8080
              protocol: TCP
            - name: gossip
              containerPort: 7946
              protocol: TCP
            - name: grpc
              containerPort: 9095
              protocol: TCP
          startupProbe:
            failureThreshold: 10
            httpGet:
              path: /ready
              port: http-metrics
          livenessProbe:
            httpGet:
              path: /ready
              port: http-metrics
          readinessProbe:
            httpGet:
              path: /ready
              port: http-metrics
          resources:
            {}
          securityContext:
            readOnlyRootFilesystem: true
      nodeSelector:
        {}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app.kubernetes.io/component
                  operator: In
                  values:
                  - distributor
              topologyKey: kubernetes.io/hostname
            weight: 100
      tolerations:
        []
      terminationGracePeriodSeconds: 60
      volumes:
        - name: config
          secret:
            secretName: release-name-cortex
        - name: runtime-config
          configMap:
            name: release-name-cortex-runtime-config
        - name: storage
          emptyDir: {}
        - configMap:
            name: cortex-runtime-config
          name: cortex-runtime-config
---
# Source: cortex/charts/cortex/templates/querier/querier-dep.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-cortex-querier
  namespace: default
  labels:
    helm.sh/chart: cortex-2.1.0
    app.kubernetes.io/name: cortex
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "v1.14.1"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: querier
  annotations:
    {}
spec:
  replicas: 2
  selector:
    matchLabels:
      app.kubernetes.io/name: cortex
      app.kubernetes.io/instance: release-name
      app.kubernetes.io/component: querier
  strategy:
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      labels:
        helm.sh/chart: cortex-2.1.0
        app.kubernetes.io/name: cortex
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/version: "v1.14.1"
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: querier
      annotations:
        checksum/config: 911b5b6fe52178872afd166bae86cf360898db35141c02e32be23c24954673df
        cluster-autoscaler.kubernetes.io/safe-to-evict-local-volumes: storage
        prometheus.io/port: "8080"
        prometheus.io/scrape: "true"
    spec:
      serviceAccountName: release-name-cortex
      initContainers:
        []
      containers:
        - name: querier
          image: "quay.io/cortexproject/cortex:v1.14.1"
          imagePullPolicy: IfNotPresent
          args:
            - "-target=querier"
            - "-config.file=/etc/cortex/cortex.yaml"
            - "-querier.frontend-address=release-name-cortex-query-frontend-headless.default.svc.cluster.local:9095"
            
            - "-blocks-storage.bucket-store.index-cache.backend=memcached"
            - "-blocks-storage.bucket-store.index-cache.memcached.addresses=dns+release-name-memcached-blocks-index.default.svc.cluster.local:11211"
            - "-blocks-storage.bucket-store.chunks-cache.backend=memcached"
            - "-blocks-storage.bucket-store.chunks-cache.memcached.addresses=dns+release-name-memcached-blocks.default.svc.cluster.local:11211"
            - "-blocks-storage.bucket-store.metadata-cache.backend=memcached"
            - "-blocks-storage.bucket-store.metadata-cache.memcached.addresses=dns+release-name-memcached-blocks-metadata.default.svc.cluster.local:11211"
            - "-blocks-storage.s3.access-key-id=$(ACCESS_KEY)"
            - "-blocks-storage.s3.secret-access-key=$(SECRET_KEY)"
          volumeMounts:
            - mountPath: /etc/cortex-runtime-cfg
              name: cortex-runtime-config
            - name: config
              mountPath: /etc/cortex
            - name: runtime-config
              mountPath: /etc/cortex-runtime-config
            - name: storage
              mountPath: "/data"
              subPath: 
          ports:
            - name: http-metrics
              containerPort: 8080
              protocol: TCP
          startupProbe:
            failureThreshold: 10
            httpGet:
              path: /ready
              port: http-metrics
          livenessProbe:
            httpGet:
              path: /ready
              port: http-metrics
          readinessProbe:
            httpGet:
              path: /ready
              port: http-metrics
          resources:
            requests:
              cpu: 5m
          securityContext:
            readOnlyRootFilesystem: true
          env:
            - name: ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  key: rootUser
                  name: minio
            - name: SECRET_KEY
              valueFrom:
                secretKeyRef:
                  key: rootPassword
                  name: minio
      nodeSelector:
        {}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app.kubernetes.io/component
                  operator: In
                  values:
                  - querier
              topologyKey: kubernetes.io/hostname
            weight: 100
      tolerations:
        []
      terminationGracePeriodSeconds: 180
      volumes:
        - name: config
          secret:
            secretName: release-name-cortex
        - name: runtime-config
          configMap:
            name: release-name-cortex-runtime-config
        - name: storage
          emptyDir: {}
        - configMap:
            name: cortex-runtime-config
          name: cortex-runtime-config
---
# Source: cortex/charts/cortex/templates/query-frontend/query-frontend-dep.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-cortex-query-frontend
  namespace: default
  labels:
    helm.sh/chart: cortex-2.1.0
    app.kubernetes.io/name: cortex
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "v1.14.1"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: query-frontend
  annotations:
    {}
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: cortex
      app.kubernetes.io/instance: release-name
      app.kubernetes.io/component: query-frontend
  strategy:
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      labels:
        helm.sh/chart: cortex-2.1.0
        app.kubernetes.io/name: cortex
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/version: "v1.14.1"
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: query-frontend
      annotations:
        checksum/config: 911b5b6fe52178872afd166bae86cf360898db35141c02e32be23c24954673df
        prometheus.io/port: "8080"
        prometheus.io/scrape: "true"
    spec:
      serviceAccountName: release-name-cortex
      initContainers:
        []
      containers:
        - name: query-frontend
          image: "quay.io/cortexproject/cortex:v1.14.1"
          imagePullPolicy: IfNotPresent
          args:
            - "-target=query-frontend"
            - "-config.file=/etc/cortex/cortex.yaml"
            
          volumeMounts:
            - mountPath: /etc/cortex-runtime-cfg
              name: cortex-runtime-config
            - name: config
              mountPath: /etc/cortex
            - name: runtime-config
              mountPath: /etc/cortex-runtime-config
          ports:
            - name: http-metrics
              containerPort: 8080
              protocol: TCP
            - name: grpc
              containerPort: 9095
              protocol: TCP
          startupProbe:
            failureThreshold: 10
            httpGet:
              path: /ready
              port: http-metrics
          livenessProbe:
            httpGet:
              path: /ready
              port: http-metrics
          readinessProbe:
            httpGet:
              path: /ready
              port: http-metrics
          resources:
            requests:
              cpu: 5m
          securityContext:
            readOnlyRootFilesystem: true
      nodeSelector:
        {}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app.kubernetes.io/component
                  operator: In
                  values:
                  - query-frontend
              topologyKey: kubernetes.io/hostname
            weight: 100
      tolerations:
        []
      terminationGracePeriodSeconds: 180
      volumes:
        - name: config
          secret:
            secretName: release-name-cortex
        - name: runtime-config
          configMap:
            name: release-name-cortex-runtime-config
        - configMap:
            name: cortex-runtime-config
          name: cortex-runtime-config
---
# Source: cortex/charts/cortex/templates/ruler/ruler-dep.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-cortex-ruler
  namespace: default
  labels:
    helm.sh/chart: cortex-2.1.0
    app.kubernetes.io/name: cortex
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "v1.14.1"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: ruler
    app.kubernetes.io/part-of: memberlist
  annotations:
    {}
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: cortex
      app.kubernetes.io/instance: release-name
      app.kubernetes.io/component: ruler
  strategy:
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      labels:
        helm.sh/chart: cortex-2.1.0
        app.kubernetes.io/name: cortex
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/version: "v1.14.1"
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: ruler
        app.kubernetes.io/part-of: memberlist
      annotations:
        checksum/config: 911b5b6fe52178872afd166bae86cf360898db35141c02e32be23c24954673df
        cluster-autoscaler.kubernetes.io/safe-to-evict-local-volumes: storage,tmp
        prometheus.io/port: "8080"
        prometheus.io/scrape: "true"
    spec:
      serviceAccountName: release-name-cortex
      initContainers:
        []
      containers:
        - name: rules
          image: "quay.io/cortexproject/cortex:v1.14.1"
          imagePullPolicy: IfNotPresent
          args:
            - "-target=ruler"
            - "-config.file=/etc/cortex/cortex.yaml"
            - "-ruler.alertmanager-url=http://_http-metrics._tcp.cortex-alertmanager-headless.default.svc.cluster.local/api/prom/alertmanager/"
            
            - "-blocks-storage.bucket-store.index-cache.backend=memcached"
            - "-blocks-storage.bucket-store.index-cache.memcached.addresses=dns+release-name-memcached-blocks-index.default.svc.cluster.local:11211"
            - "-blocks-storage.bucket-store.chunks-cache.backend=memcached"
            - "-blocks-storage.bucket-store.chunks-cache.memcached.addresses=dns+release-name-memcached-blocks.default.svc.cluster.local:11211"
            - "-blocks-storage.bucket-store.metadata-cache.backend=memcached"
            - "-blocks-storage.bucket-store.metadata-cache.memcached.addresses=dns+release-name-memcached-blocks-metadata.default.svc.cluster.local:11211"
            - "-ruler-storage.s3.access-key-id=$(ACCESS_KEY)"
            - "-ruler-storage.s3.secret-access-key=$(SECRET_KEY)"
          volumeMounts:
            - mountPath: /etc/cortex-runtime-cfg
              name: cortex-runtime-config
            - name: config
              mountPath: /etc/cortex
            - name: runtime-config
              mountPath: /etc/cortex-runtime-config
            - name: storage
              mountPath: /data
            - name: tmp
              mountPath: /rules
          ports:
            - name: http-metrics
              containerPort: 8080
              protocol: TCP
            - name: gossip
              containerPort: 7946
              protocol: TCP
          startupProbe:
            failureThreshold: 10
            httpGet:
              path: /ready
              port: http-metrics
          livenessProbe:
            httpGet:
              path: /ready
              port: http-metrics
          readinessProbe:
            httpGet:
              path: /ready
              port: http-metrics
          resources:
            requests:
              cpu: 5m
          securityContext:
            readOnlyRootFilesystem: true
          env:
            - name: ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  key: rootUser
                  name: minio
            - name: SECRET_KEY
              valueFrom:
                secretKeyRef:
                  key: rootPassword
                  name: minio
      nodeSelector:
        {}
      affinity:
        {}
      tolerations:
        []
      terminationGracePeriodSeconds: 180
      volumes:
        - name: config
          secret:
            secretName: release-name-cortex
        - name: runtime-config
          configMap:
            name: release-name-cortex-runtime-config
        - name: tmp
          emptyDir: {}
        - name: storage
          emptyDir: {}
        - configMap:
            name: cortex-runtime-config
          name: cortex-runtime-config
---
# Source: cortex/charts/cortex/charts/memcached-blocks-index/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: release-name-memcached-blocks-index
  namespace: default
  labels:
    app.kubernetes.io/name: memcached-blocks-index
    helm.sh/chart: memcached-blocks-index-6.3.12
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: memcached-blocks-index
      app.kubernetes.io/instance: release-name
  replicas: 2
  podManagementPolicy: "Parallel"
  serviceName: release-name-memcached-blocks-index
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: memcached-blocks-index
        helm.sh/chart: memcached-blocks-index-6.3.12
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/managed-by: Helm
      annotations:
        cluster-autoscaler.kubernetes.io/safe-to-evict-local-volumes: tmp
        prometheus.io/port: '9150'
        prometheus.io/scrape: "true"
    spec:
      
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: memcached-blocks-index
                    app.kubernetes.io/instance: release-name
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
      serviceAccountName: default
      containers:
        - name: memcached
          image: docker.io/bitnami/memcached:1.6.19-debian-11-r0
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsNonRoot: true
            runAsUser: 1001
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: MEMCACHED_PORT_NUMBER
              value: "11211"
            - name: MEMCACHED_CACHE_SIZE
              value: "1024"
            - name: MEMCACHED_MAX_CONNECTIONS
              value: "1024"
            - name: MEMCACHED_THREADS
              value: "4"
          ports:
            - name: memcache
              containerPort: 11211
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            tcpSocket:
              port: memcache
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 3
            tcpSocket:
              port: memcache
          resources:
            limits: {}
            requests:
              cpu: 5m
              memory: 256Mi
          volumeMounts:
            - name: tmp
              mountPath: /tmp
        - name: metrics
          image: docker.io/bitnami/memcached-exporter:0.11.2-debian-11-r0
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsNonRoot: true
            runAsUser: 1001
          ports:
            - name: metrics
              containerPort: 9150
          livenessProbe:
            failureThreshold: 3
            initialDelaySeconds: 15
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            httpGet:
              path: /metrics
              port: 9150
          readinessProbe:
            failureThreshold: 3
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 3
            httpGet:
              path: /metrics
              port: 9150
          resources:
            limits: {}
            requests: {}
      volumes:
        - name: tmp
          emptyDir: {}
---
# Source: cortex/charts/cortex/charts/memcached-blocks-metadata/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: release-name-memcached-blocks-metadata
  namespace: default
  labels:
    app.kubernetes.io/name: memcached-blocks-metadata
    helm.sh/chart: memcached-blocks-metadata-6.3.12
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: memcached-blocks-metadata
      app.kubernetes.io/instance: release-name
  replicas: 2
  podManagementPolicy: "Parallel"
  serviceName: release-name-memcached-blocks-metadata
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: memcached-blocks-metadata
        helm.sh/chart: memcached-blocks-metadata-6.3.12
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/managed-by: Helm
      annotations:
        cluster-autoscaler.kubernetes.io/safe-to-evict-local-volumes: tmp
        prometheus.io/port: '9150'
        prometheus.io/scrape: "true"
    spec:
      
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: memcached-blocks-metadata
                    app.kubernetes.io/instance: release-name
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
      serviceAccountName: default
      containers:
        - name: memcached
          image: docker.io/bitnami/memcached:1.6.19-debian-11-r0
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsNonRoot: true
            runAsUser: 1001
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: MEMCACHED_PORT_NUMBER
              value: "11211"
            - name: MEMCACHED_CACHE_SIZE
              value: "1024"
            - name: MEMCACHED_MAX_CONNECTIONS
              value: "1024"
            - name: MEMCACHED_THREADS
              value: "4"
          ports:
            - name: memcache
              containerPort: 11211
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            tcpSocket:
              port: memcache
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 3
            tcpSocket:
              port: memcache
          resources:
            limits: {}
            requests:
              cpu: 5m
              memory: 256Mi
          volumeMounts:
            - name: tmp
              mountPath: /tmp
        - name: metrics
          image: docker.io/bitnami/memcached-exporter:0.11.2-debian-11-r0
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsNonRoot: true
            runAsUser: 1001
          ports:
            - name: metrics
              containerPort: 9150
          livenessProbe:
            failureThreshold: 3
            initialDelaySeconds: 15
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            httpGet:
              path: /metrics
              port: 9150
          readinessProbe:
            failureThreshold: 3
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 3
            httpGet:
              path: /metrics
              port: 9150
          resources:
            limits: {}
            requests: {}
      volumes:
        - name: tmp
          emptyDir: {}
---
# Source: cortex/charts/cortex/charts/memcached-blocks/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: release-name-memcached-blocks
  namespace: default
  labels:
    app.kubernetes.io/name: memcached-blocks
    helm.sh/chart: memcached-blocks-6.3.12
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: memcached-blocks
      app.kubernetes.io/instance: release-name
  replicas: 2
  podManagementPolicy: "Parallel"
  serviceName: release-name-memcached-blocks
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: memcached-blocks
        helm.sh/chart: memcached-blocks-6.3.12
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/managed-by: Helm
      annotations:
        cluster-autoscaler.kubernetes.io/safe-to-evict-local-volumes: tmp
        prometheus.io/port: '9150'
        prometheus.io/scrape: "true"
    spec:
      
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: memcached-blocks
                    app.kubernetes.io/instance: release-name
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
      serviceAccountName: default
      containers:
        - name: memcached
          image: docker.io/bitnami/memcached:1.6.19-debian-11-r0
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsNonRoot: true
            runAsUser: 1001
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: MEMCACHED_PORT_NUMBER
              value: "11211"
            - name: MEMCACHED_CACHE_SIZE
              value: "1024"
            - name: MEMCACHED_MAX_CONNECTIONS
              value: "1024"
            - name: MEMCACHED_THREADS
              value: "4"
          ports:
            - name: memcache
              containerPort: 11211
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            tcpSocket:
              port: memcache
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 3
            tcpSocket:
              port: memcache
          resources:
            limits: {}
            requests:
              cpu: 5m
              memory: 256Mi
          volumeMounts:
            - name: tmp
              mountPath: /tmp
        - name: metrics
          image: docker.io/bitnami/memcached-exporter:0.11.2-debian-11-r0
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsNonRoot: true
            runAsUser: 1001
          ports:
            - name: metrics
              containerPort: 9150
          livenessProbe:
            failureThreshold: 3
            initialDelaySeconds: 15
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            httpGet:
              path: /metrics
              port: 9150
          readinessProbe:
            failureThreshold: 3
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 3
            httpGet:
              path: /metrics
              port: 9150
          resources:
            limits: {}
            requests: {}
      volumes:
        - name: tmp
          emptyDir: {}
---
# Source: cortex/charts/cortex/templates/alertmanager/alertmanager-statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: release-name-cortex-alertmanager
  namespace: default
  labels:
    helm.sh/chart: cortex-2.1.0
    app.kubernetes.io/name: cortex
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "v1.14.1"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: alertmanager
    app.kubernetes.io/part-of: memberlist
  annotations:
    {}
spec:
  replicas: 2
  selector:
    matchLabels:
      app.kubernetes.io/name: cortex
      app.kubernetes.io/instance: release-name
      app.kubernetes.io/component: alertmanager
  updateStrategy:
    type: RollingUpdate
  serviceName: release-name-cortex-alertmanager-headless
  volumeClaimTemplates:
    - metadata:
        name: storage
      spec:
        storageClassName: "kubermatic-fast"
        accessModes:
          
          - ReadWriteOnce
        resources:
          requests:
            storage: "2Gi"
  template:
    metadata:
      labels:
        helm.sh/chart: cortex-2.1.0
        app.kubernetes.io/name: cortex
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/version: "v1.14.1"
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: alertmanager
        app.kubernetes.io/part-of: memberlist
      annotations:
        checksum/config: 911b5b6fe52178872afd166bae86cf360898db35141c02e32be23c24954673df
        prometheus.io/port: "8080"
        prometheus.io/scrape: "true"
    spec:
      serviceAccountName: release-name-cortex
      initContainers:
        []
      nodeSelector:
        {}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: target
                  operator: In
                  values:
                  - alertmanager
              topologyKey: kubernetes.io/hostname
            weight: 100
      tolerations:
        []
      terminationGracePeriodSeconds: 60
      volumes:
        - name: config
          secret:
            secretName: release-name-cortex
        - name: runtime-config
          configMap:
            name: release-name-cortex-runtime-config
        - configMap:
            name: cortex-runtime-config
          name: cortex-runtime-config
      containers:
        - name: alertmanager
          image: "quay.io/cortexproject/cortex:v1.14.1"
          imagePullPolicy: IfNotPresent
          args:
            - "-target=alertmanager"
            - "-config.file=/etc/cortex/cortex.yaml"
            - "-alertmanager-storage.s3.access-key-id=$(ACCESS_KEY)"
            - "-alertmanager-storage.s3.secret-access-key=$(SECRET_KEY)"
          volumeMounts:
            - mountPath: /tmp
              name: storage
            - mountPath: /etc/cortex-runtime-cfg
              name: cortex-runtime-config
            - name: config
              mountPath: /etc/cortex
            - name: runtime-config
              mountPath: /etc/cortex-runtime-config
            - name: storage
              mountPath: "/data"
          ports:
            - name: http-metrics
              containerPort: 8080
              protocol: TCP
            - name: gossip
              containerPort: 7946
              protocol: TCP
          startupProbe:
            failureThreshold: 10
            httpGet:
              path: /ready
              port: http-metrics
          livenessProbe:
            httpGet:
              path: /ready
              port: http-metrics
          readinessProbe:
            httpGet:
              path: /ready
              port: http-metrics
          resources:
            {}
          securityContext:
            readOnlyRootFilesystem: true
          env:
            - name: ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  key: rootUser
                  name: minio
            - name: SECRET_KEY
              valueFrom:
                secretKeyRef:
                  key: rootPassword
                  name: minio
---
# Source: cortex/charts/cortex/templates/compactor/compactor-statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: release-name-cortex-compactor
  namespace: default
  labels:
    helm.sh/chart: cortex-2.1.0
    app.kubernetes.io/name: cortex
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "v1.14.1"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: compactor
    app.kubernetes.io/part-of: memberlist
  annotations:
    {}
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: cortex
      app.kubernetes.io/instance: release-name
      app.kubernetes.io/component: compactor
  updateStrategy:
    type: RollingUpdate
  serviceName: release-name-cortex-compactor
  volumeClaimTemplates:
    - metadata:
        name: storage
      spec:
        storageClassName: "kubermatic-fast"
        accessModes:
          
          - ReadWriteOnce
        resources:
          requests:
            storage: "2Gi"
  template:
    metadata:
      labels:
        helm.sh/chart: cortex-2.1.0
        app.kubernetes.io/name: cortex
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/version: "v1.14.1"
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: compactor
        app.kubernetes.io/part-of: memberlist
      annotations:
        checksum/config: 911b5b6fe52178872afd166bae86cf360898db35141c02e32be23c24954673df
        prometheus.io/port: "8080"
        prometheus.io/scrape: "true"
    spec:
      serviceAccountName: release-name-cortex
      initContainers:
        []
      nodeSelector:
        {}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app.kubernetes.io/component
                  operator: In
                  values:
                  - compactor
              topologyKey: kubernetes.io/hostname
            weight: 100
      tolerations:
        []
      terminationGracePeriodSeconds: 240
      volumes:
        - name: config
          secret:
            secretName: release-name-cortex
        - name: runtime-config
          configMap:
            name: release-name-cortex-runtime-config
        - configMap:
            name: cortex-runtime-config
          name: cortex-runtime-config
      containers:
        - name: compactor
          image: "quay.io/cortexproject/cortex:v1.14.1"
          imagePullPolicy: IfNotPresent
          args:
            - "-target=compactor"
            - "-config.file=/etc/cortex/cortex.yaml"
            
            - "-blocks-storage.bucket-store.index-cache.backend=memcached"
            - "-blocks-storage.bucket-store.index-cache.memcached.addresses=dns+release-name-memcached-blocks-index.default.svc.cluster.local:11211"
            - "-blocks-storage.bucket-store.chunks-cache.backend=memcached"
            - "-blocks-storage.bucket-store.chunks-cache.memcached.addresses=dns+release-name-memcached-blocks.default.svc.cluster.local:11211"
            - "-blocks-storage.bucket-store.metadata-cache.backend=memcached"
            - "-blocks-storage.bucket-store.metadata-cache.memcached.addresses=dns+release-name-memcached-blocks-metadata.default.svc.cluster.local:11211"
          volumeMounts:
            - mountPath: /etc/cortex-runtime-cfg
              name: cortex-runtime-config
            - name: config
              mountPath: /etc/cortex
            - name: runtime-config
              mountPath: /etc/cortex-runtime-config
            - name: storage
              mountPath: "/data"
          ports:
            - name: http-metrics
              containerPort: 8080
              protocol: TCP
            - name: gossip
              containerPort: 7946
              protocol: TCP
          startupProbe:
            failureThreshold: 60
            httpGet:
              path: /ready
              port: http-metrics
              scheme: HTTP
            initialDelaySeconds: 120
            periodSeconds: 30
          livenessProbe:
            httpGet:
              path: /ready
              port: http-metrics
              scheme: HTTP
          readinessProbe:
            httpGet:
              path: /ready
              port: http-metrics
          resources:
            {}
          securityContext:
            readOnlyRootFilesystem: true
---
# Source: cortex/charts/cortex/templates/ingester/ingester-statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: release-name-cortex-ingester
  namespace: default
  labels:
    helm.sh/chart: cortex-2.1.0
    app.kubernetes.io/name: cortex
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "v1.14.1"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: ingester
    app.kubernetes.io/part-of: memberlist
  annotations:
    {}
spec:
  replicas: 3
  selector:
    matchLabels:
      app.kubernetes.io/name: cortex
      app.kubernetes.io/instance: release-name
      app.kubernetes.io/component: ingester
  updateStrategy:
    type: RollingUpdate          
  podManagementPolicy: "OrderedReady"
  serviceName: release-name-cortex-ingester-headless
  volumeClaimTemplates:
    - metadata:
        name: storage
      spec:
        storageClassName: "kubermatic-fast"
        accessModes:
          
          - ReadWriteOnce
        resources:
          requests:
            storage: "10Gi"
  template:
    metadata:
      labels:
        helm.sh/chart: cortex-2.1.0
        app.kubernetes.io/name: cortex
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/version: "v1.14.1"
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: ingester
        app.kubernetes.io/part-of: memberlist
      annotations:
        checksum/config: 911b5b6fe52178872afd166bae86cf360898db35141c02e32be23c24954673df
        prometheus.io/port: "8080"
        prometheus.io/scrape: "true"
    spec:
      serviceAccountName: release-name-cortex
      initContainers:
        []
      nodeSelector:
        {}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app.kubernetes.io/component
                  operator: In
                  values:
                  - ingester
              topologyKey: kubernetes.io/hostname
            weight: 100
      tolerations:
        []
      terminationGracePeriodSeconds: 240
      volumes:
        - name: config
          secret:
            secretName: release-name-cortex
        - name: runtime-config
          configMap:
            name: release-name-cortex-runtime-config
        - configMap:
            name: cortex-runtime-config
          name: cortex-runtime-config
      containers:
        - name: ingester
          image: "quay.io/cortexproject/cortex:v1.14.1"
          imagePullPolicy: IfNotPresent
          args:
            - "-target=ingester"
            - "-config.file=/etc/cortex/cortex.yaml"
            
            - "-blocks-storage.bucket-store.index-cache.backend=memcached"
            - "-blocks-storage.bucket-store.index-cache.memcached.addresses=dns+release-name-memcached-blocks-index.default.svc.cluster.local:11211"
            - "-blocks-storage.bucket-store.chunks-cache.backend=memcached"
            - "-blocks-storage.bucket-store.chunks-cache.memcached.addresses=dns+release-name-memcached-blocks.default.svc.cluster.local:11211"
            - "-blocks-storage.bucket-store.metadata-cache.backend=memcached"
            - "-blocks-storage.bucket-store.metadata-cache.memcached.addresses=dns+release-name-memcached-blocks-metadata.default.svc.cluster.local:11211"
            - "-blocks-storage.s3.access-key-id=$(ACCESS_KEY)"
            - "-blocks-storage.s3.secret-access-key=$(SECRET_KEY)"
          volumeMounts:
            - mountPath: /etc/cortex-runtime-cfg
              name: cortex-runtime-config
            - name: config
              mountPath: /etc/cortex
            - name: runtime-config
              mountPath: /etc/cortex-runtime-config
            - name: storage
              mountPath: "/data"
          ports:
            - name: http-metrics
              containerPort: 8080
              protocol: TCP
            - name: grpc
              containerPort: 9095
              protocol: TCP
            - name: gossip
              containerPort: 7946
              protocol: TCP
          readinessProbe:
            httpGet:
              path: /ready
              port: http-metrics
          resources:
            {}
          securityContext:
            readOnlyRootFilesystem: true
          env:
            - name: ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  key: rootUser
                  name: minio
            - name: SECRET_KEY
              valueFrom:
                secretKeyRef:
                  key: rootPassword
                  name: minio
          lifecycle:
            preStop:
              httpGet:
                path: /ingester/shutdown
                port: http-metrics
---
# Source: cortex/charts/cortex/templates/store-gateway/store-gateway-statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: release-name-cortex-store-gateway
  namespace: default
  labels:
    helm.sh/chart: cortex-2.1.0
    app.kubernetes.io/name: cortex
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "v1.14.1"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: store-gateway
    app.kubernetes.io/part-of: memberlist
  annotations:
    {}
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: cortex
      app.kubernetes.io/instance: release-name
      app.kubernetes.io/component: store-gateway
  updateStrategy:
    type: RollingUpdate
  podManagementPolicy: "OrderedReady"
  serviceName: release-name-cortex-store-gateway-headless
  volumeClaimTemplates:
    - metadata:
        name: storage
      spec:
        storageClassName: "kubermatic-fast"
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: "2Gi"
  template:
    metadata:
      labels:
        helm.sh/chart: cortex-2.1.0
        app.kubernetes.io/name: cortex
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/version: "v1.14.1"
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: store-gateway
        app.kubernetes.io/part-of: memberlist
      annotations:
        checksum/config: 911b5b6fe52178872afd166bae86cf360898db35141c02e32be23c24954673df
        prometheus.io/port: "8080"
        prometheus.io/scrape: "true"
    spec:
      serviceAccountName: release-name-cortex
      initContainers:
        []
      nodeSelector:
        {}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app.kubernetes.io/component
                  operator: In
                  values:
                  - store-gateway
              topologyKey: kubernetes.io/hostname
            weight: 100
      tolerations:
        []
      terminationGracePeriodSeconds: 240
      volumes:
        - name: config
          secret:
            secretName: release-name-cortex
        - name: runtime-config
          configMap:
            name: release-name-cortex-runtime-config
        - configMap:
            name: cortex-runtime-config
          name: cortex-runtime-config
      containers:
        - name: store-gateway
          image: "quay.io/cortexproject/cortex:v1.14.1"
          imagePullPolicy: IfNotPresent
          args:
            - "-target=store-gateway"
            - "-config.file=/etc/cortex/cortex.yaml"
            
            - "-blocks-storage.bucket-store.index-cache.backend=memcached"
            - "-blocks-storage.bucket-store.index-cache.memcached.addresses=dns+release-name-memcached-blocks-index.default.svc.cluster.local:11211"
            - "-blocks-storage.bucket-store.chunks-cache.backend=memcached"
            - "-blocks-storage.bucket-store.chunks-cache.memcached.addresses=dns+release-name-memcached-blocks.default.svc.cluster.local:11211"
            - "-blocks-storage.bucket-store.metadata-cache.backend=memcached"
            - "-blocks-storage.bucket-store.metadata-cache.memcached.addresses=dns+release-name-memcached-blocks-metadata.default.svc.cluster.local:11211"
            - "-blocks-storage.s3.access-key-id=$(ACCESS_KEY)"
            - "-blocks-storage.s3.secret-access-key=$(SECRET_KEY)"
          volumeMounts:
            - mountPath: /etc/cortex-runtime-cfg
              name: cortex-runtime-config
            - name: config
              mountPath: /etc/cortex
            - name: runtime-config
              mountPath: /etc/cortex-runtime-config
            - name: storage
              mountPath: "/data"
          ports:
            - name: http-metrics
              containerPort: 8080
              protocol: TCP
            - name: grpc
              containerPort: 9095
              protocol: TCP
            - name: gossip
              containerPort: 7946
              protocol: TCP
          startupProbe:
            failureThreshold: 60
            httpGet:
              path: /ready
              port: http-metrics
              scheme: HTTP
            initialDelaySeconds: 120
            periodSeconds: 30
          livenessProbe:
            httpGet:
              path: /ready
              port: http-metrics
              scheme: HTTP
          readinessProbe:
            httpGet:
              path: /ready
              port: http-metrics
          resources:
            requests:
              cpu: 5m
          securityContext:
            readOnlyRootFilesystem: true
          env:
            - name: ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  key: rootUser
                  name: minio
            - name: SECRET_KEY
              valueFrom:
                secretKeyRef:
                  key: rootPassword
                  name: minio
