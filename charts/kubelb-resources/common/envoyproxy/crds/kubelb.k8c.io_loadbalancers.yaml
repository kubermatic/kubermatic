---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.15.0
  name: loadbalancers.kubelb.k8c.io
spec:
  group: kubelb.k8c.io
  names:
    kind: LoadBalancer
    listKind: LoadBalancerList
    plural: loadbalancers
    shortNames:
    - lb
    singular: loadbalancer
  scope: Namespaced
  versions:
  - additionalPrinterColumns:
    - jsonPath: .metadata.labels.kubelb\.k8c\.io/origin-name
      name: OriginName
      type: string
    - jsonPath: .metadata.labels.kubelb\.k8c\.io/origin-ns
      name: OriginNamespace
      type: string
    name: v1alpha1
    schema:
      openAPIV3Schema:
        description: LoadBalancer is the Schema for the loadbalancers API
        properties:
          apiVersion:
            description: |-
              APIVersion defines the versioned schema of this representation of an object.
              Servers should convert recognized schemas to the latest internal value, and
              may reject unrecognized values.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            type: string
          kind:
            description: |-
              Kind is a string value representing the REST resource this object represents.
              Servers may infer this from the endpoint the client submits requests to.
              Cannot be updated.
              In CamelCase.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            type: string
          metadata:
            type: object
          spec:
            description: LoadBalancerSpec defines the desired state of LoadBalancer
            properties:
              endpoints:
                description: Sets of addresses and ports that comprise an exposed
                  user service on a cluster.
                items:
                  description: "LoadBalancerEndpoints is a group of addresses with
                    a common set of ports. The\nexpanded set of endpoints is the Cartesian
                    product of Addresses x Ports.\nFor example, given:\n\n\n\t{\n\t
                    \ Addresses: [{\"ip\": \"10.10.1.1\"}, {\"ip\": \"10.10.2.2\"}],\n\t
                    \ Ports:     [{\"name\": \"a\", \"port\": 8675}, {\"name\": \"b\",
                    \"port\": 309}]\n\t}\n\n\nThe resulting set of endpoints can be
                    viewed as:\n\n\n\ta: [ 10.10.1.1:8675, 10.10.2.2:8675 ],\n\tb:
                    [ 10.10.1.1:309, 10.10.2.2:309 ]"
                  properties:
                    addresses:
                      description: |-
                        IP addresses which offer the related ports that are marked as ready. These endpoints
                        should be considered safe for load balancers and clients to utilize.
                      items:
                        description: EndpointAddress is a tuple that describes single
                          IP address.
                        properties:
                          hostname:
                            description: The Hostname of this endpoint
                            type: string
                          ip:
                            description: |-
                              The IP of this endpoint.
                              May not be loopback (127.0.0.0/8), link-local (169.254.0.0/16),
                              or link-local multicast ((224.0.0.0/24).
                            minLength: 7
                            type: string
                        required:
                        - ip
                        type: object
                      minItems: 1
                      type: array
                    addressesReference:
                      description: |-
                        AddressesReference is a reference to the Addresses object that contains the IP addresses.
                        If this field is set, the Addresses field will be ignored.
                      properties:
                        apiVersion:
                          description: API version of the referent.
                          type: string
                        fieldPath:
                          description: |-
                            If referring to a piece of an object instead of an entire object, this string
                            should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2].
                            For example, if the object reference is to a container within a pod, this would take on a value like:
                            "spec.containers{name}" (where "name" refers to the name of the container that triggered
                            the event) or if no container name is specified "spec.containers[2]" (container with
                            index 2 in this pod). This syntax is chosen only to have some well-defined way of
                            referencing a part of an object.
                            TODO: this design is not final and this field is subject to change in the future.
                          type: string
                        kind:
                          description: |-
                            Kind of the referent.
                            More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
                          type: string
                        name:
                          description: |-
                            Name of the referent.
                            More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                          type: string
                        namespace:
                          description: |-
                            Namespace of the referent.
                            More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
                          type: string
                        resourceVersion:
                          description: |-
                            Specific resourceVersion to which this reference is made, if any.
                            More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
                          type: string
                        uid:
                          description: |-
                            UID of the referent.
                            More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
                          type: string
                      type: object
                      x-kubernetes-map-type: atomic
                    name:
                      description: Name is the name of the endpoints.
                      type: string
                    ports:
                      description: |-
                        Port numbers available on the related IP addresses.
                        This field is ignored for routes that are using kubernetes resources as the source.
                      items:
                        description: EndpointPort is a tuple that describes a single
                          port.
                        properties:
                          name:
                            description: |-
                              The name of this port.  This must match the 'name' field in the
                              corresponding ServicePort.
                              Must be a DNS_LABEL.
                              Optional only if one port is defined.
                            type: string
                          port:
                            description: The port number of the endpoint.
                            format: int32
                            type: integer
                          protocol:
                            default: TCP
                            description: The IP protocol for this port. Defaults to
                              "TCP".
                            enum:
                            - TCP
                            - UDP
                            type: string
                        required:
                        - port
                        type: object
                      minItems: 1
                      type: array
                  type: object
                minItems: 1
                type: array
              ports:
                description: |-
                  The list of ports that are exposed by the load balancer service.
                  only needed for layer 4
                items:
                  description: LoadBalancerPort contains information on service's
                    port.
                  properties:
                    name:
                      description: |-
                        The name of this port within the service. This must be a DNS_LABEL.
                        All ports within a Spec must have unique names. When considering
                        the endpoints for a Service, this must match the 'name' field in the
                        EndpointPort.
                        Optional if only one ServicePort is defined on this service.
                      type: string
                    port:
                      description: The port that will be exposed by the LoadBalancer.
                      format: int32
                      type: integer
                    protocol:
                      default: TCP
                      description: The IP protocol for this port. Defaults to "TCP".
                      enum:
                      - TCP
                      - UDP
                      type: string
                  required:
                  - port
                  type: object
                type: array
              type:
                default: ClusterIP
                description: |-
                  type determines how the Service is exposed. Defaults to ClusterIP. Valid
                  options are ExternalName, ClusterIP, NodePort, and LoadBalancer.
                  "ExternalName" maps to the specified externalName.
                  "ClusterIP" allocates a cluster-internal IP address for load-balancing to
                  endpoints. Endpoints are determined by the selector or if that is not
                  specified, by manual construction of an Endpoints object. If clusterIP is
                  "None", no virtual IP is allocated and the endpoints are published as a
                  set of endpoints rather than a stable IP.
                  "NodePort" builds on ClusterIP and allocates a port on every node which
                  routes to the clusterIP.
                  "LoadBalancer" builds on NodePort and creates an
                  external load-balancer (if supported in the current cloud) which routes
                  to the clusterIP.
                  More info: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
                type: string
            type: object
          status:
            description: LoadBalancerStatus defines the observed state of LoadBalancer
            properties:
              loadBalancer:
                description: |-
                  LoadBalancer contains the current status of the load-balancer,
                  if one is present.
                properties:
                  ingress:
                    description: |-
                      Ingress is a list containing ingress points for the load-balancer.
                      Traffic intended for the service should be sent to these ingress points.
                    items:
                      description: |-
                        LoadBalancerIngress represents the status of a load-balancer ingress point:
                        traffic intended for the service should be sent to an ingress point.
                      properties:
                        hostname:
                          description: |-
                            Hostname is set for load-balancer ingress points that are DNS based
                            (typically AWS load-balancers)
                          type: string
                        ip:
                          description: |-
                            IP is set for load-balancer ingress points that are IP based
                            (typically GCE or OpenStack load-balancers)
                          type: string
                        ipMode:
                          description: |-
                            IPMode specifies how the load-balancer IP behaves, and may only be specified when the ip field is specified.
                            Setting this to "VIP" indicates that traffic is delivered to the node with
                            the destination set to the load-balancer's IP and port.
                            Setting this to "Proxy" indicates that traffic is delivered to the node or pod with
                            the destination set to the node's IP and node port or the pod's IP and port.
                            Service implementations may use this information to adjust traffic routing.
                          type: string
                        ports:
                          description: |-
                            Ports is a list of records of service ports
                            If used, every port defined in the service should have an entry in it
                          items:
                            properties:
                              error:
                                description: |-
                                  Error is to record the problem with the service port
                                  The format of the error shall comply with the following rules:
                                  - built-in error values shall be specified in this file and those shall use
                                    CamelCase names
                                  - cloud provider specific error values must have names that comply with the
                                    format foo.example.com/CamelCase.
                                  ---
                                  The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
                                maxLength: 316
                                pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                                type: string
                              port:
                                description: Port is the port number of the service
                                  port of which status is recorded here
                                format: int32
                                type: integer
                              protocol:
                                default: TCP
                                description: |-
                                  Protocol is the protocol of the service port of which status is recorded here
                                  The supported values are: "TCP", "UDP", "SCTP"
                                type: string
                            required:
                            - port
                            - protocol
                            type: object
                          type: array
                          x-kubernetes-list-type: atomic
                      type: object
                    type: array
                    x-kubernetes-list-type: atomic
                type: object
              service:
                description: Service contains the current status of the LB service.
                properties:
                  ports:
                    items:
                      description: ServicePort contains information on service's port.
                      properties:
                        appProtocol:
                          description: |-
                            The application protocol for this port.
                            This is used as a hint for implementations to offer richer behavior for protocols that they understand.
                            This field follows standard Kubernetes label syntax.
                            Valid values are either:


                            * Un-prefixed protocol names - reserved for IANA standard service names (as per
                            RFC-6335 and https://www.iana.org/assignments/service-names).


                            * Kubernetes-defined prefixed names:
                              * 'kubernetes.io/h2c' - HTTP/2 prior knowledge over cleartext as described in https://www.rfc-editor.org/rfc/rfc9113.html#name-starting-http-2-with-prior-
                              * 'kubernetes.io/ws'  - WebSocket over cleartext as described in https://www.rfc-editor.org/rfc/rfc6455
                              * 'kubernetes.io/wss' - WebSocket over TLS as described in https://www.rfc-editor.org/rfc/rfc6455


                            * Other protocols should use implementation-defined prefixed names such as
                            mycompany.com/my-custom-protocol.
                          type: string
                        name:
                          description: |-
                            The name of this port within the service. This must be a DNS_LABEL.
                            All ports within a ServiceSpec must have unique names. When considering
                            the endpoints for a Service, this must match the 'name' field in the
                            EndpointPort.
                            Optional if only one ServicePort is defined on this service.
                          type: string
                        nodePort:
                          description: |-
                            The port on each node on which this service is exposed when type is
                            NodePort or LoadBalancer.  Usually assigned by the system. If a value is
                            specified, in-range, and not in use it will be used, otherwise the
                            operation will fail.  If not specified, a port will be allocated if this
                            Service requires one.  If this field is specified when creating a
                            Service which does not need it, creation will fail. This field will be
                            wiped when updating a Service to no longer need it (e.g. changing type
                            from NodePort to ClusterIP).
                            More info: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
                          format: int32
                          type: integer
                        port:
                          description: The port that will be exposed by this service.
                          format: int32
                          type: integer
                        protocol:
                          default: TCP
                          description: |-
                            The IP protocol for this port. Supports "TCP", "UDP", and "SCTP".
                            Default is TCP.
                          type: string
                        targetPort:
                          anyOf:
                          - type: integer
                          - type: string
                          description: |-
                            Number or name of the port to access on the pods targeted by the service.
                            Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
                            If this is a string, it will be looked up as a named port in the
                            target Pod's container ports. If this is not specified, the value
                            of the 'port' field is used (an identity map).
                            This field is ignored for services with clusterIP=None, and should be
                            omitted or set equal to the 'port' field.
                            More info: https://kubernetes.io/docs/concepts/services-networking/service/#defining-a-service
                          x-kubernetes-int-or-string: true
                        upstreamTargetPort:
                          format: int32
                          type: integer
                      required:
                      - port
                      - upstreamTargetPort
                      type: object
                    type: array
                type: object
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
