# Copyright 2020 The Kubermatic Kubernetes Platform contributors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

{{ if not .Values.kubermatic.checks.crd.disable }}
apiVersion: batch/v1
kind: Job
metadata:
  name: "check-crd-migration-{{ .Release.Name }}-{{ .Release.Revision }}"
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade,pre-delete
spec:
  backoffLimit: 3
  template:
    metadata:
      name: "check-crd-migration-{{ .Release.Name }}-{{ .Release.Revision }}"
    spec:
      restartPolicy: OnFailure
      serviceAccountName: kubermatic
      containers:
      - name: check-crd-migration
        image: "{{ .Values.kubermatic.checks.crd.image.repository }}:{{ .Values.kubermatic.checks.crd.image.tag }}"
        command: ["/bin/bash"]
        args:
        - "-c"
        - |
          set -euo pipefail

          # downgrade Helm if the cluster is still running an older Tiller version
          if [ "$HELM_VERSION" != "{{ .Values.kubermatic.checks.crd.helmVersion }}" ]; then
            curl -L https://storage.googleapis.com/kubernetes-helm/helm-{{ .Values.kubermatic.checks.crd.helmVersion }}-linux-amd64.tar.gz | tar -xvz
            mv linux-amd64/helm /usr/bin/helm
          fi

          # Iterate over all namespaces and search for ConfigMaps with the labels NAME=kubermatic&OWNER=TILLER
          for NS in $(kubectl get ns -o json | jq -r '.items[].metadata.name');do
            echo "Checking Namespace ${NS}"
            CONFIGMAPS=$(kubectl -n ${NS} get ConfigMap -l "OWNER=TILLER" -o json | jq -r '.items[].metadata.name')
            # Check all revisions
            for CM in ${CONFIGMAPS};do
              # Get chart name
              CHART_NAME=$(kubectl -n ${NS} get ConfigMap ${CM} -o json | jq -r '.metadata.labels.NAME')
              REVISION=$(kubectl -n ${NS} get ConfigMap ${CM} -o json | jq -r '.metadata.labels.VERSION')
              RELEASE=$(helm --tiller-namespace=${NS} get ${CHART_NAME} --revision ${REVISION})
              # Build the search query with a variable, otherwise the hook will match itself...
              CRD_NAME="clusters.kubermatic.k8s.io"
              if [[ ${RELEASE} == *"kubermatic-0.1.0"* ]] && [[ ${RELEASE} == *"CustomResourceDefinition"* ]] && [[ ${RELEASE} == *"name: ${CRD_NAME}"* ]]; then
                echo "========================================"
                echo "================ WARNING ==============="
                echo "========================================"
                echo "The last release contains CustomResourceDefinitions. Before proceeding run the migration in charts/kubermatic/migrate/migrate-kubermatic-chart.sh"
                echo "Otherwise clusters will be deleted!"
                exit 1
              fi
            done
          done
{{ end }}
